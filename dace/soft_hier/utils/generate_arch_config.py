#!/usr/bin/env python3


def generate_arg_cfg(output_path="generated_arch.py",
                     num_cluster_x=4,
                     num_cluster_y=4,
                     num_core_per_cluster=3,
                     cluster_tcdm_bank_width=32,
                     cluster_tcdm_bank_nb=128,
                     cluster_tcdm_base="0x00000000",
                     cluster_tcdm_size="0x00100000",
                     cluster_tcdm_remote="0x30000000",
                     cluster_heap_base="0x00000100",
                     cluster_heap_end="0x00100000",
                     cluster_stack_base="0x10000000",
                     cluster_stack_size="0x00020000",
                     cluster_zomem_base="0x18000000",
                     cluster_zomem_size="0x00020000",
                     cluster_reg_base="0x20000000",
                     cluster_reg_size="0x00000200",
                     spatz_num_vlsu_port=8,
                     spatz_num_function_unit=8,
                     redmule_ce_height=128,
                     redmule_ce_width=32,
                     redmule_ce_pipe=3,
                     redmule_elem_size=2,
                     redmule_queue_depth=1,
                     redmule_reg_base="0x20020000",
                     redmule_reg_size="0x00000200",
                     multi_idma_enable=1,
                     idma_outstand_txn=16,
                     idma_outstand_burst=256,
                     hbm_start_base="0xc0000000",
                     hbm_node_addr_space="0x00200000",
                     num_node_per_ctrl=1,
                     hbm_placement="4,0,0,0",
                     noc_outstanding=64,
                     noc_link_width=512,
                     instruction_mem_base="0x80000000",
                     instruction_mem_size="0x00010000",
                     soc_register_base="0x90000000",
                     soc_register_size="0x00010000",
                     soc_register_eoc="0x90000000",
                     soc_register_wakeup="0x90000004",
                     sync_base="0x40000000",
                     sync_interleave="0x00000080",
                     sync_special_mem="0x00000040"):
    # Process hbm_placement from string to a list
    hbm_placement_list = [p.strip() for p in hbm_placement.split(",")]

    code = f'''"""
Auto-generated FlexClusterArch class
------------------------------------
This file was generated by the generate_arg_cfg function.
"""

class FlexClusterArch:

    def __init__(self):

        # Cluster
        self.num_cluster_x           = {num_cluster_x}
        self.num_cluster_y           = {num_cluster_y}
        self.num_core_per_cluster    = {num_core_per_cluster}

        self.cluster_tcdm_bank_width = {cluster_tcdm_bank_width}
        self.cluster_tcdm_bank_nb    = {cluster_tcdm_bank_nb}

        self.cluster_tcdm_base       = {cluster_tcdm_base}
        self.cluster_tcdm_size       = {cluster_tcdm_size}
        self.cluster_tcdm_remote     = {cluster_tcdm_remote}

        self.cluster_heap_base       = {cluster_heap_base}
        self.cluster_heap_end        = {cluster_heap_end}

        self.cluster_stack_base      = {cluster_stack_base}
        self.cluster_stack_size      = {cluster_stack_size}

        self.cluster_zomem_base      = {cluster_zomem_base}
        self.cluster_zomem_size      = {cluster_zomem_size}

        self.cluster_reg_base        = {cluster_reg_base}
        self.cluster_reg_size        = {cluster_reg_size}

        # Spatz Vector Unit
        self.spatz_attaced_core_list = []  # Default empty
        self.spatz_num_vlsu_port     = {spatz_num_vlsu_port}
        self.spatz_num_function_unit = {spatz_num_function_unit}

        # RedMule
        self.redmule_ce_height       = {redmule_ce_height}
        self.redmule_ce_width        = {redmule_ce_width}
        self.redmule_ce_pipe         = {redmule_ce_pipe}
        self.redmule_elem_size       = {redmule_elem_size}
        self.redmule_queue_depth     = {redmule_queue_depth}
        self.redmule_reg_base        = {redmule_reg_base}
        self.redmule_reg_size        = {redmule_reg_size}

        # IDMA
'''

    # multi_idma_enable
    if multi_idma_enable:
        code += f'''        self.multi_idma_enable       = {multi_idma_enable}
        self.idma_outstand_txn       = {idma_outstand_txn}
        self.idma_outstand_burst     = {idma_outstand_burst}
'''
    else:
        code += f'''        self.idma_outstand_txn       = {idma_outstand_txn}
        self.idma_outstand_burst     = {idma_outstand_burst}
'''

    # HBM、NoC、System、Sync
    code += f'''
        # HBM
        self.hbm_start_base          = {hbm_start_base}
        self.hbm_node_addr_space     = {hbm_node_addr_space}
        self.num_node_per_ctrl       = {num_node_per_ctrl}
        self.hbm_chan_placement      = [{", ".join(hbm_placement_list)}]

        # NoC
        self.noc_outstanding         = {noc_outstanding}
        self.noc_link_width          = {noc_link_width}

        # System
        self.instruction_mem_base    = {instruction_mem_base}
        self.instruction_mem_size    = {instruction_mem_size}

        self.soc_register_base       = {soc_register_base}
        self.soc_register_size       = {soc_register_size}
        self.soc_register_eoc        = {soc_register_eoc}
        self.soc_register_wakeup     = {soc_register_wakeup}

        # Synchronization
        self.sync_base               = {sync_base}
        self.sync_interleave         = {sync_interleave}
        self.sync_special_mem        = {sync_special_mem}
'''

    with open(output_path, "w") as f:
        f.write(code)

    print(f"\n[INFO] The file '{output_path}' has been created.\n")
