[1m============================= test session starts ==============================[0m
platform linux -- Python 3.12.3, pytest-8.3.3, pluggy-1.5.0
rootdir: /home/primrose/Work/dace
configfile: pytest.ini
collected 678 items

add_edge_pair_test.py [32m.[0m[32m.[0m[32m.[0m[33m                                                [  0%][0m
add_state_api_test.py [32m.[0m[32m.[0m[33m                                                 [  0%][0m
argmax_test.py [32m.[0m[33m                                                         [  0%][0m
array_interface_test.py [32m.[0m[33m                                                [  1%][0m
blockreduce_cudatest.py [32m.[0m[33m                                                [  1%][0m
buffer_tiling_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[33m                                               [  1%][0m
callback_test.py [32m.[0m[32m.[0m[32m.[0m[33m                                                     [  2%][0m
call_sdfg_test.py [32m.[0m[33m                                                      [  2%][0m
chained_nested_tasklet_test.py [32m.[0m[32m.[0m[33m                                        [  2%][0m
chained_tasklet_test.py [32m.[0m[33m                                                [  2%][0m
compile_sdfg_test.py [32m.[0m[32m.[0m[33m                                                  [  3%][0m
config_test.py [32m.[0m[32m.[0m[33m                                                        [  3%][0m
confres_test.py [32m.[0m[33m                                                        [  3%][0m
consolidate_edges_test.py [32m.[0m[33m                                              [  3%][0m
const_access_test.py [32m.[0m[33m                                                   [  3%][0m
constant_array_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[33m                                              [  4%][0m
consume_chunk_cond_test.py [32m.[0m[33m                                             [  4%][0m
consume_test.py [32m.[0m[33m                                                        [  4%][0m
control_flow_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33m                                       [  6%][0m
copynd_test.py [32m.[0m[32m.[0m[33m                                                        [  6%][0m
cpp_tasklet_test.py [32m.[0m[33m                                                    [  7%][0m
cppunparse_test.py [32m.[0m[32m.[0m[33m                                                    [  7%][0m
cr_complex_test.py [32m.[0m[33m                                                     [  7%][0m
cuda_block_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33m                                                [  8%][0m
cuda_grid2d_test.py [32m.[0m[32m.[0m[33m                                                   [  8%][0m
cuda_grid_test.py [32m.[0m[32m.[0m[32m.[0m[33m                                                    [  9%][0m
cuda_highdim_kernel_test.py [32m.[0m[31mF[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                    [ 10%][0m
cuda_smem2d_test.py [32m.[0m[32m.[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m                                               [ 11%][0m
cuda_smem_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                                    [ 11%][0m
custom_build_folder_test.py [32m.[0m[31m                                            [ 11%][0m
custom_reduce_test.py [32m.[0m[31m                                                  [ 12%][0m
datadesc_test.py [32m.[0m[32m.[0m[31m                                                      [ 12%][0m
default_storage_test.py [32m.[0m[32m.[0m[31m                                               [ 12%][0m
different_stride_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                           [ 13%][0m
duplicate_arg_test.py [32m.[0m[31m                                                  [ 13%][0m
duplicate_naming_test.py [32m.[0m[32m.[0m[31m                                              [ 13%][0m
dynamic_sdfg_functions_test.py [32m.[0m[31m                                         [ 14%][0m
dynamic_tb_map_cudatest.py [31mF[0m[32m.[0m[31mF[0m[31mF[0m[31m                                          [ 14%][0m
enumerator_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                [ 15%][0m
external_module_test.py [32m.[0m[31m                                                [ 15%][0m
global_resolver_test.py [32m.[0m[31m                                                [ 15%][0m
graph_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                                        [ 16%][0m
half_cudatest.py [32m.[0m[32m.[0m[32m.[0m[31m                                                     [ 16%][0m
halfvec_cudatest.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                               [ 17%][0m
ifchain_test.py [32m.[0m[32m.[0m[31m                                                       [ 17%][0m
implicit_sdfg_test.py [32m.[0m[31m                                                  [ 17%][0m
indirection_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                                  [ 18%][0m
inline_chain_test.py [32m.[0m[31m                                                   [ 18%][0m
inline_external_edges_test.py [32m.[0m[31m                                          [ 18%][0m
inline_noinput_test.py [32m.[0m[31m                                                 [ 18%][0m
inline_noncontig_dim_test.py [32m.[0m[31m                                           [ 19%][0m
inline_nonsink_access_test.py [32m.[0m[32m.[0m[31m                                         [ 19%][0m
inline_symbol_test.py [32m.[0m[31m                                                  [ 19%][0m
inlining_test.py [32m.[0m[33ms[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                         [ 21%][0m
instrumentation_test.py [32m.[0m[33ms[0m[32m.[0m[31m                                              [ 22%][0m
intarg_test.py [32m.[0m[31m                                                         [ 22%][0m
kernel_fusion_cudatest.py [32m.[0m[32m.[0m[32m.[0m[31m                                            [ 22%][0m
lib_reuse_test.py [32m.[0m[32m.[0m[31m                                                     [ 23%][0m
local_inline_test.py [32m.[0m[31m                                                   [ 23%][0m
map_dim_shuffle_test.py [32m.[0m[32m.[0m[31m                                               [ 23%][0m
map_indirect_array_test.py [32m.[0m[31m                                             [ 23%][0m
mapreduce_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                [ 24%][0m
memlet_lifetime_validation_test.py [32m.[0m[31m                                     [ 24%][0m
memlet_propagation_decreasing_test.py [32m.[0m[31m                                  [ 24%][0m
memlet_propagation_squeezing_test.py [32m.[0m[32m.[0m[31m                                  [ 25%][0m
memlet_propagation_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                          [ 25%][0m
memlet_propagation_volume_test.py [32m.[0m[32m.[0m[31m                                     [ 26%][0m
mlir_tasklet_test.py [31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m                                       [ 28%][0m
multi_inline_test.py [32m.[0m[31m                                                   [ 28%][0m
multi_output_scope_test.py [32m.[0m[31m                                             [ 28%][0m
multiple_cr_test.py [32m.[0m[31m                                                    [ 28%][0m
multiple_tasklet_test.py [32m.[0m[31m                                               [ 28%][0m
multiprogram_cudatest.py [32m.[0m[31m                                               [ 28%][0m
multistate_init_test.py [32m.[0m[31m                                                [ 28%][0m
multistream_copy_cudatest.py [32m.[0m[32m.[0m[31m                                          [ 29%][0m
multistream_custom_cudatest.py [32m.[0m[31m                                         [ 29%][0m
multistream_kernel_cudatest.py [32m.[0m[31m                                         [ 29%][0m
ndloop_test.py [32m.[0m[31m                                                         [ 29%][0m
nested_control_flow_disabledtest.py [33ms[0m[31m                                    [ 29%][0m
nested_cr_test.py [32m.[0m[31m                                                      [ 29%][0m
nested_loop_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                               [ 30%][0m
nested_reduce_test.py [32m.[0m[31m                                                  [ 30%][0m
nested_sdfg_python_test.py [32m.[0m[31m                                             [ 31%][0m
nested_sdfg_scalar_test.py [32m.[0m[31m                                             [ 31%][0m
nested_sdfg_test.py [32m.[0m[31m                                                    [ 31%][0m
nested_stream_test.py [32m.[0m[31m                                                  [ 31%][0m
nested_strides_test.py [32m.[0m[31m                                                 [ 31%][0m
nested_symbol_partial_test.py [32m.[0m[31m                                          [ 31%][0m
nested_symbol_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                             [ 32%][0m
nested_vector_type_test.py [32m.[0m[31m                                             [ 32%][0m
nest_subgraph_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                            [ 33%][0m
numpy_bool_input_test.py [32m.[0m[31m                                               [ 34%][0m
offset_stride_test.py [32m.[0m[31m                                                  [ 34%][0m
openmp_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                   [ 35%][0m
parallel_sections_test.py [32m.[0m[31m                                              [ 35%][0m
parse_state_struct_test.py [32m.[0m[31m                                             [ 35%][0m
persistent_fusion_cudatest.py [32m.[0m[32m.[0m[31m                                         [ 35%][0m
persistent_map_cudatest.py [31mF[0m[32m.[0m[31m                                            [ 36%][0m
persistent_tb_map_cudatest.py [32m.[0m[31m                                          [ 36%][0m
properties_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                                   [ 36%][0m
range_from_string_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                      [ 38%][0m
read_after_write_test.py [32m.[0m[31m                                               [ 38%][0m
reduce_offsets_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                               [ 38%][0m
reduce_strided_disabledtest.py [33ms[0m[31m                                         [ 38%][0m
reduction_detection_test.py [32m.[0m[32m.[0m[31m                                           [ 39%][0m
registry_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                                 [ 40%][0m
reloadable_lib_test.py [32m.[0m[31m                                                 [ 40%][0m
reshape_test.py [32m.[0m[31m                                                        [ 40%][0m
scalar_output_cudatest.py [32m.[0m[32m.[0m[32m.[0m[31m                                            [ 40%][0m
schedule_inference_test.py [32m.[0m[31m                                             [ 41%][0m
sdfg_validate_names_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                    [ 42%][0m
sdfg_validate_scopes_test.py [32m.[0m[31m                                           [ 42%][0m
sdutil_test.py [32m.[0m[32m.[0m[31m                                                        [ 42%][0m
serialize_types_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                              [ 43%][0m
short_decorator_test.py [32m.[0m[31m                                                [ 43%][0m
simple_control_flow_test.py [32m.[0m[31m                                            [ 43%][0m
softmax_test.py [32m.[0m[31m                                                        [ 43%][0m
specialize_test.py [32m.[0m[31m                                                     [ 43%][0m
state_propagation_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                      [ 45%][0m
state_transition_test.py [32m.[0m[32m.[0m[31m                                              [ 45%][0m
stream_test.py [32m.[0m[32m.[0m[31m                                                        [ 45%][0m
strict_after_load_test.py [32m.[0m[31m                                              [ 45%][0m
strided_range_copy_test.py [32m.[0m[31m                                             [ 46%][0m
strided_range_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                                [ 46%][0m
struct_reduce_sdfg_test.py [32m.[0m[31m                                             [ 46%][0m
struct_reduce_test.py [32m.[0m[31m                                                  [ 46%][0m
struct_test.py [32m.[0m[31m                                                         [ 46%][0m
subarray_test.py [32m.[0m[31m                                                       [ 47%][0m
subset_covers_precise_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                   [ 48%][0m
subset_intersects_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                            [ 48%][0m
subsets_compose_extension_test.py [32m.[0m[31m                                      [ 48%][0m
subsets_squeeze_test.py [32m.[0m[32m.[0m[31m                                               [ 49%][0m
symbol_dependent_transients_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33ms[0m[33ms[0m[32m.[0m[31m                            [ 50%][0m
symbol_inference_test.py [32m.[0m[32m.[0m[31m                                              [ 50%][0m
symbol_in_tasklet_test.py [32m.[0m[32m.[0m[31m                                             [ 51%][0m
symbol_mapping_replace_test.py [32m.[0m[31m                                         [ 51%][0m
symbol_type_test.py [32m.[0m[31m                                                    [ 51%][0m
tasklet_test.py [32m.[0m[31m                                                        [ 51%][0m
threadlocal_stream_test.py [32m.[0m[31m                                             [ 51%][0m
threadlocal_test.py [32m.[0m[31m                                                    [ 51%][0m
tile_test.py [32m.[0m[31m                                                           [ 51%][0m
tile_twice_test.py [32m.[0m[31m                                                     [ 52%][0m
tiling_test.py [32m.[0m[31m                                                         [ 52%][0m
tiling_with_overlap_test.py [32m.[0m[32m.[0m[31m                                           [ 52%][0m
toplevel_interstate_test.py [32m.[0m[31m                                            [ 52%][0m
trivial_map_elimination_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                             [ 54%][0m
type_inference_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                   [ 56%][0m
uintptr_t_test.py [32m.[0m[32m.[0m[31m                                                     [ 56%][0m
unique_nested_sdfg_test.py [32m.[0m[32m.[0m[32m.[0m[31m                                           [ 57%][0m
unparse_memlet_test.py [32m.[0m[31m                                                 [ 57%][0m
vector_min_test.py [32m.[0m[31m                                                     [ 57%][0m
vectortype_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                               [ 58%][0m
vla_test.py [32m.[0m[31m                                                            [ 58%][0m
wcr_cudatest.py [32m.[0m[31m                                                        [ 58%][0m
transformations/apply_to_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                   [ 59%][0m
transformations/copy_to_map_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                                [ 60%][0m
transformations/deduplicate_access_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                        [ 61%][0m
transformations/double_buffering_test.py [32m.[0m[31m                               [ 61%][0m
transformations/gpu_grid_stride_tiling_test.py [32m.[0m[32m.[0m[31m                        [ 61%][0m
transformations/gpu_transform_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                              [ 62%][0m
transformations/local_storage_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                             [ 63%][0m
transformations/loop_detection_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                         [ 64%][0m
transformations/loop_manipulation_test.py [32m.[0m[32m.[0m[32m.[0m[31m                            [ 65%][0m
transformations/loop_to_map_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m      [ 69%][0m
transformations/map_collapse_test.py [32m.[0m[32m.[0m[31m                                  [ 70%][0m
transformations/map_dim_shuffle_test.py [32m.[0m[31m                                [ 70%][0m
transformations/map_distribution_test.py [31mF[0m[31m                               [ 70%][0m
transformations/map_expansion_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                               [ 70%][0m
transformations/mapfission_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                        [ 73%][0m
transformations/mapfusion_data_races_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                        [ 73%][0m
transformations/mapfusion_fpga_test.py [31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m                             [ 74%][0m
transformations/mapfusion_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                              [ 75%][0m
transformations/map_interchange_test.py [32m.[0m[32m.[0m[31m                               [ 75%][0m
transformations/maptoforloop_test.py [32m.[0m[31m                                   [ 76%][0m
transformations/map_unroll_test.py [32m.[0m[31m                                     [ 76%][0m
transformations/move_loop_into_map_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                  [ 78%][0m
transformations/nested_copies_among_connectors.py [32m.[0m[31mF[0m[31mF[0m[31mF[0m[31m                   [ 78%][0m
transformations/nest_subgraph_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                           [ 79%][0m
transformations/otf_map_fusion_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[32m.[0m[31m             [ 82%][0m
transformations/prune_connectors_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                          [ 83%][0m
transformations/redundant_array_view_chains_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                 [ 84%][0m
transformations/redundant_copy_data_races_test.py [32m.[0m[31m                      [ 84%][0m
transformations/redundant_copy_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                   [ 86%][0m
transformations/redundant_reshape_views_test.py [32m.[0m[32m.[0m[32m.[0m[31m                      [ 87%][0m
transformations/redundant_slices_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                       [ 88%][0m
transformations/refine_nested_access_test.py [32m.[0m[32m.[0m[32m.[0m[31m                         [ 88%][0m
transformations/remove_intermediate_write_test.py [32m.[0m[32m.[0m[32m.[0m[31m                    [ 89%][0m
transformations/state_elimination_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                           [ 89%][0m
transformations/state_fission_test.py [32m.[0m[31m                                  [ 90%][0m
transformations/state_fusion_extended_test.py [32m.[0m[31m                          [ 90%][0m
transformations/state_fusion_node_merge_test.py [32m.[0m[32m.[0m[31m                       [ 90%][0m
transformations/state_fusion_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                    [ 92%][0m
transformations/state_fusion_twowrites_test.py [32m.[0m[31m                         [ 93%][0m
transformations/tasklet_fusion_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                       [ 94%][0m
transformations/tiling_number_of_tiles_test.py [32m.[0m[31m                         [ 94%][0m
transformations/tiling_vectorization_test.py [32m.[0m[31m                           [ 94%][0m
transformations/transient_reuse_test.py [32m.[0m[31m                                [ 95%][0m
transformations/trivial_loop_elimination_test.py [32m.[0m[31m                       [ 95%][0m
transformations/vectorization_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                               [ 95%][0m
transformations/view_redundant_array_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                [ 97%][0m
transformations/warp_tiling_test.py [32m.[0m[31m                                    [ 97%][0m
transformations/wcr_conversion_test.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m                     [ 99%][0m
transformations/wcr_to_augassign_test.py [32m.[0m[32m.[0m[31m                              [100%][0m

=================================== FAILURES ===================================
[31m[1m___________________________________ test_gpu ___________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_gpu[39;49;00m():[90m[39;49;00m
        sdfg = highdim.to_sdfg()[90m[39;49;00m
        [94massert[39;49;00m sdfg.apply_transformations(GPUTransformMap, options=[96mdict[39;49;00m(fullcopy=[94mTrue[39;49;00m)) == [94m1[39;49;00m[90m[39;49;00m
>       _test(sdfg)[90m[39;49;00m

[1m[31mcuda_highdim_kernel_test.py[0m:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mcuda_highdim_kernel_test.py[0m:64: in _test
    [0msdfg(A=A, B=B, N=N, M=M, K=K, L=L, X=X, Y=Y, Z=Z, W=W, U=U)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:233: in generate_code
    [0m(global_code, frame_code, used_targets, used_environments) = frame.generate_code(sdfg, [94mNone[39;49;00m)[90m[39;49;00m
[1m[31m../dace/codegen/targets/framecode.py[0m:958: in generate_code
    [0mstates_generated = [96mself[39;49;00m.generate_states(sdfg, global_stream, callsite_stream)[90m[39;49;00m
[1m[31m../dace/codegen/targets/framecode.py[0m:510: in generate_states
    [0mcallsite_stream.write(cft.as_cpp([96mself[39;49;00m, sdfg.symbols), sdfg)[90m[39;49;00m
[1m[31m../dace/codegen/control_flow.py[0m:275: in as_cpp
    [0mexpr += elem.as_cpp(codegen, symbols)[90m[39;49;00m
[1m[31m../dace/codegen/control_flow.py[0m:180: in as_cpp
    [0mexpr += [96mself[39;49;00m.dispatch_state([96mself[39;49;00m.state)[90m[39;49;00m
[1m[31m../dace/codegen/targets/framecode.py[0m:483: in dispatch_state
    [0m[96mself[39;49;00m._dispatcher.dispatch_state(state, global_stream, stream)[90m[39;49;00m
[1m[31m../dace/codegen/dispatcher.py[0m:377: in dispatch_state
    [0mdisp.generate_state(state.sdfg, state.parent_graph, state, function_stream, callsite_stream)[90m[39;49;00m
[1m[31m../dace/codegen/targets/cuda.py[0m:1248: in generate_state
    [0m[96mself[39;49;00m._frame.generate_state(sdfg, cfg, state, function_stream, callsite_stream, generate_state_footer=[94mFalse[39;49;00m)[90m[39;49;00m
[1m[31m../dace/codegen/targets/framecode.py[0m:438: in generate_state
    [0m[96mself[39;49;00m._dispatcher.dispatch_subgraph(sdfg,[90m[39;49;00m
[1m[31m../dace/codegen/dispatcher.py[0m:413: in dispatch_subgraph
    [0m[96mself[39;49;00m.dispatch_scope(v.map.schedule, sdfg, cfg, scope_subgraph, state_id, function_stream,[90m[39;49;00m
[1m[31m../dace/codegen/dispatcher.py[0m:466: in dispatch_scope
    [0m[96mself[39;49;00m._map_dispatchers[map_schedule].generate_scope(sdfg, cfg, sub_dfg, state_id, function_stream,[90m[39;49;00m
[1m[31m../dace/codegen/targets/cuda.py[0m:1564: in generate_scope
    [0m[96mself[39;49;00m.generate_kernel_scope(sdfg, cfg, dfg_scope, state_id, scope_entry.map, kernel_name, grid_dims, block_dims,[90m[39;49;00m
[1m[31m../dace/codegen/targets/cuda.py[0m:2131: in generate_kernel_scope
    [0m[96mself[39;49;00m._dispatcher.dispatch_subgraph(sdfg,[90m[39;49;00m
[1m[31m../dace/codegen/dispatcher.py[0m:413: in dispatch_subgraph
    [0m[96mself[39;49;00m.dispatch_scope(v.map.schedule, sdfg, cfg, scope_subgraph, state_id, function_stream,[90m[39;49;00m
[1m[31m../dace/codegen/dispatcher.py[0m:466: in dispatch_scope
    [0m[96mself[39;49;00m._map_dispatchers[map_schedule].generate_scope(sdfg, cfg, sub_dfg, state_id, function_stream,[90m[39;49;00m
[1m[31m../dace/codegen/targets/cuda.py[0m:1407: in generate_scope
    [0m[96mself[39;49;00m.generate_devicelevel_scope(sdfg, cfg, dfg_scope, state_id, function_stream, callsite_stream)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dace.codegen.targets.cuda.CUDACodeGen object at 0x79a25c02c3e0>
sdfg = SDFG (tests_cuda_highdim_kernel_test_highdim)
cfg = SDFG (tests_cuda_highdim_kernel_test_highdim)
dfg_scope = <dace.sdfg.scope.ScopeSubgraphView object at 0x79a25c02c560>
state_id = 0
function_stream = <dace.codegen.prettycode.CodeIOStream object at 0x79a257515f00>
callsite_stream = <dace.codegen.prettycode.CodeIOStream object at 0x79a257f52800>

    [0m[94mdef[39;49;00m [92mgenerate_devicelevel_scope[39;49;00m([96mself[39;49;00m, sdfg: SDFG, cfg: ControlFlowRegion, dfg_scope: StateSubgraphView,[90m[39;49;00m
                                   state_id: [96mint[39;49;00m, function_stream: CodeIOStream, callsite_stream: CodeIOStream) -> [94mNone[39;49;00m:[90m[39;49;00m
        [90m# Sanity check[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m CUDACodeGen._in_device_code == [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        dfg = cfg.state(state_id)[90m[39;49;00m
        scope_entry = dfg_scope.source_nodes()[[94m0[39;49;00m][90m[39;49;00m
        scope_exit = dfg_scope.sink_nodes()[[94m0[39;49;00m][90m[39;49;00m
        scope_map = scope_entry.map[90m[39;49;00m
        next_scopes = [96mself[39;49;00m.get_next_scope_entries(dfg, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Add extra opening brace (dynamic map ranges, closed in MapExit[39;49;00m[90m[39;49;00m
        [90m# generator)[39;49;00m[90m[39;49;00m
        callsite_stream.write([33m'[39;49;00m[33m{[39;49;00m[33m'[39;49;00m, cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m scope_map.schedule == dtypes.ScheduleType.GPU_ThreadBlock_Dynamic:[90m[39;49;00m
            [94mif[39;49;00m [96mself[39;49;00m.backend == [33m'[39;49;00m[33mhip[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                [94mraise[39;49;00m [96mNotImplementedError[39;49;00m([33m'[39;49;00m[33mDynamic thread-block maps on HIP are currently unsupported[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m [96mlen[39;49;00m(scope_map.params) > [94m1[39;49;00m:[90m[39;49;00m
                [94mraise[39;49;00m [96mValueError[39;49;00m([33m'[39;49;00m[33mOnly one-dimensional maps are supported for dynamic block map schedule (got [39;49;00m[33m%d[39;49;00m[33m)[39;49;00m[33m'[39;49;00m %[90m[39;49;00m
                                 [96mlen[39;49;00m(scope_map.params))[90m[39;49;00m
            total_block_size = [94m1[39;49;00m[90m[39;49;00m
            [94mfor[39;49;00m bdim [95min[39;49;00m [96mself[39;49;00m._block_dims:[90m[39;49;00m
                [94mif[39;49;00m symbolic.issymbolic(bdim, sdfg.constants):[90m[39;49;00m
                    [94mraise[39;49;00m [96mValueError[39;49;00m([33m'[39;49;00m[33mBlock size has to be constant for block-wide dynamic map schedule (got [39;49;00m[33m%s[39;49;00m[33m)[39;49;00m[33m'[39;49;00m %[90m[39;49;00m
                                     [96mstr[39;49;00m(bdim))[90m[39;49;00m
                total_block_size *= bdim[90m[39;49;00m
    [90m[39;49;00m
            [90m##### TODO (later): Generalize[39;49;00m[90m[39;49;00m
            [90m# Find thread-block param map and its name[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m [96mself[39;49;00m._block_dims[[94m1[39;49;00m] != [94m1[39;49;00m [95mor[39;49;00m [96mself[39;49;00m._block_dims[[94m2[39;49;00m] != [94m1[39;49;00m:[90m[39;49;00m
                [94mraise[39;49;00m [96mNotImplementedError[39;49;00m([33m'[39;49;00m[33mDynamic block map schedule only implemented for 1D blocks currently[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
            [90m# Define all input connectors of this map entry[39;49;00m[90m[39;49;00m
            [90m# Note: no need for a C scope around these, as there will not be[39;49;00m[90m[39;49;00m
            [90m#       more than one dynamic thread-block map in a GPU device map[39;49;00m[90m[39;49;00m
            callsite_stream.write([33m'[39;49;00m[33munsigned int __dace_dynmap_begin = 0, __dace_dynmap_end = 0;[39;49;00m[33m'[39;49;00m, cfg, state_id,[90m[39;49;00m
                                  scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            outer_scope = dfg.entry_node(scope_entry)[90m[39;49;00m
            current_sdfg = sdfg[90m[39;49;00m
            [94mwhile[39;49;00m [95mnot[39;49;00m outer_scope [95mand[39;49;00m current_sdfg:[90m[39;49;00m
                current_state = current_sdfg.parent[90m[39;49;00m
                nsdfg_node = current_sdfg.parent_nsdfg_node[90m[39;49;00m
                outer_scope = current_state.entry_node(nsdfg_node)[90m[39;49;00m
                current_sdfg = current_state.parent[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m outer_scope:[90m[39;49;00m
                [94mraise[39;49;00m [96mValueError[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mFailed to find the outer scope of [39;49;00m[33m{[39;49;00mscope_entry[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            callsite_stream.write([90m[39;49;00m
                [33m'[39;49;00m[33mif ([39;49;00m[33m{}[39;49;00m[33m < [39;49;00m[33m{}[39;49;00m[33m) [39;49;00m[33m{{[39;49;00m[33m'[39;49;00m.format(outer_scope.map.params[[94m0[39;49;00m],[90m[39;49;00m
                                         _topy(subsets.Range(outer_scope.map.range[::-[94m1[39;49;00m]).max_element()[[94m0[39;49;00m] + [94m1[39;49;00m)), cfg,[90m[39;49;00m
                state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            [90m# NOTE: Dynamic map inputs must be defined both outside and inside the dynamic Map schedule.[39;49;00m[90m[39;49;00m
            [90m# They define inside the schedule the bounds of the any nested Maps.[39;49;00m[90m[39;49;00m
            [90m# They define outside the schedule the bounds of the dynamic Map's for-loop invocation.[39;49;00m[90m[39;49;00m
            [90m# NOTE: The value of the dynamic Map's variable may differ inside and outside the schedule.[39;49;00m[90m[39;49;00m
            [94mfor[39;49;00m e [95min[39;49;00m dace.sdfg.dynamic_map_inputs(dfg, scope_entry):[90m[39;49;00m
                callsite_stream.write([90m[39;49;00m
                    [96mself[39;49;00m._cpu_codegen.memlet_definition(sdfg, e.data, [94mFalse[39;49;00m, e.dst_conn,[90m[39;49;00m
                                                        e.dst.in_connectors[e.dst_conn]), cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            dynmap_var = scope_map.params[[94m0[39;49;00m][90m[39;49;00m
            dynmap_begin = scope_map.range[[94m0[39;49;00m][[94m0[39;49;00m][90m[39;49;00m
            dynmap_end = scope_map.range[[94m0[39;49;00m][[94m1[39;49;00m] + [94m1[39;49;00m[90m[39;49;00m
            dynmap_step = scope_map.range[[94m0[39;49;00m][[94m2[39;49;00m][90m[39;49;00m
            [94mif[39;49;00m dynmap_step != [94m1[39;49;00m:[90m[39;49;00m
                dynmap_var = [33mf[39;49;00m[33m'[39;49;00m[33m{[39;49;00mdynmap_var[33m}[39;49;00m[33m_idx[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                dynmap_begin = [94m0[39;49;00m[90m[39;49;00m
                dynmap_end = [33mf[39;49;00m[33m'[39;49;00m[33mint_ceil([39;49;00m[33m{[39;49;00mdynmap_end[90m [39;49;00m-[90m [39;49;00mdynmap_begin[33m}[39;49;00m[33m, [39;49;00m[33m{[39;49;00mdynmap_step[33m}[39;49;00m[33m)[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            callsite_stream.write([90m[39;49;00m
                [33m'[39;49;00m[33m__dace_dynmap_begin = [39;49;00m[33m{begin}[39;49;00m[33m;[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                [33m'[39;49;00m[33m__dace_dynmap_end = [39;49;00m[33m{end}[39;49;00m[33m;[39;49;00m[33m'[39;49;00m.format(begin=dynmap_begin, end=dynmap_end), cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            [90m# close if[39;49;00m[90m[39;49;00m
            callsite_stream.write([33m'[39;49;00m[33m}//t6[39;49;00m[33m'[39;49;00m, cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            callsite_stream.write([90m[39;49;00m
                [33m'[39;49;00m[33mdace::DynamicMap<[39;49;00m[33m{fine_grained}[39;49;00m[33m, [39;49;00m[33m{bsize}[39;49;00m[33m>::[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                [33m'[39;49;00m[33mschedule(dace_dyn_map_shared, __dace_dynmap_begin, [39;49;00m[33m'[39;49;00m[90m[39;49;00m
                [33m'[39;49;00m[33m__dace_dynmap_end, [39;49;00m[33m{kmapIdx}[39;49;00m[33m, [&](auto [39;49;00m[33m{kmapIdx}[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[90m[39;49;00m
                [33m'[39;49;00m[33mauto [39;49;00m[33m{param}[39;49;00m[33m) [39;49;00m[33m{{[39;49;00m[33m'[39;49;00m.format(fine_grained=([33m'[39;49;00m[33mtrue[39;49;00m[33m'[39;49;00m [94mif[39;49;00m Config.get_bool([90m[39;49;00m
                    [33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mcuda[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdynamic_map_fine_grained[39;49;00m[33m'[39;49;00m) [94melse[39;49;00m [33m'[39;49;00m[33mfalse[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          bsize=total_block_size,[90m[39;49;00m
                                          kmapIdx=outer_scope.map.params[[94m0[39;49;00m],[90m[39;49;00m
                                          param=dynmap_var), cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m e [95min[39;49;00m dace.sdfg.dynamic_map_inputs(dfg, scope_entry):[90m[39;49;00m
                callsite_stream.write([90m[39;49;00m
                    [96mself[39;49;00m._cpu_codegen.memlet_definition(sdfg, e.data, [94mFalse[39;49;00m, e.dst_conn,[90m[39;49;00m
                                                        e.dst.in_connectors[e.dst_conn]), cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
            [94mif[39;49;00m dynmap_step != [94m1[39;49;00m:[90m[39;49;00m
                callsite_stream.write([90m[39;49;00m
                    [33mf[39;49;00m[33m'[39;49;00m[33mauto [39;49;00m[33m{[39;49;00mscope_map.params[[94m0[39;49;00m][33m}[39;49;00m[33m = [39;49;00m[33m{[39;49;00mscope_map.range[[94m0[39;49;00m][[94m0[39;49;00m][33m}[39;49;00m[33m + [39;49;00m[33m{[39;49;00mdynmap_step[33m}[39;49;00m[33m * [39;49;00m[33m{[39;49;00mdynmap_var[33m}[39;49;00m[33m;[39;49;00m[33m'[39;49;00m, cfg,[90m[39;49;00m
                    state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
        [94melif[39;49;00m scope_map.schedule == dtypes.ScheduleType.GPU_Device:[90m[39;49;00m
            dfg_kernel = [96mself[39;49;00m._kernel_state.scope_subgraph([96mself[39;49;00m._kernel_map)[90m[39;49;00m
            grid_dims, block_dims, has_tbmap, has_dtbmap, extra_gdim_offsets = [96mself[39;49;00m.get_kernel_dimensions(dfg_kernel)[90m[39;49;00m
    [90m[39;49;00m
            [94mif[39;49;00m ([96mself[39;49;00m._kernel_map.map == dtypes.ScheduleType.GPU_Persistent [95mand[39;49;00m [96mlen[39;49;00m(scope_map.params) > [94m1[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m [96mValueError[39;49;00m([33m'[39;49;00m[33mOnly one-dimensional device maps are currently supported [39;49;00m[33m'[39;49;00m[90m[39;49;00m
                                 [33m'[39;49;00m[33mfor persistent kernel maps (got [39;49;00m[33m%d[39;49;00m[33m)[39;49;00m[33m'[39;49;00m.format([96mlen[39;49;00m(scope_map.params)))[90m[39;49;00m
    [90m[39;49;00m
            [94mif[39;49;00m [96mself[39;49;00m._kernel_map.schedule == dtypes.ScheduleType.GPU_Persistent:[90m[39;49;00m
                is_persistent = [94mTrue[39;49;00m[90m[39;49;00m
                block_dims = [96mself[39;49;00m._block_dims[90m[39;49;00m
                node = dfg_scope.source_nodes()[[94m0[39;49;00m][90m[39;49;00m
    [90m[39;49;00m
                device_map_range = subsets.Range(scope_map.range[::-[94m1[39;49;00m])[90m[39;49;00m
                device_map_dims = device_map_range.size()[90m[39;49;00m
                dsym = [[90m[39;49;00m
                    symbolic.symbol([33m'[39;49;00m[33m__DAPB[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, nonnegative=[94mTrue[39;49;00m, integer=[94mTrue[39;49;00m)[90m[39;49;00m
                    [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([96mlen[39;49;00m(device_map_range))[90m[39;49;00m
                ][90m[39;49;00m
                bidx = device_map_range.coord_at(dsym)[90m[39;49;00m
    [90m[39;49;00m
                [90m# handle dynamic map inputs[39;49;00m[90m[39;49;00m
                [94mfor[39;49;00m e [95min[39;49;00m dace.sdfg.dynamic_map_inputs(dfg, scope_entry):[90m[39;49;00m
                    callsite_stream.write([90m[39;49;00m
                        [96mself[39;49;00m._cpu_codegen.memlet_definition(sdfg, e.data, [94mFalse[39;49;00m, e.dst_conn,[90m[39;49;00m
                                                            e.dst.in_connectors[e.dst_conn]), cfg, state_id,[90m[39;49;00m
                        scope_entry)[90m[39;49;00m
    [90m[39;49;00m
                [90m# variables that need to be declared + the value they need to be initialized with[39;49;00m[90m[39;49;00m
                declarations = [][90m[39;49;00m
    [90m[39;49;00m
                [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([96mmin[39;49;00m([96mlen[39;49;00m(device_map_range), [94m3[39;49;00m)):[90m[39;49;00m
                    varname = scope_map.params[-i - [94m1[39;49;00m][90m[39;49;00m
    [90m[39;49;00m
                    [90m# Delinearize third dimension if necessary[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m i == [94m2[39;49;00m [95mand[39;49;00m [96mlen[39;49;00m(device_map_range) > [94m3[39;49;00m:[90m[39;49;00m
                        block_expr = [33m'[39;49;00m[33m(blockIdx.z / ([39;49;00m[33m%s[39;49;00m[33m))[39;49;00m[33m'[39;49;00m % _topy(functools.reduce(sympy.Mul, device_map_dims[[94m3[39;49;00m:], [94m1[39;49;00m))[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        block_expr = [33m'[39;49;00m[33mblockIdx.[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m % _named_idx(i)[90m[39;49;00m
                        [90m# If we defaulted to 32 threads per block, offset by thread ID[39;49;00m[90m[39;49;00m
                        [94mif[39;49;00m [95mnot[39;49;00m has_tbmap [95mor[39;49;00m has_dtbmap:[90m[39;49;00m
                            block_expr = [33m'[39;49;00m[33m([39;49;00m[33m%s[39;49;00m[33m * [39;49;00m[33m%s[39;49;00m[33m + threadIdx.[39;49;00m[33m%s[39;49;00m[33m)[39;49;00m[33m'[39;49;00m % (block_expr, _topy(block_dims[i]), _named_idx(i))[90m[39;49;00m
    [90m[39;49;00m
                    expr = _topy(bidx[i]).replace([33m'[39;49;00m[33m__DAPB[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, block_expr)[90m[39;49;00m
    [90m[39;49;00m
                    declarations.append((varname, expr))[90m[39;49;00m
    [90m[39;49;00m
                    [96mself[39;49;00m._dispatcher.defined_vars.add(varname, DefinedType.Scalar, [33m'[39;49;00m[33mint[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
                [90m# Delinearize beyond the third dimension[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m [96mlen[39;49;00m(device_map_range) > [94m3[39;49;00m:[90m[39;49;00m
                    [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([94m3[39;49;00m, [96mlen[39;49;00m(device_map_range)):[90m[39;49;00m
                        varname = scope_map.params[-i - [94m1[39;49;00m][90m[39;49;00m
                        [90m# true dim i = z / ('*'.join(kdims[i+1:])) % kdims[i][39;49;00m[90m[39;49;00m
                        block_expr = [33m'[39;49;00m[33m(blockIdx.z / ([39;49;00m[33m%s[39;49;00m[33m)) [39;49;00m[33m%%[39;49;00m[33m ([39;49;00m[33m%s[39;49;00m[33m)[39;49;00m[33m'[39;49;00m % ([90m[39;49;00m
                            _topy(functools.reduce(sympy.Mul, device_map_dims[i + [94m1[39;49;00m:], [94m1[39;49;00m)),[90m[39;49;00m
                            _topy(device_map_dims[i]),[90m[39;49;00m
                        )[90m[39;49;00m
    [90m[39;49;00m
                        expr = _topy(bidx[i]).replace([33m'[39;49;00m[33m__DAPB[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, block_expr)[90m[39;49;00m
    [90m[39;49;00m
                        declarations.append((varname, expr))[90m[39;49;00m
    [90m[39;49;00m
                        [96mself[39;49;00m._dispatcher.defined_vars.add(varname, DefinedType.Scalar, [33m'[39;49;00m[33mint[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
                kmap_min = subsets.Range([96mself[39;49;00m._kernel_map.range[::-[94m1[39;49;00m]).min_element()[90m[39;49;00m
                kmap_max = subsets.Range([96mself[39;49;00m._kernel_map.range[::-[94m1[39;49;00m]).max_element()[90m[39;49;00m
    [90m[39;49;00m
                [90m# if has_tbmap == False and has_dtbmap == False:[39;49;00m[90m[39;49;00m
                dsym_end = [d + bs - [94m1[39;49;00m [94mfor[39;49;00m d, bs [95min[39;49;00m [96mzip[39;49;00m(dsym, [96mself[39;49;00m._block_dims)][90m[39;49;00m
                minels = device_map_range.min_element()[90m[39;49;00m
                maxels = device_map_range.max_element()[90m[39;49;00m
                [94mfor[39;49;00m i, (v, minel, maxel) [95min[39;49;00m [96menumerate[39;49;00m([96mzip[39;49;00m(scope_map.params[::-[94m1[39;49;00m], minels, maxels)):[90m[39;49;00m
                    condition = [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
                    [90m# Optimize conditions if they are always true[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m i >= [94m3[39;49;00m [95mor[39;49;00m (dsym[i] >= minel) != [94mTrue[39;49;00m:[90m[39;49;00m
                        condition += [33m'[39;49;00m[33m%s[39;49;00m[33m >= [39;49;00m[33m%s[39;49;00m[33m'[39;49;00m % (v, _topy(minel))[90m[39;49;00m
                    [94mif[39;49;00m (i >= [94m3[39;49;00m[90m[39;49;00m
                            [95mor[39;49;00m ((dsym_end[i] < maxel) != [94mFalse[39;49;00m [95mand[39;49;00m ((dsym_end[i] % [96mself[39;49;00m._block_dims[i]) != [94m0[39;49;00m) == [94mTrue[39;49;00m)[90m[39;49;00m
                            [95mor[39;49;00m ([96mself[39;49;00m._block_dims[i] > maxel) == [94mTrue[39;49;00m):[90m[39;49;00m
                        [94mif[39;49;00m [96mlen[39;49;00m(condition) > [94m0[39;49;00m:[90m[39;49;00m
                            condition += [33m'[39;49;00m[33m && [39;49;00m[33m'[39;49;00m[90m[39;49;00m
                        [94mif[39;49;00m has_dtbmap:[90m[39;49;00m
                            condition += [33m'[39;49;00m[33m{mapIdx}[39;49;00m[33m < int_ceil([39;49;00m[33m{max}[39;49;00m[33m, [39;49;00m[33m{bs}[39;49;00m[33m) * [39;49;00m[33m{bs}[39;49;00m[33m'[39;49;00m.format([90m[39;49;00m
                                mapIdx=v,[90m[39;49;00m
                                [96mmax[39;49;00m=_topy(maxel + [94m1[39;49;00m),[90m[39;49;00m
                                bs=_topy(block_dims[i]),[90m[39;49;00m
                            )[90m[39;49;00m
                        [94melse[39;49;00m:[90m[39;49;00m
                            condition += [33m'[39;49;00m[33m%s[39;49;00m[33m < [39;49;00m[33m%s[39;49;00m[33m'[39;49;00m % (v, _topy(maxel + [94m1[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
                    [94mif[39;49;00m is_persistent [95mand[39;49;00m [95mnot[39;49;00m has_tbmap:[90m[39;49;00m
                        stride = [33m'[39;49;00m[33mgridDim.x * [39;49;00m[33m{}[39;49;00m[33m'[39;49;00m.format(_topy(block_dims[i]))[90m[39;49;00m
                    [94melif[39;49;00m is_persistent [95mand[39;49;00m has_tbmap:[90m[39;49;00m
                        stride = [33m'[39;49;00m[33mgridDim.x[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        stride = [96mself[39;49;00m._grid_dims[i] [94mif[39;49;00m has_tbmap \
                            [94melse[39;49;00m (kmap_max[i] + [94m1[39;49;00m - kmap_min[i])[90m[39;49;00m
    [90m[39;49;00m
                    [94mif[39;49;00m [96mlen[39;49;00m(condition) > [94m0[39;49;00m:[90m[39;49;00m
                        varname, expr = declarations.pop([94m0[39;49;00m)[90m[39;49;00m
                        callsite_stream.write([90m[39;49;00m
                            [33m'[39;49;00m[33mfor (int [39;49;00m[33m{varname}[39;49;00m[33m = [39;49;00m[33m{expr}[39;49;00m[33m; [39;49;00m[33m{cond}[39;49;00m[33m; [39;49;00m[33m{varname}[39;49;00m[33m += [39;49;00m[33m'[39;49;00m[90m[39;49;00m
                            [33m'[39;49;00m[33m{stride}[39;49;00m[33m) [39;49;00m[33m{{[39;49;00m[33m'[39;49;00m.format([90m[39;49;00m
                                varname=varname,[90m[39;49;00m
                                expr=expr,[90m[39;49;00m
                                cond=condition,[90m[39;49;00m
                                stride=stride,[90m[39;49;00m
                                pers=is_persistent,[90m[39;49;00m
                            ), cfg, state_id, node)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        [90m# will only be entered once[39;49;00m[90m[39;49;00m
                        varname, expr = declarations.pop([94m0[39;49;00m)[90m[39;49;00m
                        callsite_stream.write([33m'[39;49;00m[33mint [39;49;00m[33m{varname}[39;49;00m[33m = [39;49;00m[33m{expr}[39;49;00m[33m;[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                                              [33m'[39;49;00m[33m{{[39;49;00m[33m'[39;49;00m.format([90m[39;49;00m
                                                  varname=varname,[90m[39;49;00m
                                                  expr=expr,[90m[39;49;00m
                                              ), cfg, state_id, node)[90m[39;49;00m
            [94melse[39;49;00m:  [90m# Device map in Device map[39;49;00m[90m[39;49;00m
                brange = subsets.Range(scope_map.range[::-[94m1[39;49;00m])[90m[39;49;00m
                kdims = brange.size()[90m[39;49;00m
                dsym = [[90m[39;49;00m
                    symbolic.symbol([33m'[39;49;00m[33m__DAPT[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, nonnegative=[94mTrue[39;49;00m, integer=[94mTrue[39;49;00m) - off[90m[39;49;00m
                    [94mfor[39;49;00m i, off [95min[39;49;00m [96mzip[39;49;00m([96mrange[39;49;00m([96mlen[39;49;00m(brange)), extra_gdim_offsets[scope_map])[90m[39;49;00m
                ][90m[39;49;00m
                gdims = [96mlen[39;49;00m([96mself[39;49;00m._kernel_map.params)[90m[39;49;00m
                relevant_block_dims = [96mself[39;49;00m._block_dims[gdims:] + [[94m1[39;49;00m] * [96mlen[39;49;00m(scope_map.params)[90m[39;49;00m
                dsym_end = [d + (bs * rng[[94m2[39;49;00m]) - [94m1[39;49;00m [94mfor[39;49;00m d, bs, rng [95min[39;49;00m [96mzip[39;49;00m(dsym, relevant_block_dims, brange)][90m[39;49;00m
                tidx = brange.coord_at(dsym)[90m[39;49;00m
                [94mif[39;49;00m [96mlen[39;49;00m(brange) + gdims > [94m3[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m [96mNotImplementedError[39;49;00m([33m'[39;49;00m[33mDelinearization with nested scope maps not yet implemented[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
                [90m# First three dimensions are evaluated directly[39;49;00m[90m[39;49;00m
                [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([96mlen[39;49;00m(brange)):[90m[39;49;00m
                    varname = scope_map.params[-i - [94m1[39;49;00m][90m[39;49;00m
                    idx = _named_idx(i + gdims)[90m[39;49;00m
                    block_expr = [33mf[39;49;00m[33m'[39;49;00m[33mblockIdx.[39;49;00m[33m{[39;49;00midx[33m}[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m relevant_block_dims[i] != [94m1[39;49;00m:[90m[39;49;00m
                        block_expr = [33mf[39;49;00m[33m'[39;49;00m[33m(blockIdx.[39;49;00m[33m{[39;49;00midx[33m}[39;49;00m[33m * [39;49;00m[33m{[39;49;00m_topy(relevant_block_dims[i])[33m}[39;49;00m[33m + threadIdx.[39;49;00m[33m{[39;49;00midx[33m}[39;49;00m[33m)[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
                    expr = _topy(tidx[i]).replace([33m'[39;49;00m[33m__DAPT[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, block_expr)[90m[39;49;00m
                    callsite_stream.write([33m'[39;49;00m[33mint [39;49;00m[33m%s[39;49;00m[33m = [39;49;00m[33m%s[39;49;00m[33m;[39;49;00m[33m'[39;49;00m % (varname, expr), cfg, state_id, scope_entry)[90m[39;49;00m
                    [96mself[39;49;00m._dispatcher.defined_vars.add(varname, DefinedType.Scalar, [33m'[39;49;00m[33mint[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
                [90m# Generate conditions for this subgrid's execution using min and max[39;49;00m[90m[39;49;00m
                [90m# element, e.g. skipping out-of-bounds threads[39;49;00m[90m[39;49;00m
                minels = brange.min_element()[90m[39;49;00m
                maxels = brange.max_element()[90m[39;49;00m
                [94mfor[39;49;00m i, (v, minel, maxel) [95min[39;49;00m [96menumerate[39;49;00m([96mzip[39;49;00m(scope_map.params[::-[94m1[39;49;00m], minels, maxels)):[90m[39;49;00m
                    condition = [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
                    [90m# Optimize conditions if they are always true[39;49;00m[90m[39;49;00m
                    [90m#############################################[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
                    [90m# Block range start[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m i >= [94m3[39;49;00m [95mor[39;49;00m (dsym[i] >= minel) != [94mTrue[39;49;00m:[90m[39;49;00m
                        condition += [33m'[39;49;00m[33m%s[39;49;00m[33m >= [39;49;00m[33m%s[39;49;00m[33m'[39;49;00m % (v, _topy(minel))[90m[39;49;00m
    [90m[39;49;00m
                    [90m# Special case: block size is exactly the range of the map (0:b)[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m i >= [94m3[39;49;00m:[90m[39;49;00m
                        skipcond = [94mFalse[39;49;00m[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        skipcond = dsym_end[i].subs({dsym[i]: minel}) == maxel[90m[39;49;00m
    [90m[39;49;00m
                    [90m# Block range end[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m i >= [94m3[39;49;00m [95mor[39;49;00m ([95mnot[39;49;00m skipcond [95mand[39;49;00m (dsym_end[i] < maxel) != [94mTrue[39;49;00m):[90m[39;49;00m
                        [94mif[39;49;00m [96mlen[39;49;00m(condition) > [94m0[39;49;00m:[90m[39;49;00m
                            condition += [33m'[39;49;00m[33m && [39;49;00m[33m'[39;49;00m[90m[39;49;00m
                        condition += [33m'[39;49;00m[33m%s[39;49;00m[33m < [39;49;00m[33m%s[39;49;00m[33m'[39;49;00m % (v, _topy(maxel + [94m1[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
                    [90m# Emit condition in code[39;49;00m[90m[39;49;00m
                    [94mif[39;49;00m [96mlen[39;49;00m(condition) > [94m0[39;49;00m:[90m[39;49;00m
                        [96mself[39;49;00m._kernel_grid_conditions.append([33mf[39;49;00m[33m'[39;49;00m[33mif ([39;49;00m[33m{[39;49;00mcondition[33m}[39;49;00m[33m) [39;49;00m[33m{{[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                        callsite_stream.write([33m'[39;49;00m[33mif ([39;49;00m[33m%s[39;49;00m[33m) [39;49;00m[33m{[39;49;00m[33m'[39;49;00m % condition, cfg, state_id, scope_entry)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        [96mself[39;49;00m._kernel_grid_conditions.append([33m'[39;49;00m[33m{[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                        callsite_stream.write([33m'[39;49;00m[33m{[39;49;00m[33m'[39;49;00m, cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
        [94melse[39;49;00m:[90m[39;49;00m
            [94mfor[39;49;00m dim [95min[39;49;00m [96mrange[39;49;00m([96mlen[39;49;00m(scope_map.range)):[90m[39;49;00m
                callsite_stream.write([33m'[39;49;00m[33m{[39;49;00m[33m'[39;49;00m, cfg, state_id, scope_entry)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Emit internal array allocation (deallocation handled at MapExit)[39;49;00m[90m[39;49;00m
        [96mself[39;49;00m._frame.allocate_arrays_in_scope(sdfg, cfg, scope_entry, function_stream, callsite_stream)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate all index arguments for block[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m scope_map.schedule == dtypes.ScheduleType.GPU_ThreadBlock:[90m[39;49;00m
            [94mif[39;49;00m [96mself[39;49;00m._scope_has_collaborative_copy:[90m[39;49;00m
                [90m# Emit post-copy synchronization[39;49;00m[90m[39;49;00m
                callsite_stream.write([33m'[39;49;00m[33m__syncthreads();[39;49;00m[33m'[39;49;00m, cfg, state_id, scope_entry)[90m[39;49;00m
                [90m# Reset thread-block-level information[39;49;00m[90m[39;49;00m
                [96mself[39;49;00m._scope_has_collaborative_copy = [94mFalse[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
            brange = subsets.Range(scope_map.range[::-[94m1[39;49;00m])[90m[39;49;00m
            kdims = brange.size()[90m[39;49;00m
            [96mprint[39;49;00m([33m"[39;49;00m[33mKDIMS:[39;49;00m[33m"[39;49;00m, kdims, [33m"[39;49;00m[33mBRANGE:[39;49;00m[33m"[39;49;00m, brange)[90m[39;49;00m
            dsym = [symbolic.symbol([33m'[39;49;00m[33m__DAPT[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, nonnegative=[94mTrue[39;49;00m, integer=[94mTrue[39;49;00m) [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([96mlen[39;49;00m(brange))][90m[39;49;00m
            dsym_end = [d + (bs * rng[[94m2[39;49;00m]) - [94m1[39;49;00m [94mfor[39;49;00m d, bs, rng [95min[39;49;00m [96mzip[39;49;00m(dsym, [96mself[39;49;00m._block_dims, brange)][90m[39;49;00m
            tidx = brange.coord_at(dsym)[90m[39;49;00m
    [90m[39;49;00m
            [90m# First three dimensions are evaluated directly[39;49;00m[90m[39;49;00m
            [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([96mmin[39;49;00m([96mlen[39;49;00m(brange), [94m3[39;49;00m)):[90m[39;49;00m
                varname = scope_map.params[-i - [94m1[39;49;00m][90m[39;49;00m
                [96mprint[39;49;00m(varname)[90m[39;49;00m
    [90m[39;49;00m
                [90m# Delinearize third dimension if necessary[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m i == [94m2[39;49;00m [95mand[39;49;00m [96mlen[39;49;00m(brange) > [94m3[39;49;00m:[90m[39;49;00m
                    block_expr = [33m'[39;49;00m[33m(threadIdx.z / ([39;49;00m[33m%s[39;49;00m[33m))[39;49;00m[33m'[39;49;00m % _topy(functools.reduce(sympy.Mul, kdims[[94m3[39;49;00m:], [94m1[39;49;00m))[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    block_expr = [33m'[39;49;00m[33m(threadIdx.[39;49;00m[33m%s[39;49;00m[33m / ([39;49;00m[33m%s[39;49;00m[33m))[39;49;00m[33m'[39;49;00m % (_named_idx(i), brange[-i - [94m1[39;49;00m][-[94m1[39;49;00m])[90m[39;49;00m
    [90m[39;49;00m
                [96mprint[39;49;00m([33m"[39;49;00m[33mEXPR:[39;49;00m[33m"[39;49;00m, block_expr, tidx[i])[90m[39;49;00m
                expr = _topy(tidx[i]).replace([33m'[39;49;00m[33m__DAPT[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, block_expr)[90m[39;49;00m
                [96mprint[39;49;00m([33m"[39;49;00m[33mEXPR:[39;49;00m[33m"[39;49;00m, expr)[90m[39;49;00m
                callsite_stream.write([33m'[39;49;00m[33mint [39;49;00m[33m%s[39;49;00m[33m = [39;49;00m[33m%s[39;49;00m[33m;[39;49;00m[33m'[39;49;00m % (varname, expr), cfg, state_id, scope_entry)[90m[39;49;00m
                [96mself[39;49;00m._dispatcher.defined_vars.add(varname, DefinedType.Scalar, [33m'[39;49;00m[33mint[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
            [90m# Delinearize beyond the third dimension[39;49;00m[90m[39;49;00m
            [90m# Delinearize beyond the third dimension[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m [96mlen[39;49;00m(brange) > [94m3[39;49;00m:[90m[39;49;00m
                [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m([94m3[39;49;00m, [96mlen[39;49;00m(brange)):[90m[39;49;00m
                    varname = scope_map.params[-i - [94m1[39;49;00m][90m[39;49;00m
                    [90m# true dim i = z / ('*'.join(kdims[i+1:])) % kdims[i][39;49;00m[90m[39;49;00m
                    block_expr = [33m'[39;49;00m[33m(threadIdx.z / ([39;49;00m[33m%s[39;49;00m[33m)) [39;49;00m[33m%%[39;49;00m[33m ([39;49;00m[33m%s[39;49;00m[33m)[39;49;00m[33m'[39;49;00m % ([90m[39;49;00m
                        _topy(functools.reduce(sympy.Mul, kdims[i + [94m1[39;49;00m:], [94m1[39;49;00m)),[90m[39;49;00m
                        _topy(kdims[i]),[90m[39;49;00m
                    )[90m[39;49;00m
    [90m[39;49;00m
                    expr = _topy(tidx[i]).replace([33m'[39;49;00m[33m__DAPT[39;49;00m[33m%d[39;49;00m[33m'[39;49;00m % i, block_expr)[90m[39;49;00m
                    callsite_stream.write([33m'[39;49;00m[33mint [39;49;00m[33m%s[39;49;00m[33m = [39;49;00m[33m%s[39;49;00m[33m;[39;49;00m[33m'[39;49;00m % (varname, expr), cfg, state_id, scope_entry)[90m[39;49;00m
                    [96mself[39;49;00m._dispatcher.defined_vars.add(varname, DefinedType.Scalar, [33m'[39;49;00m[33mint[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [90m# Optimize conditions if they are always true[39;49;00m[90m[39;49;00m
                [90m#############################################[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
                [90m# Block range start[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m i >= [94m3[39;49;00m [95mor[39;49;00m (dsym[i] >= minel) != [94mTrue[39;49;00m:[90m[39;49;00m
>                   condition += [33m'[39;49;00m[33m%s[39;49;00m[33m >= [39;49;00m[33m%s[39;49;00m[33m'[39;49;00m % (v, _topy(minel))[90m[39;49;00m
[1m[31mE                   UnboundLocalError: cannot access local variable 'condition' where it is not associated with a value[0m

[1m[31m../dace/codegen/targets/cuda.py[0m:2502: UnboundLocalError
----------------------------- Captured stdout call -----------------------------
High-dimensional GPU kernel test (12, 3, 14, 15, 1, 2, 3, 4, 5)
BSIZE: [U, W - 3, X*Y*(Z - 1)]
KDIMS: [U, W - 3, Z - 1, Y, X] BRANGE: 0:U, 2:W - 1, 1:Z, 0:Y, 0:X
e
EXPR: (threadIdx.x / (1)) __DAPT0
EXPR: (threadIdx.x / (1))
d
EXPR: (threadIdx.y / (1)) __DAPT1 + 2
EXPR: ((threadIdx.y / (1)) + 2)
c
EXPR: (threadIdx.z / ((X * Y))) __DAPT2 + 1
EXPR: ((threadIdx.z / ((X * Y))) + 1)
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m____________________________ test_gpu_localstorage _____________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage'
program_name = 'cuda_smem2d_gpu_localstorage', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a257f50f40>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg...eFiles/Makefile2:85: CMakeFiles/cuda_smem2d_gpu_localstorage.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_gpu_localstorage[39;49;00m():[90m[39;49;00m
        sdfg = cudahello.to_sdfg()[90m[39;49;00m
        sdfg.name = [33m"[39;49;00m[33mcuda_smem2d_gpu_localstorage[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m sdfg.apply_transformations([GPUTransformMap, InLocalStorage], options=[{}, {[33m'[39;49;00m[33marray[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mgpu_V[39;49;00m[33m'[39;49;00m}]) == [94m2[39;49;00m[90m[39;49;00m
>       _test(sdfg)[90m[39;49;00m

[1m[31mcuda_smem2d_test.py[0m:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mcuda_smem2d_test.py[0m:34: in _test
    [0msdfg(V=V, Vout=Vout, H=H, W=W)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage'
program_name = 'cuda_smem2d_gpu_localstorage', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CUDA object CMakeFiles/cuda_smem2d_gpu_localstorage.dir/home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage/src/cuda/cuda_smem2d_gpu_localstorage_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage/src/cuda/cuda_smem2d_gpu_localstorage_cuda.cu(124): error: expected a declaration[0m
[1m[31mE                 }[0m
[1m[31mE                 ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage/src/cuda/cuda_smem2d_gpu_localstorage_cuda.cu(128): warning #12-D: parsing restarts here after previous syntax error[0m
[1m[31mE                 extern "C" void __dace_runkernel_multiplication_0_0_0(cuda_smem2d_gpu_localstorage_state_t *__state, const double * __restrict__ gpu_V, double * __restrict__ gpu_Vout, int H, int W);[0m
[1m[31mE                                                                                                                                                                                                      ^[0m
[1m[31mE               [0m
[1m[31mE               1 error detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage/src/cuda/cuda_smem2d_gpu_localstorage_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/cuda_smem2d_gpu_localstorage.dir/build.make:91: CMakeFiles/cuda_smem2d_gpu_localstorage.dir/home/primrose/Work/dace/tests/.dacecache/cuda_smem2d_gpu_localstorage/src/cuda/cuda_smem2d_gpu_localstorage_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/cuda_smem2d_gpu_localstorage.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
Vector double CUDA (shared memory 2D) 128x64
BSIZE: [32, 8, 1]
KDIMS: [32, 8] BRANGE: 0:32, 0:8
bj
EXPR: (threadIdx.x / (1)) __DAPT0
EXPR: (threadIdx.x / (1))
bi
EXPR: (threadIdx.y / (1)) __DAPT1
EXPR: (threadIdx.y / (1))
NS []
FNS []
[31m[1m____________________________ test_gpu_2localstorage ____________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage'
program_name = 'cuda_2_smem2d_gpu_localstorage', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a257f50940>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg...iles/Makefile2:85: CMakeFiles/cuda_2_smem2d_gpu_localstorage.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_gpu_2localstorage[39;49;00m():[90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92maddtwoandmult[39;49;00m(A: dace.float64[H, W], B: dace.float64[H, W], Vout: dace.float64[H, W]):[90m[39;49;00m
            [94mfor[39;49;00m i, j [95min[39;49;00m dace.map[[94m0[39;49;00m:H:[94m8[39;49;00m, [94m0[39;49;00m:W:[94m32[39;49;00m]:[90m[39;49;00m
                [94mfor[39;49;00m bi, bj [95min[39;49;00m dace.map[[94m0[39;49;00m:[94m8[39;49;00m, [94m0[39;49;00m:[94m32[39;49;00m]:[90m[39;49;00m
                    [94mwith[39;49;00m dace.tasklet:[90m[39;49;00m
                        a << A[i + bi, j + bj][90m[39;49;00m
                        b << B[i + bi, j + bj][90m[39;49;00m
                        out = (a + b) * [94m2.0[39;49;00m[90m[39;49;00m
                        out >> Vout[i + bi, j + bj][90m[39;49;00m
    [90m[39;49;00m
        sdfg = addtwoandmult.to_sdfg()[90m[39;49;00m
        sdfg.name = [33m"[39;49;00m[33mcuda_2_smem2d_gpu_localstorage[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        [94massert[39;49;00m sdfg.apply_transformations([GPUTransformMap, InLocalStorage, InLocalStorage],[90m[39;49;00m
                                          options=[{}, {[90m[39;49;00m
                                              [33m'[39;49;00m[33marray[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mgpu_A[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                                          }, {[90m[39;49;00m
                                              [33m'[39;49;00m[33marray[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mgpu_B[39;49;00m[33m'[39;49;00m[90m[39;49;00m
                                          }]) == [94m3[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        A = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        B = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        out = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        refout = (A + B) * [94m2[39;49;00m[90m[39;49;00m
>       sdfg(A, B, out, H=[94m128[39;49;00m, W=[94m64[39;49;00m)[90m[39;49;00m

[1m[31mcuda_smem2d_test.py[0m:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage'
program_name = 'cuda_2_smem2d_gpu_localstorage', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CUDA object CMakeFiles/cuda_2_smem2d_gpu_localstorage.dir/home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage/src/cuda/cuda_2_smem2d_gpu_localstorage_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage/src/cuda/cuda_2_smem2d_gpu_localstorage_cuda.cu(127): error: expected a declaration[0m
[1m[31mE                 }[0m
[1m[31mE                 ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage/src/cuda/cuda_2_smem2d_gpu_localstorage_cuda.cu(131): warning #12-D: parsing restarts here after previous syntax error[0m
[1m[31mE                 extern "C" void __dace_runkernel_tests_cuda_smem2d_test_addtwoandmult_66_0_0_0(cuda_2_smem2d_gpu_localstorage_state_t *__state, const double * __restrict__ gpu_A, const double * __restrict__ gpu_B, double * __restrict__ gpu_Vout, int H, int W);[0m
[1m[31mE                                                                                                                                                                                                                                                                    ^[0m
[1m[31mE               [0m
[1m[31mE               1 error detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage/src/cuda/cuda_2_smem2d_gpu_localstorage_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/cuda_2_smem2d_gpu_localstorage.dir/build.make:91: CMakeFiles/cuda_2_smem2d_gpu_localstorage.dir/home/primrose/Work/dace/tests/.dacecache/cuda_2_smem2d_gpu_localstorage/src/cuda/cuda_2_smem2d_gpu_localstorage_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/cuda_2_smem2d_gpu_localstorage.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [32, 8, 1]
KDIMS: [32, 8] BRANGE: 0:32, 0:8
bj
EXPR: (threadIdx.x / (1)) __DAPT0
EXPR: (threadIdx.x / (1))
bi
EXPR: (threadIdx.y / (1)) __DAPT1
EXPR: (threadIdx.y / (1))
NS []
FNS []
[31m[1m_____________________________ test_gpu_2shared_for _____________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for'
program_name = 'cuda_2_shared_for', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a26dd06b00>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg...: *** [CMakeFiles/Makefile2:85: CMakeFiles/cuda_2_shared_for.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_gpu_2shared_for[39;49;00m():[90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92maddtwoandmult[39;49;00m(A: dace.float64[H, W], B: dace.float64[H, W], Vout: dace.float64[H, W]):[90m[39;49;00m
            [94mfor[39;49;00m i, j [95min[39;49;00m dace.map[[94m0[39;49;00m:H:[94m8[39;49;00m, [94m0[39;49;00m:W:[94m32[39;49;00m]:[90m[39;49;00m
                [94mfor[39;49;00m _ [95min[39;49;00m [96mrange[39;49;00m([94m1[39;49;00m):[90m[39;49;00m
                    local_a = dace.ndarray([[94m8[39;49;00m, [94m32[39;49;00m], dtype=dace.float64, storage=dace.StorageType.GPU_Shared)[90m[39;49;00m
                    local_b = dace.ndarray([[94m8[39;49;00m, [94m32[39;49;00m], dtype=dace.float64, storage=dace.StorageType.GPU_Shared)[90m[39;49;00m
                    local_a << A[i:i + [94m8[39;49;00m, j:j + [94m32[39;49;00m][90m[39;49;00m
                    local_b << B[i:i + [94m8[39;49;00m, j:j + [94m32[39;49;00m][90m[39;49;00m
                    [94mfor[39;49;00m bi, bj [95min[39;49;00m dace.map[[94m0[39;49;00m:[94m8[39;49;00m, [94m0[39;49;00m:[94m32[39;49;00m]:[90m[39;49;00m
                        [94mwith[39;49;00m dace.tasklet:[90m[39;49;00m
                            a << local_a[bi, bj][90m[39;49;00m
                            b << local_b[bi, bj][90m[39;49;00m
                            out = (a + b) * [94m2.0[39;49;00m[90m[39;49;00m
                            out >> Vout[i + bi, j + bj][90m[39;49;00m
    [90m[39;49;00m
        sdfg = addtwoandmult.to_sdfg()[90m[39;49;00m
        sdfg.name = [33m"[39;49;00m[33mcuda_2_shared_for[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        state = sdfg.nodes()[[94m0[39;49;00m][90m[39;49;00m
        map_entry = -[94m1[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m node [95min[39;49;00m state.nodes():[90m[39;49;00m
            [94mif[39;49;00m [96misinstance[39;49;00m(node, nodes.MapEntry) [95mand[39;49;00m [33m'[39;49;00m[33mi[39;49;00m[33m'[39;49;00m [95min[39;49;00m node.map.params:[90m[39;49;00m
                map_entry = state.node_id(node)[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
        transformation = GPUTransformMap()[90m[39;49;00m
        transformation.setup_match(sdfg, [94m0[39;49;00m, [94m0[39;49;00m, {GPUTransformMap.map_entry: map_entry}, [94m0[39;49;00m)[90m[39;49;00m
        transformation.apply(state, sdfg)[90m[39;49;00m
    [90m[39;49;00m
        A = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        B = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        out = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        refout = (A + B) * [94m2[39;49;00m[90m[39;49;00m
>       sdfg(A, B, out, H=[94m128[39;49;00m, W=[94m64[39;49;00m)[90m[39;49;00m

[1m[31mcuda_smem2d_test.py[0m:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for'
program_name = 'cuda_2_shared_for', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CUDA object CMakeFiles/cuda_2_shared_for.dir/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(57): error: expected a declaration[0m
[1m[31mE                 }[0m
[1m[31mE                 ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(84): warning #12-D: parsing restarts here after previous syntax error[0m
[1m[31mE                     __state->gpu_context = new dace::cuda::Context(3, 1);[0m
[1m[31mE                                                                         ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(87): error: expected a declaration[0m
[1m[31mE                     for(int i = 0; i < 3; ++i) {[0m
[1m[31mE                     ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(97): warning #12-D: parsing restarts here after previous syntax error[0m
[1m[31mE                     return 0;[0m
[1m[31mE                             ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(98): error: expected a declaration[0m
[1m[31mE                 }[0m
[1m[31mE                 ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(147): warning #12-D: parsing restarts here after previous syntax error[0m
[1m[31mE                 extern "C" void __dace_runkernel_tests_cuda_smem2d_test_addtwoandmult_95_0_0_0(cuda_2_shared_for_state_t *__state, const double * __restrict__ gpu_A, const double * __restrict__ gpu_B, double * __restrict__ gpu_Vout, int H, int W);[0m
[1m[31mE                                                                                                                                                                                                                                                       ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu(157): error: identifier "tests_cuda_smem2d_test_addtwoandmult_95_0_0_0" is undefined[0m
[1m[31mE                     gpuError_t __err = cudaLaunchKernel((void*)tests_cuda_smem2d_test_addtwoandmult_95_0_0_0, dim3(int_ceil(W, 32), int_ceil(H, 8), 1), dim3(32, 8, 1), tests_cuda_smem2d_test_addtwoandmult_95_0_0_0_args, 0, __state->gpu_context->streams[0]);[0m
[1m[31mE                                                                ^[0m
[1m[31mE               [0m
[1m[31mE               4 errors detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/cuda_2_shared_for.dir/build.make:91: CMakeFiles/cuda_2_shared_for.dir/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_for/src/cuda/cuda_2_shared_for_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/cuda_2_shared_for.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [32, 8, 1]
KDIMS: [32, 8] BRANGE: 0:32, 0:8
bj
EXPR: (threadIdx.x / (1)) __DAPT0
EXPR: (threadIdx.x / (1))
bi
EXPR: (threadIdx.y / (1)) __DAPT1
EXPR: (threadIdx.y / (1))
NS []
FNS []
[31m[1m_____________________________ test_gpu_2shared_map _____________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map'
program_name = 'cuda_2_shared_map', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a2641a5480>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg...: *** [CMakeFiles/Makefile2:85: CMakeFiles/cuda_2_shared_map.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_gpu_2shared_map[39;49;00m():[90m[39;49;00m
        K = dace.symbol([33m'[39;49;00m[33mK[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92maddtwoandmult[39;49;00m(A: dace.float64[H, W], B: dace.float64[H, W], Vout: dace.float64[H, W]):[90m[39;49;00m
            [94mfor[39;49;00m i, j [95min[39;49;00m dace.map[[94m0[39;49;00m:H:[94m8[39;49;00m, [94m0[39;49;00m:W:[94m32[39;49;00m]:[90m[39;49;00m
                [94mfor[39;49;00m _ [95min[39;49;00m dace.map[[94m0[39;49;00m:K]:[90m[39;49;00m
                    local_a = dace.ndarray([[94m8[39;49;00m, [94m32[39;49;00m], dtype=dace.float64, storage=dace.StorageType.GPU_Shared)[90m[39;49;00m
                    local_b = dace.ndarray([[94m8[39;49;00m, [94m32[39;49;00m], dtype=dace.float64, storage=dace.StorageType.GPU_Shared)[90m[39;49;00m
                    local_a << A[i:i + [94m8[39;49;00m, j:j + [94m32[39;49;00m][90m[39;49;00m
                    local_b << B[i:i + [94m8[39;49;00m, j:j + [94m32[39;49;00m][90m[39;49;00m
                    [94mfor[39;49;00m bi, bj [95min[39;49;00m dace.map[[94m0[39;49;00m:[94m8[39;49;00m, [94m0[39;49;00m:[94m32[39;49;00m]:[90m[39;49;00m
                        [94mwith[39;49;00m dace.tasklet:[90m[39;49;00m
                            a << local_a[bi, bj][90m[39;49;00m
                            b << local_b[bi, bj][90m[39;49;00m
                            out = (a + b) * [94m2.0[39;49;00m[90m[39;49;00m
                            out >> Vout[i + bi, j + bj][90m[39;49;00m
    [90m[39;49;00m
        sdfg = addtwoandmult.to_sdfg()[90m[39;49;00m
        sdfg.name = [33m"[39;49;00m[33mcuda_2_shared_map[39;49;00m[33m"[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        me = _find_map_by_param(sdfg, [33m'[39;49;00m[33m_[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        me.schedule = dace.ScheduleType.Sequential[90m[39;49;00m
        sdfg.apply_gpu_transformations()[90m[39;49;00m
        me = _find_map_by_param(sdfg, [33m'[39;49;00m[33mbi[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        me.schedule = dace.ScheduleType.GPU_ThreadBlock[90m[39;49;00m
    [90m[39;49;00m
        A = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        B = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        out = np.random.rand([94m128[39;49;00m, [94m64[39;49;00m)[90m[39;49;00m
        refout = (A + B) * [94m2[39;49;00m[90m[39;49;00m
>       sdfg(A, B, out, H=[94m128[39;49;00m, W=[94m64[39;49;00m, K=[94m1[39;49;00m)[90m[39;49;00m

[1m[31mcuda_smem2d_test.py[0m:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map'
program_name = 'cuda_2_shared_map', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CUDA object CMakeFiles/cuda_2_shared_map.dir/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map/src/cuda/cuda_2_shared_map_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map/src/cuda/cuda_2_shared_map_cuda.cu(132): error: expected a declaration[0m
[1m[31mE                 }[0m
[1m[31mE                 ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map/src/cuda/cuda_2_shared_map_cuda.cu(136): warning #12-D: parsing restarts here after previous syntax error[0m
[1m[31mE                 extern "C" void __dace_runkernel_tests_cuda_smem2d_test_addtwoandmult_139_0_0_0(cuda_2_shared_map_state_t *__state, const double * __restrict__ gpu_A, const double * __restrict__ gpu_B, double * __restrict__ gpu_Vout, int H, int K, int W);[0m
[1m[31mE                                                                                                                                                                                                                                                               ^[0m
[1m[31mE               [0m
[1m[31mE               1 error detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map/src/cuda/cuda_2_shared_map_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/cuda_2_shared_map.dir/build.make:91: CMakeFiles/cuda_2_shared_map.dir/home/primrose/Work/dace/tests/.dacecache/cuda_2_shared_map/src/cuda/cuda_2_shared_map_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/cuda_2_shared_map.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [32, 8, 1]
KDIMS: [32, 8] BRANGE: 0:32, 0:8
bj
EXPR: (threadIdx.x / (1)) __DAPT0
EXPR: (threadIdx.x / (1))
bi
EXPR: (threadIdx.y / (1)) __DAPT1
EXPR: (threadIdx.y / (1))
NS []
FNS []
[31m[1m_______________________________ test_dynamic_map _______________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv'
program_name = 'tests_dynamic_tb_map_cudatest_spmv', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a257517280>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg.../Makefile2:85: CMakeFiles/tests_dynamic_tb_map_cudatest_spmv.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_dynamic_map[39;49;00m():[90m[39;49;00m
        height = [94m1024[39;49;00m[90m[39;49;00m
        width = [94m1024[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare spmv SDFG for GPU[39;49;00m[90m[39;49;00m
        sdfg = spmv.to_sdfg()[90m[39;49;00m
        sdfg.apply_gpu_transformations()[90m[39;49;00m
    [90m[39;49;00m
        [94mfor[39;49;00m node [95min[39;49;00m sdfg.all_nodes_recursive():[90m[39;49;00m
            [94mif[39;49;00m [96misinstance[39;49;00m(node[[94m0[39;49;00m], dace.sdfg.nodes.MapEntry) \
                    [95mand[39;49;00m node[[94m0[39;49;00m].schedule == dace.dtypes.ScheduleType.Sequential:[90m[39;49;00m
                node[[94m0[39;49;00m].schedule = dace.dtypes.ScheduleType.GPU_ThreadBlock_Dynamic[90m[39;49;00m
    [90m[39;49;00m
        [90m# Fill input data[39;49;00m[90m[39;49;00m
        [90m# each row has up (including) 256 elements[39;49;00m[90m[39;49;00m
        A_row = np.random.randint([94m257[39;49;00m, size=height + [94m1[39;49;00m, dtype=dace.uint32.type)[90m[39;49;00m
        A_row[[94m0[39;49;00m] = [94m0[39;49;00m[90m[39;49;00m
        A_row = np.cumsum(A_row, dtype=dace.uint32.type)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Column data[39;49;00m[90m[39;49;00m
        A_col = dace.ndarray([A_row[height]], dtype=dace.uint32)[90m[39;49;00m
        [94mfor[39;49;00m i [95min[39;49;00m [96mrange[39;49;00m(height):[90m[39;49;00m
            A_col[A_row[i]:A_row[i + [94m1[39;49;00m]] = np.sort(np.random.choice(width, A_row[i + [94m1[39;49;00m] - A_row[i], replace=[94mFalse[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# values[39;49;00m[90m[39;49;00m
        A_val = np.random.rand(A_row[height]).astype(dace.float32.type)[90m[39;49;00m
    [90m[39;49;00m
        A_sparse = scipy.sparse.csr_matrix((A_val, A_col, A_row), dtype=dace.float32.type, shape=([94m1024[39;49;00m, [94m1024[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        x = np.random.rand(width).astype(dace.float32.type)[90m[39;49;00m
        b = np.zeros(height, dtype=dace.float32.type)[90m[39;49;00m
    [90m[39;49;00m
>       sdfg(A_row=A_row, A_col=A_col, A_val=A_val, x=x, b=b, H=A_sparse.shape[[94m0[39;49;00m], W=A_sparse.shape[[94m1[39;49;00m], nnz=A_sparse.nnz)[90m[39;49;00m

[1m[31mdynamic_tb_map_cudatest.py[0m:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv'
program_name = 'tests_dynamic_tb_map_cudatest_spmv', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CXX object CMakeFiles/tests_dynamic_tb_map_cudatest_spmv.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cpu/tests_dynamic_tb_map_cudatest_spmv.cpp.o[0m
[1m[31mE               In file included from /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cpu/tests_dynamic_tb_map_cudatest_spmv.cpp:2:[0m
[1m[31mE               In file included from /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/dace.h:22:[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:341:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 341 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:362:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 362 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:387:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 387 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:407:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 407 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               4 warnings generated.[0m
[1m[31mE               [ 33%] Building CUDA object CMakeFiles/tests_dynamic_tb_map_cudatest_spmv.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cuda/tests_dynamic_tb_map_cudatest_spmv_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cuda/tests_dynamic_tb_map_cudatest_spmv_cuda.cu(133): error: expected an expression[0m
[1m[31mE                         }/t10[0m
[1m[31mE                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cuda/tests_dynamic_tb_map_cudatest_spmv_cuda.cu(134): error: expected a ";"[0m
[1m[31mE                     }[0m
[1m[31mE                     ^[0m
[1m[31mE               [0m
[1m[31mE               2 errors detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cuda/tests_dynamic_tb_map_cudatest_spmv_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/tests_dynamic_tb_map_cudatest_spmv.dir/build.make:91: CMakeFiles/tests_dynamic_tb_map_cudatest_spmv.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_spmv/src/cuda/tests_dynamic_tb_map_cudatest_spmv_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/tests_dynamic_tb_map_cudatest_spmv.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [128, 1, 1]
WARNING: Shadowing variable __compute_b0 from type (<DefinedType.Scalar: 2>, 'unsigned int') to DefinedType.Scalar
WARNING: Shadowing variable __compute_e1 from type (<DefinedType.Scalar: 2>, 'unsigned int') to DefinedType.Scalar
NS []
FNS []
[31m[1m___________________________ test_nested_dynamic_map ____________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm'
program_name = 'tests_dynamic_tb_map_cudatest_sddmm', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a257517280>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg...Makefile2:85: CMakeFiles/tests_dynamic_tb_map_cudatest_sddmm.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_nested_dynamic_map[39;49;00m():[90m[39;49;00m
    [90m    [39;49;00m[33m""" Tests the case where the dynamic map inputs are defined in an outer scope. """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        M = dace.symbol([33m'[39;49;00m[33mM[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        N = dace.symbol([33m'[39;49;00m[33mN[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        K = dace.symbol([33m'[39;49;00m[33mK[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        nnz_A = dace.symbol([33m'[39;49;00m[33mnnz_A[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        nnz_D = dace.symbol([33m'[39;49;00m[33mnnz_D[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92msddmm[39;49;00m(D_vals: dace.float32[nnz_D], A2_crd: dace.int32[nnz_A], A2_pos: dace.int32[M + [94m1[39;49;00m],[90m[39;49;00m
                  A_vals: dace.float32[nnz_A], B: dace.float32[M, K], C: dace.float32[K, N]):[90m[39;49;00m
            [94mfor[39;49;00m i [95min[39;49;00m dace.map[[94m0[39;49;00m:M]:[90m[39;49;00m
                [94mfor[39;49;00m j [95min[39;49;00m dace.map[A2_pos[i]:A2_pos[i + [94m1[39;49;00m]]:[90m[39;49;00m
                    [94mfor[39;49;00m k [95min[39;49;00m dace.map[[94m0[39;49;00m:K]:[90m[39;49;00m
                        D_vals[j] += A_vals[j] * B[i, k] * C[k, A2_crd[j]][90m[39;49;00m
    [90m[39;49;00m
        sdfg = sddmm.to_sdfg(simplify=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        ime, jme, kme = [94mNone[39;49;00m, [94mNone[39;49;00m, [94mNone[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m state [95min[39;49;00m sdfg.states():[90m[39;49;00m
            [94mfor[39;49;00m node [95min[39;49;00m state.nodes():[90m[39;49;00m
                [94mif[39;49;00m [96misinstance[39;49;00m(node, dace.sdfg.nodes.MapEntry):[90m[39;49;00m
                    [94mif[39;49;00m node.map.params[[94m0[39;49;00m] == [33m'[39;49;00m[33mi[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        ime = node[90m[39;49;00m
                    [94melif[39;49;00m node.map.params[[94m0[39;49;00m] == [33m'[39;49;00m[33mj[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        jme = node[90m[39;49;00m
                    [94melif[39;49;00m node.map.params[[94m0[39;49;00m] == [33m'[39;49;00m[33mk[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        kme = node[90m[39;49;00m
        [94massert[39;49;00m ime [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m [95mand[39;49;00m jme [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m [95mand[39;49;00m kme [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mtransformation[39;49;00m[04m[96m.[39;49;00m[04m[96mdataflow[39;49;00m [94mimport[39;49;00m MapInterchange, TrivialTaskletElimination[90m[39;49;00m
        MapInterchange.apply_to(sdfg, outer_map_entry=jme, inner_map_entry=kme)[90m[39;49;00m
        sdfg.apply_transformations_repeated(TrivialTaskletElimination)[90m[39;49;00m
    [90m[39;49;00m
        sdfg.apply_gpu_transformations()[90m[39;49;00m
        ime.map.schedule = dace.ScheduleType.GPU_Device[90m[39;49;00m
        kme.map.schedule = dace.ScheduleType.GPU_ThreadBlock_Dynamic[90m[39;49;00m
    [90m[39;49;00m
        dtype = np.float32[90m[39;49;00m
        rng = np.random.default_rng([94m42[39;49;00m)[90m[39;49;00m
        problem_size = [94m1024[39;49;00m[90m[39;49;00m
        density = [94m0.01[39;49;00m[90m[39;49;00m
        B = rng.random((problem_size, problem_size), dtype=dtype)[90m[39;49;00m
        C = rng.random((problem_size, problem_size), dtype=dtype)[90m[39;49;00m
        A = scipy.sparse.random(problem_size, problem_size, density=density, [96mformat[39;49;00m=[33m'[39;49;00m[33mcsr[39;49;00m[33m'[39;49;00m, dtype=dtype, random_state=rng)[90m[39;49;00m
        val = np.zeros_like(A.data)[90m[39;49;00m
        ref = np.empty_like(A.data)[90m[39;49;00m
    [90m[39;49;00m
>       sdfg(D_vals=val,[90m[39;49;00m
             A2_crd=A.indices.copy(),[90m[39;49;00m
             A2_pos=A.indptr.copy(),[90m[39;49;00m
             A_vals=A.data.copy(),[90m[39;49;00m
             B=B,[90m[39;49;00m
             C=C,[90m[39;49;00m
             M=problem_size,[90m[39;49;00m
             N=problem_size,[90m[39;49;00m
             K=problem_size,[90m[39;49;00m
             nnz_A=A.nnz,[90m[39;49;00m
             nnz_D=A.nnz)[90m[39;49;00m

[1m[31mdynamic_tb_map_cudatest.py[0m:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm'
program_name = 'tests_dynamic_tb_map_cudatest_sddmm', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CXX object CMakeFiles/tests_dynamic_tb_map_cudatest_sddmm.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cpu/tests_dynamic_tb_map_cudatest_sddmm.cpp.o[0m
[1m[31mE               In file included from /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cpu/tests_dynamic_tb_map_cudatest_sddmm.cpp:2:[0m
[1m[31mE               In file included from /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/dace.h:22:[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:341:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 341 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:362:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 362 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:387:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 387 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:407:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 407 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               4 warnings generated.[0m
[1m[31mE               [ 33%] Building CUDA object CMakeFiles/tests_dynamic_tb_map_cudatest_sddmm.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cuda/tests_dynamic_tb_map_cudatest_sddmm_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cuda/tests_dynamic_tb_map_cudatest_sddmm_cuda.cu(164): error: expected an expression[0m
[1m[31mE                         }/t10[0m
[1m[31mE                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cuda/tests_dynamic_tb_map_cudatest_sddmm_cuda.cu(165): error: expected a ";"[0m
[1m[31mE                     }[0m
[1m[31mE                     ^[0m
[1m[31mE               [0m
[1m[31mE               2 errors detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cuda/tests_dynamic_tb_map_cudatest_sddmm_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/tests_dynamic_tb_map_cudatest_sddmm.dir/build.make:91: CMakeFiles/tests_dynamic_tb_map_cudatest_sddmm.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddmm/src/cuda/tests_dynamic_tb_map_cudatest_sddmm_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/tests_dynamic_tb_map_cudatest_sddmm.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [128, 1, 1]
WARNING: Shadowing variable __map_169_b0 from type (<DefinedType.Scalar: 2>, 'int') to DefinedType.Scalar
WARNING: Shadowing variable __map_169_e1 from type (<DefinedType.Scalar: 2>, 'int') to DefinedType.Scalar
NS []
FNS []
[31m[1m__________________________ test_dynamic_map_with_step __________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm'
program_name = 'tests_dynamic_tb_map_cudatest_sddvm', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a2641a7f40>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg...Makefile2:85: CMakeFiles/tests_dynamic_tb_map_cudatest_sddvm.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_dynamic_map_with_step[39;49;00m():[90m[39;49;00m
    [90m[39;49;00m
        M = dace.symbol([33m'[39;49;00m[33mM[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        N = dace.symbol([33m'[39;49;00m[33mN[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        nnz_A = dace.symbol([33m'[39;49;00m[33mnnz_A[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        nnz_D = dace.symbol([33m'[39;49;00m[33mnnz_D[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92msddvm[39;49;00m(D_vals: dace.float32[nnz_D], A2_crd: dace.int32[nnz_A], A2_pos: dace.int32[M + [94m1[39;49;00m],[90m[39;49;00m
                  A_vals: dace.float32[nnz_A], B: dace.float32[M], C: dace.float32[N]):[90m[39;49;00m
            [94mfor[39;49;00m i [95min[39;49;00m dace.map[[94m0[39;49;00m:M]:[90m[39;49;00m
                [94mfor[39;49;00m j [95min[39;49;00m dace.map[A2_pos[i]:A2_pos[i + [94m1[39;49;00m]]:[90m[39;49;00m
                    D_vals[j] += A_vals[j] * B[i] * C[A2_crd[j]][90m[39;49;00m
    [90m[39;49;00m
        sdfg = sddvm.to_sdfg(simplify=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        ime, jme = [94mNone[39;49;00m, [94mNone[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m state [95min[39;49;00m sdfg.states():[90m[39;49;00m
            [94mfor[39;49;00m node [95min[39;49;00m state.nodes():[90m[39;49;00m
                [94mif[39;49;00m [96misinstance[39;49;00m(node, dace.sdfg.nodes.MapEntry):[90m[39;49;00m
                    [94mif[39;49;00m node.map.params[[94m0[39;49;00m] == [33m'[39;49;00m[33mi[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        ime = node[90m[39;49;00m
                    [94melif[39;49;00m node.map.params[[94m0[39;49;00m] == [33m'[39;49;00m[33mj[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        jme = node[90m[39;49;00m
        [94massert[39;49;00m ime [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m [95mand[39;49;00m jme [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mtransformation[39;49;00m[04m[96m.[39;49;00m[04m[96mdataflow[39;49;00m [94mimport[39;49;00m StripMining, TrivialTaskletElimination[90m[39;49;00m
        sdfg.apply_transformations_repeated(TrivialTaskletElimination)[90m[39;49;00m
        StripMining.apply_to(sdfg, map_entry=jme)[90m[39;49;00m
    [90m[39;49;00m
        tile_jme = [94mNone[39;49;00m, [94mNone[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m state [95min[39;49;00m sdfg.states():[90m[39;49;00m
            [94mfor[39;49;00m node [95min[39;49;00m state.nodes():[90m[39;49;00m
                [94mif[39;49;00m [96misinstance[39;49;00m(node, dace.sdfg.nodes.MapEntry):[90m[39;49;00m
                    [94mif[39;49;00m node.map.params[[94m0[39;49;00m] == [33m'[39;49;00m[33mtile_j[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        tile_jme = node[90m[39;49;00m
        [94massert[39;49;00m tile_jme [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        sdfg.apply_gpu_transformations()[90m[39;49;00m
        ime.map.schedule = dace.ScheduleType.GPU_Device[90m[39;49;00m
        tile_jme.map.schedule = dace.ScheduleType.GPU_ThreadBlock_Dynamic[90m[39;49;00m
    [90m[39;49;00m
        dtype = np.float32[90m[39;49;00m
        rng = np.random.default_rng([94m42[39;49;00m)[90m[39;49;00m
        problem_size = [94m1024[39;49;00m[90m[39;49;00m
        density = [94m0.01[39;49;00m[90m[39;49;00m
        B = rng.random((problem_size, ), dtype=dtype)[90m[39;49;00m
        C = rng.random((problem_size, ), dtype=dtype)[90m[39;49;00m
        A = scipy.sparse.random(problem_size, problem_size, density=density, [96mformat[39;49;00m=[33m'[39;49;00m[33mcsr[39;49;00m[33m'[39;49;00m, dtype=dtype, random_state=rng)[90m[39;49;00m
        val = np.zeros_like(A.data)[90m[39;49;00m
        ref = np.empty_like(A.data)[90m[39;49;00m
    [90m[39;49;00m
>       sdfg(D_vals=val,[90m[39;49;00m
             A2_crd=A.indices.copy(),[90m[39;49;00m
             A2_pos=A.indptr.copy(),[90m[39;49;00m
             A_vals=A.data.copy(),[90m[39;49;00m
             B=B,[90m[39;49;00m
             C=C,[90m[39;49;00m
             M=problem_size,[90m[39;49;00m
             N=problem_size,[90m[39;49;00m
             nnz_A=A.nnz,[90m[39;49;00m
             nnz_D=A.nnz)[90m[39;49;00m

[1m[31mdynamic_tb_map_cudatest.py[0m:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm'
program_name = 'tests_dynamic_tb_map_cudatest_sddvm', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CXX object CMakeFiles/tests_dynamic_tb_map_cudatest_sddvm.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cpu/tests_dynamic_tb_map_cudatest_sddvm.cpp.o[0m
[1m[31mE               In file included from /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cpu/tests_dynamic_tb_map_cudatest_sddvm.cpp:2:[0m
[1m[31mE               In file included from /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/dace.h:22:[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:341:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 341 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:362:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 362 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:387:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 387 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:407:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 407 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               4 warnings generated.[0m
[1m[31mE               [ 33%] Building CUDA object CMakeFiles/tests_dynamic_tb_map_cudatest_sddvm.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cuda/tests_dynamic_tb_map_cudatest_sddvm_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cuda/tests_dynamic_tb_map_cudatest_sddvm_cuda.cu(165): error: expected an expression[0m
[1m[31mE                         }/t10[0m
[1m[31mE                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cuda/tests_dynamic_tb_map_cudatest_sddvm_cuda.cu(166): error: expected a ";"[0m
[1m[31mE                     }[0m
[1m[31mE                     ^[0m
[1m[31mE               [0m
[1m[31mE               2 errors detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cuda/tests_dynamic_tb_map_cudatest_sddvm_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/tests_dynamic_tb_map_cudatest_sddvm.dir/build.make:91: CMakeFiles/tests_dynamic_tb_map_cudatest_sddvm.dir/home/primrose/Work/dace/tests/.dacecache/tests_dynamic_tb_map_cudatest_sddvm/src/cuda/tests_dynamic_tb_map_cudatest_sddvm_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/tests_dynamic_tb_map_cudatest_sddvm.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [128, 1, 1]
WARNING: Shadowing variable __map_236_b0 from type (<DefinedType.Scalar: 2>, 'int') to DefinedType.Scalar
WARNING: Shadowing variable __map_236_e1 from type (<DefinedType.Scalar: 2>, 'int') to DefinedType.Scalar
NS []
FNS []
[31m[1m__________________________ test_mlir_tasklet_explicit __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_explicit[39;49;00m():[90m[39;49;00m
        sdfg = dace.SDFG([33m'[39;49;00m[33mmlir_tasklet_explicit[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        state = sdfg.add_state()[90m[39;49;00m
        sdfg.add_array([33m'[39;49;00m[33mA[39;49;00m[33m'[39;49;00m, [[94m1[39;49;00m], dtype=dace.int32)[90m[39;49;00m
        sdfg.add_array([33m'[39;49;00m[33mB[39;49;00m[33m'[39;49;00m, [[94m1[39;49;00m], dtype=dace.int32)[90m[39;49;00m
        sdfg.add_array([33m'[39;49;00m[33mC[39;49;00m[33m'[39;49;00m, [[94m1[39;49;00m], dtype=dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        tasklet = state.add_tasklet(name=[33m'[39;49;00m[33mmlir_tasklet[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                                    inputs={[33m'[39;49;00m[33ma[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mb[39;49;00m[33m'[39;49;00m},[90m[39;49;00m
                                    outputs={[33m'[39;49;00m[33mc[39;49;00m[33m'[39;49;00m},[90m[39;49;00m
                                    code=[33m'''[39;49;00m[33m[39;49;00m
    [33m                                    module  [39;49;00m[33m{[39;49;00m[33m[39;49;00m
    [33m                                        func @mlir_entry([39;49;00m[33m%a[39;49;00m[33m: i32, [39;49;00m[33m%[39;49;00m[33mb: i32) -> i32 [39;49;00m[33m{[39;49;00m[33m[39;49;00m
    [33m                                            [39;49;00m[33m%[39;49;00m[33m0 = addi [39;49;00m[33m%[39;49;00m[33mb, [39;49;00m[33m%a[39;49;00m[33m  : i32[39;49;00m[33m[39;49;00m
    [33m                                            return [39;49;00m[33m%[39;49;00m[33m0 : i32[39;49;00m[33m[39;49;00m
    [33m                                        }[39;49;00m[33m[39;49;00m
    [33m                                    }[39;49;00m[33m[39;49;00m
    [33m                                    [39;49;00m[33m'''[39;49;00m,[90m[39;49;00m
                                    language=dace.Language.MLIR)[90m[39;49;00m
    [90m[39;49;00m
        A = state.add_read([33m'[39;49;00m[33mA[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        B = state.add_read([33m'[39;49;00m[33mB[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        C = state.add_write([33m'[39;49;00m[33mC[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        state.add_edge(A, [94mNone[39;49;00m, tasklet, [33m'[39;49;00m[33ma[39;49;00m[33m'[39;49;00m, dace.Memlet([33m'[39;49;00m[33mA[0][39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        state.add_edge(B, [94mNone[39;49;00m, tasklet, [33m'[39;49;00m[33mb[39;49;00m[33m'[39;49;00m, dace.Memlet([33m'[39;49;00m[33mB[0][39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        state.add_edge(tasklet, [33m'[39;49;00m[33mc[39;49;00m[33m'[39;49;00m, C, [94mNone[39;49;00m, dace.Memlet([33m'[39;49;00m[33mC[0][39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        sdfg.validate()[90m[39;49;00m
    [90m[39;49;00m
        a = np.random.randint([94m0[39;49;00m, [94m100[39;49;00m, [94m1[39;49;00m).astype(np.int32)[90m[39;49;00m
        b = np.random.randint([94m0[39;49;00m, [94m100[39;49;00m, [94m1[39;49;00m).astype(np.int32)[90m[39;49;00m
        c = np.random.randint([94m0[39;49;00m, [94m100[39;49;00m, [94m1[39;49;00m).astype(np.int32)[90m[39;49;00m
    [90m[39;49;00m
>       sdfg(A=a, B=b, C=c)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m________________________ test_mlir_tasklet_explicit_vec ________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_explicit_vec[39;49;00m():[90m[39;49;00m
        sdfg = dace.SDFG([33m'[39;49;00m[33mmlir_tasklet_explicit_vec[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        state = sdfg.add_state()[90m[39;49;00m
        sdfg.add_array([33m'[39;49;00m[33mA[39;49;00m[33m'[39;49;00m, [[94m4[39;49;00m], dace.vector(dace.int32, [94m4[39;49;00m))[90m[39;49;00m
        sdfg.add_array([33m'[39;49;00m[33mB[39;49;00m[33m'[39;49;00m, [[94m4[39;49;00m], dace.vector(dace.int32, [94m4[39;49;00m))[90m[39;49;00m
        sdfg.add_array([33m'[39;49;00m[33mC[39;49;00m[33m'[39;49;00m, [[94m4[39;49;00m], dace.vector(dace.int32, [94m4[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        tasklet = state.add_tasklet(name=[33m'[39;49;00m[33mmlir_tasklet[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                                    inputs={[33m'[39;49;00m[33ma[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mb[39;49;00m[33m'[39;49;00m},[90m[39;49;00m
                                    outputs={[33m'[39;49;00m[33mc[39;49;00m[33m'[39;49;00m},[90m[39;49;00m
                                    code=[33m'''[39;49;00m[33m[39;49;00m
    [33m                                    module  [39;49;00m[33m{[39;49;00m[33m[39;49;00m
    [33m                                        func @mlir_entry([39;49;00m[33m%a[39;49;00m[33m: vector<4xi32>, [39;49;00m[33m%[39;49;00m[33mb: vector<4xi32>) -> vector<4xi32> [39;49;00m[33m{[39;49;00m[33m[39;49;00m
    [33m                                            [39;49;00m[33m%[39;49;00m[33m0 = addi [39;49;00m[33m%[39;49;00m[33mb, [39;49;00m[33m%a[39;49;00m[33m  : vector<4xi32>[39;49;00m[33m[39;49;00m
    [33m                                            return [39;49;00m[33m%[39;49;00m[33m0 : vector<4xi32>[39;49;00m[33m[39;49;00m
    [33m                                        }[39;49;00m[33m[39;49;00m
    [33m                                    }[39;49;00m[33m[39;49;00m
    [33m                                    [39;49;00m[33m'''[39;49;00m,[90m[39;49;00m
                                    language=dace.Language.MLIR)[90m[39;49;00m
    [90m[39;49;00m
        A = state.add_read([33m'[39;49;00m[33mA[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        B = state.add_read([33m'[39;49;00m[33mB[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        C = state.add_write([33m'[39;49;00m[33mC[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        state.add_edge(A, [94mNone[39;49;00m, tasklet, [33m'[39;49;00m[33ma[39;49;00m[33m'[39;49;00m, dace.Memlet([33m'[39;49;00m[33mA[0][39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        state.add_edge(B, [94mNone[39;49;00m, tasklet, [33m'[39;49;00m[33mb[39;49;00m[33m'[39;49;00m, dace.Memlet([33m'[39;49;00m[33mB[0][39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        state.add_edge(tasklet, [33m'[39;49;00m[33mc[39;49;00m[33m'[39;49;00m, C, [94mNone[39;49;00m, dace.Memlet([33m'[39;49;00m[33mC[0][39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        sdfg.validate()[90m[39;49;00m
    [90m[39;49;00m
        a = np.random.rand([94m4[39;49;00m).astype(np.int32)[90m[39;49;00m
        b = np.random.rand([94m4[39;49;00m).astype(np.int32)[90m[39;49;00m
        c = np.random.rand([94m4[39;49;00m).astype(np.int32)[90m[39;49;00m
    [90m[39;49;00m
>       sdfg(A=a, B=b, C=c)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m__________________________ test_mlir_tasklet_implicit __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_implicit[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
        C[:] = [94m15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_implicit(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m_________________________ test_mlir_tasklet_inference __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_inference[39;49;00m():[90m[39;49;00m
        sdfg = dace.SDFG([33m'[39;49;00m[33mmlir_tasklet_explicit_vec[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        state = sdfg.add_state()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Test Vectors[39;49;00m[90m[39;49;00m
        tasklet = state.add_tasklet(name=[33m'[39;49;00m[33mmlir_tasklet[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                                    inputs={[33m'[39;49;00m[33ma[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mb[39;49;00m[33m'[39;49;00m},[90m[39;49;00m
                                    outputs={[33m'[39;49;00m[33mc[39;49;00m[33m'[39;49;00m},[90m[39;49;00m
                                    code=[33m'''[39;49;00m[33m[39;49;00m
    [33m                                    module  [39;49;00m[33m{[39;49;00m[33m[39;49;00m
    [33m                                        func @mlir_entry([39;49;00m[33m%a[39;49;00m[33m: vector<4xi32>, [39;49;00m[33m%[39;49;00m[33mb: vector<4xi32>) -> vector<4xi32> [39;49;00m[33m{[39;49;00m[33m[39;49;00m
    [33m                                            [39;49;00m[33m%[39;49;00m[33m0 = addi [39;49;00m[33m%[39;49;00m[33mb, [39;49;00m[33m%a[39;49;00m[33m  : vector<4xi32>[39;49;00m[33m[39;49;00m
    [33m                                            return [39;49;00m[33m%[39;49;00m[33m0 : vector<4xi32>[39;49;00m[33m[39;49;00m
    [33m                                        }[39;49;00m[33m[39;49;00m
    [33m                                    }[39;49;00m[33m[39;49;00m
    [33m                                    [39;49;00m[33m'''[39;49;00m,[90m[39;49;00m
                                    language=dace.Language.MLIR)[90m[39;49;00m
>       tasklet.infer_connector_types(sdfg, state)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
[31m[1m__________________________ test_mlir_tasklet_swapped ___________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_swapped[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
        C[:] = [94m15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_swapped(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m__________________________ test_mlir_tasklet_no_entry __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_no_entry[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
        C[:] = [94m15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m pytest.raises([96mSyntaxError[39;49;00m):[90m[39;49;00m
>           mlir_tasklet_no_entry(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:330: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m________________________ test_mlir_tasklet_double_entry ________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_double_entry[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
        C[:] = [94m15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m pytest.raises([96mSyntaxError[39;49;00m):[90m[39;49;00m
>           mlir_tasklet_double_entry(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:369: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m_______________________ test_mlir_tasklet_double_return ________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_double_return[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
        C[:] = [94m15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m pytest.raises([96mSyntaxError[39;49;00m):[90m[39;49;00m
>           mlir_tasklet_double_return(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:418: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m________________________ test_mlir_tasklet_llvm_dialect ________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_llvm_dialect[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
        C[:] = [94m15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_llvm_dialect_opt(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:452: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m___________________________ test_mlir_tasklet_float ____________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_float[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.float32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.float32)[90m[39;49;00m
        C = dace.ndarray(([94m1[39;49;00m, ), dace.float32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m5.5[39;49;00m[90m[39;49;00m
        B[:] = [94m2.2[39;49;00m[90m[39;49;00m
        C[:] = [94m15.15[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_float(A, B, C)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:483: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m_________________________ test_mlir_tasklet_recursion __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_recursion[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m10[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_recursion(A, B)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m_________________________ test_mlir_tasklet_long_name __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_long_name[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
        B = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m10[39;49;00m[90m[39;49;00m
        B[:] = [94m2[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_long_name(A, B)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:555: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m__________________________ test_mlir_tasklet_no_input __________________________[0m

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
>       [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mlir'[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:8: ModuleNotFoundError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.mlir[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_mlir_tasklet_no_input[39;49;00m():[90m[39;49;00m
        A = dace.ndarray(([94m1[39;49;00m, ), dace.int32)[90m[39;49;00m
    [90m[39;49;00m
        A[:] = [94m10[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
>       mlir_tasklet_no_input(A)[90m[39;49;00m

[1m[31mmlir_tasklet_test.py[0m:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m../dace/frontend/python/parser.py[0m:461: in __call__
    [0mbinaryobj = sdfg.compile(validate=[96mself[39;49;00m.validate)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2299: in compile
    [0mprogram_objects = codegen.generate_code(sdfg, validate=validate)[90m[39;49;00m
[1m[31m../dace/codegen/codegen.py[0m:189: in generate_code
    [0minfer_types.infer_connector_types(sdfg)[90m[39;49;00m
[1m[31m../dace/sdfg/infer_types.py[0m:113: in infer_connector_types
    [0mnode.infer_connector_types(sdfg, state)[90m[39;49;00m
[1m[31m../dace/sdfg/nodes.py[0m:448: in infer_connector_types
    [0m[94mfrom[39;49;00m [04m[96mdace[39;49;00m[04m[96m.[39;49;00m[04m[96mcodegen[39;49;00m[04m[96m.[39;49;00m[04m[96mtargets[39;49;00m[04m[96m.[39;49;00m[04m[96mmlir[39;49;00m [94mimport[39;49;00m utils[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    [0m[90m# Copyright 2019-2021 ETH Zurich and the DaCe authors. All rights reserved.[39;49;00m[90m[39;49;00m
    [33m"""[39;49;00m
    [33mHelps extracting the relevant information from MLIR for CodeGen of an MLIR tasklet[39;49;00m
    [33mCan handle MLIR in generic form or in the supported dialect of pyMLIR[39;49;00m
    [33mRequires pyMLIR to run[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
    [94mtry[39;49;00m:[90m[39;49;00m
        [94mimport[39;49;00m [04m[96mmlir[39;49;00m[90m[39;49;00m
    [94mexcept[39;49;00m ([96mModuleNotFoundError[39;49;00m, [96mNameError[39;49;00m, [96mImportError[39;49;00m):[90m[39;49;00m
>       [94mraise[39;49;00m [96mImportError[39;49;00m([33m'[39;49;00m[33mTo use MLIR tasklets, please install the [39;49;00m[33m"[39;49;00m[33mpymlir[39;49;00m[33m"[39;49;00m[33m package.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
[1m[31mE       ImportError: To use MLIR tasklets, please install the "pymlir" package.[0m

[1m[31m../dace/codegen/targets/mlir/utils.py[0m:10: ImportError
----------------------------- Captured stdout call -----------------------------
Failing SDFG saved for inspection in /home/primrose/Work/dace/tests/_dacegraphs/failing.sdfgz
[31m[1m_________________________ test_persistent_dynamic_map __________________________[0m

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv'
program_name = 'tests_persistent_map_cudatest_spmv', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
>           _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m

[1m[31m../dace/codegen/compiler.py[0m:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

command = 'cmake --build . --config RelWithDebInfo', output_stream = None
kwargs = {'cwd': '/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/build', 'shell': True}
process = <Popen: returncode: 2 args: 'cmake --build . --config RelWithDebInfo'>
output = <_io.StringIO object at 0x79a2641a7d00>, line = b''
stdout = b'Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"\n\n/home/primrose/Work/dace/dace/codeg.../Makefile2:85: CMakeFiles/tests_persistent_map_cudatest_spmv.dir/all] Error 2\ngmake: *** [Makefile:91: all] Error 2\n'
stderr = None

    [0m[94mdef[39;49;00m [92m_run_liveoutput[39;49;00m(command, output_stream=[94mNone[39;49;00m, **kwargs):[90m[39;49;00m
        process = subprocess.Popen(command, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, **kwargs)[90m[39;49;00m
        output = six.StringIO()[90m[39;49;00m
        [94mwhile[39;49;00m [94mTrue[39;49;00m:[90m[39;49;00m
            line = process.stdout.readline().rstrip()[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m line:[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
            output.write(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m) + [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m(line.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        stdout, stderr = process.communicate()[90m[39;49;00m
        [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [96mprint[39;49;00m(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
            [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                [96mprint[39;49;00m(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m output_stream [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output_stream.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m), flush=[94mTrue[39;49;00m)[90m[39;49;00m
        output.write(stdout.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
        [94mif[39;49;00m stderr [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            output.write(stderr.decode([33m'[39;49;00m[33mutf-8[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# An error occurred, raise exception[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m process.returncode != [94m0[39;49;00m:[90m[39;49;00m
>           [94mraise[39;49;00m subprocess.CalledProcessError(process.returncode, command, output.getvalue())[90m[39;49;00m
[1m[31mE           subprocess.CalledProcessError: Command 'cmake --build . --config RelWithDebInfo' returned non-zero exit status 2.[0m

[1m[31m../dace/codegen/compiler.py[0m:416: CalledProcessError

[33mDuring handling of the above exception, another exception occurred:[0m

    [0m[37m@pytest[39;49;00m.mark.gpu[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_persistent_dynamic_map[39;49;00m():[90m[39;49;00m
        sdfg = spmv.to_sdfg()[90m[39;49;00m
        sdfg.apply_gpu_transformations()[90m[39;49;00m
    [90m[39;49;00m
        [94mfor[39;49;00m state [95min[39;49;00m sdfg:[90m[39;49;00m
            [94mfor[39;49;00m scope [95min[39;49;00m state.nodes():[90m[39;49;00m
                [94mif[39;49;00m [95mnot[39;49;00m [96misinstance[39;49;00m(scope, nodes.EntryNode):[90m[39;49;00m
                    [94mcontinue[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m state.entry_node(scope) [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                    scope.map.schedule = ScheduleType.GPU_Persistent[90m[39;49;00m
                [94melif[39;49;00m state.entry_node(state.entry_node(scope)) [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
                    scope.map.schedule = ScheduleType.GPU_Device[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    scope.map.schedule = ScheduleType.GPU_ThreadBlock_Dynamic[90m[39;49;00m
    [90m[39;49;00m
>       verify(sdfg)[90m[39;49;00m

[1m[31mpersistent_map_cudatest.py[0m:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mpersistent_map_cudatest.py[0m:89: in verify
    [0msdfg(A_row=A_row, A_col=A_col, A_val=A_val, x=x, b=b, H=A_sparse.shape[[94m0[39;49;00m], W=A_sparse.shape[[94m1[39;49;00m], nnz=A_sparse.nnz)[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2389: in __call__
    [0mbinaryobj = sdfg.compile()[90m[39;49;00m
[1m[31m../dace/sdfg/sdfg.py[0m:2314: in compile
    [0mshared_library = compiler.configure_and_compile(program_folder, sdfg.name)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

program_folder = '/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv'
program_name = 'tests_persistent_map_cudatest_spmv', output_stream = None

    [0m[94mdef[39;49;00m [92mconfigure_and_compile[39;49;00m(program_folder, program_name=[94mNone[39;49;00m, output_stream=[94mNone[39;49;00m):[90m[39;49;00m
    [90m    [39;49;00m[33m""" Configures and compiles a DaCe program in the specified folder into a[39;49;00m
    [33m        shared library file.[39;49;00m
    [33m[39;49;00m
    [33m        :param program_folder: Folder containing all files necessary to build,[39;49;00m
    [33m                               equivalent to what was passed to[39;49;00m
    [33m                               `generate_program_folder`.[39;49;00m
    [33m        :param output_stream: Additional output stream to write to (used for[39;49;00m
    [33m                              other clients such as the vscode extension).[39;49;00m
    [33m        :return: Path to the compiled shared library file.[39;49;00m
    [33m    """[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m program_name [95mis[39;49;00m [94mNone[39;49;00m:[90m[39;49;00m
            program_name = os.path.basename(program_folder)[90m[39;49;00m
        program_folder = os.path.abspath(program_folder)[90m[39;49;00m
        src_folder = os.path.join(program_folder, [33m"[39;49;00m[33msrc[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare build folder[39;49;00m[90m[39;49;00m
        build_folder = os.path.join(program_folder, [33m"[39;49;00m[33mbuild[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        os.makedirs(build_folder, exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Prepare performance report folder[39;49;00m[90m[39;49;00m
        os.makedirs(os.path.join(program_folder, [33m"[39;49;00m[33mperf[39;49;00m[33m"[39;49;00m), exist_ok=[94mTrue[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Read list of DaCe files to compile.[39;49;00m[90m[39;49;00m
        [90m# We do this instead of iterating over source files in the directory to[39;49;00m[90m[39;49;00m
        [90m# avoid globbing files from previous compilations, such that we don't need[39;49;00m[90m[39;49;00m
        [90m# to wipe the directory for every compilation.[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_files.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            file_list = [line.strip().split([33m"[39;49;00m[33m,[39;49;00m[33m"[39;49;00m) [94mfor[39;49;00m line [95min[39;49;00m f][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get absolute paths and targets for all source files[39;49;00m[90m[39;49;00m
        files = [][90m[39;49;00m
        targets = {}  [90m# {target name: target class}[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m target_name, target_type, file_name [95min[39;49;00m file_list:[90m[39;49;00m
            [94mif[39;49;00m target_type:[90m[39;49;00m
                path = os.path.join(target_name, target_type, file_name)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                path = os.path.join(target_name, file_name)[90m[39;49;00m
            files.append(path)[90m[39;49;00m
            targets[target_name] = [96mnext[39;49;00m(k [94mfor[39;49;00m k, v [95min[39;49;00m TargetCodeGenerator.extensions().items() [94mif[39;49;00m v[[33m'[39;49;00m[33mname[39;49;00m[33m'[39;49;00m] == target_name)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Windows-only workaround: Override Visual C++'s linker to use[39;49;00m[90m[39;49;00m
        [90m# Multi-Threaded (MT) mode. This fixes linkage in CUDA applications where[39;49;00m[90m[39;49;00m
        [90m# CMake fails to do so.[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [94melif[39;49;00m [33m'[39;49;00m[33m/MT[39;49;00m[33m'[39;49;00m [95mnot[39;49;00m [95min[39;49;00m os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] = os.environ[[33m'[39;49;00m[33m_CL_[39;49;00m[33m'[39;49;00m] + [33m'[39;49;00m[33m /MT[39;49;00m[33m'[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        [90m# Start forming CMake command[39;49;00m[90m[39;49;00m
        dace_path = os.path.dirname(os.path.dirname(os.path.abspath([91m__file__[39;49;00m)))[90m[39;49;00m
        cmake_command = [[90m[39;49;00m
            [33m"[39;49;00m[33mcmake[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-A x64[39;49;00m[33m"[39;49;00m [94mif[39;49;00m os.name == [33m'[39;49;00m[33mnt[39;49;00m[33m'[39;49;00m [94melse[39;49;00m [33m"[39;49;00m[33m"[39;49;00m,  [90m# Windows-specific flag[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m + os.path.join(dace_path, [33m"[39;49;00m[33mcodegen[39;49;00m[33m"[39;49;00m) + [33m'[39;49;00m[33m"[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_SRC_DIR=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format(src_folder),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_FILES=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m;[39;49;00m[33m"[39;49;00m.join(files)),[90m[39;49;00m
            [33m"[39;49;00m[33m-DDACE_PROGRAM_NAME=[39;49;00m[33m{}[39;49;00m[33m"[39;49;00m.format(program_name),[90m[39;49;00m
        ][90m[39;49;00m
    [90m[39;49;00m
        [90m# Get required environments are retrieve the CMake information[39;49;00m[90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(os.path.join(program_folder, [33m"[39;49;00m[33mdace_environments.csv[39;49;00m[33m"[39;49;00m), [33m"[39;49;00m[33mr[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m f:[90m[39;49;00m
            environments = [96mset[39;49;00m(l.strip() [94mfor[39;49;00m l [95min[39;49;00m f)[90m[39;49;00m
    [90m[39;49;00m
        environments = dace.library.get_environments_and_dependencies(environments)[90m[39;49;00m
    [90m[39;49;00m
        environment_flags, cmake_link_flags = get_environment_flags(environments)[90m[39;49;00m
        cmake_command += [96msorted[39;49;00m(environment_flags)[90m[39;49;00m
    [90m[39;49;00m
        cmake_command += shlex.split(Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mextra_cmake_args[39;49;00m[33m'[39;49;00m))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Replace backslashes with forward slashes[39;49;00m[90m[39;49;00m
        cmake_command = [cmd.replace([33m'[39;49;00m[33m\\[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m/[39;49;00m[33m'[39;49;00m) [94mfor[39;49;00m cmd [95min[39;49;00m cmake_command][90m[39;49;00m
    [90m[39;49;00m
        [90m# Generate CMake options for each compiler[39;49;00m[90m[39;49;00m
        libraries = [96mset[39;49;00m()[90m[39;49;00m
        [94mfor[39;49;00m target_name, target [95min[39;49;00m [96msorted[39;49;00m(targets.items()):[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                cmake_command += target.cmake_options()[90m[39;49;00m
                libraries |= unique_flags(Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, target_name, [33m"[39;49;00m[33mlibs[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
            [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
                [94mpass[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mValueError[39;49;00m [94mas[39;49;00m ex:  [90m# Cannot find compiler executable[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilerConfigurationError([96mstr[39;49;00m(ex))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33m"[39;49;00m[33m-DDACE_LIBS=[39;49;00m[33m\"[39;49;00m[33m{}[39;49;00m[33m\"[39;49;00m[33m"[39;49;00m.format([33m"[39;49;00m[33m [39;49;00m[33m"[39;49;00m.join([96msorted[39;49;00m(libraries))))[90m[39;49;00m
    [90m[39;49;00m
        cmake_command.append([33mf[39;49;00m[33m"[39;49;00m[33m-DCMAKE_BUILD_TYPE=[39;49;00m[33m{[39;49;00mConfig.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m,[90m [39;49;00m[33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)[33m}[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Set linker and linker arguments, iff they have been specified[39;49;00m[90m[39;49;00m
        cmake_linker = Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mexecutable[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        cmake_linker = cmake_linker.strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_linker:[90m[39;49;00m
            cmake_linker = make_absolute(cmake_linker)[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_LINKER=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_linker[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_link_flags = ([33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join([96msorted[39;49;00m(cmake_link_flags)) + [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m +[90m[39;49;00m
                            (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mlinker[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33margs[39;49;00m[33m'[39;49;00m) [95mor[39;49;00m [33m'[39;49;00m[33m'[39;49;00m)).strip()[90m[39;49;00m
        [94mif[39;49;00m cmake_link_flags:[90m[39;49;00m
            cmake_command.append([33mf[39;49;00m[33m'[39;49;00m[33m-DCMAKE_SHARED_LINKER_FLAGS=[39;49;00m[33m"[39;49;00m[33m{[39;49;00mcmake_link_flags[33m}[39;49;00m[33m"[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        cmake_command = [33m'[39;49;00m[33m [39;49;00m[33m'[39;49;00m.join(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [94mif[39;49;00m Config.get([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m) == [33m'[39;49;00m[33mverbose[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [96mprint[39;49;00m([33mf[39;49;00m[33m'[39;49;00m[33mRunning CMake: [39;49;00m[33m{[39;49;00mcmake_command[33m}[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [90m[39;49;00m
        cmake_filename = os.path.join(build_folder, [33m'[39;49;00m[33mcmake_configure.sh[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        [90m##############################################[39;49;00m[90m[39;49;00m
        [90m# Configure[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m identical_file_exists(cmake_filename, cmake_command):[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# Clean CMake directory and try once more[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [96mprint[39;49;00m([33m'[39;49;00m[33mCleaning CMake build folder and retrying...[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            shutil.rmtree(build_folder)[90m[39;49;00m
            os.makedirs(build_folder)[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                _run_liveoutput(cmake_command, shell=[94mTrue[39;49;00m, cwd=build_folder, output_stream=output_stream)[90m[39;49;00m
            [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
                [90m# If still unsuccessful, print results[39;49;00m[90m[39;49;00m
                [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
                    [94mraise[39;49;00m cgx.CompilerConfigurationError([33m'[39;49;00m[33mConfiguration failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
    [90m[39;49;00m
        [94mwith[39;49;00m [96mopen[39;49;00m(cmake_filename, [33m"[39;49;00m[33mw[39;49;00m[33m"[39;49;00m) [94mas[39;49;00m fp:[90m[39;49;00m
            fp.write(cmake_command)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Compile and link[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            _run_liveoutput([33m"[39;49;00m[33mcmake --build . --config [39;49;00m[33m%s[39;49;00m[33m"[39;49;00m % (Config.get([33m'[39;49;00m[33mcompiler[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mbuild_type[39;49;00m[33m'[39;49;00m)),[90m[39;49;00m
                            shell=[94mTrue[39;49;00m,[90m[39;49;00m
                            cwd=build_folder,[90m[39;49;00m
                            output_stream=output_stream)[90m[39;49;00m
        [94mexcept[39;49;00m subprocess.CalledProcessError [94mas[39;49;00m ex:[90m[39;49;00m
            [90m# If unsuccessful, print results[39;49;00m[90m[39;49;00m
            [94mif[39;49;00m Config.get_bool([33m'[39;49;00m[33mdebugprint[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
                [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
>               [94mraise[39;49;00m cgx.CompilationError([33m'[39;49;00m[33mCompiler failure:[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m + ex.output)[90m[39;49;00m
[1m[31mE               dace.codegen.exceptions.CompilationError: Compiler failure:[0m
[1m[31mE               [ 16%] Building CXX object CMakeFiles/tests_persistent_map_cudatest_spmv.dir/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cpu/tests_persistent_map_cudatest_spmv.cpp.o[0m
[1m[31mE               In file included from /home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cpu/tests_persistent_map_cudatest_spmv.cpp:2:[0m
[1m[31mE               In file included from /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/dace.h:22:[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:341:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 341 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:362:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 362 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:387:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 387 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/stream.h:407:45: warning: template template parameter using 'typename' is a C++17 extension [-Wc++17-extensions][0m
[1m[31mE                 407 |         template <template <typename, bool> typename StreamT, typename T, bool ALIGNED,[0m
[1m[31mE                     |                                             ^~~~~~~~[0m
[1m[31mE                     |                                             class[0m
[1m[31mE               4 warnings generated.[0m
[1m[31mE               [ 33%] Building CUDA object CMakeFiles/tests_persistent_map_cudatest_spmv.dir/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cuda/tests_persistent_map_cudatest_spmv_cuda.cu.o[0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3599): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/dace/codegen/../runtime/include/dace/../../../external/moodycamel/concurrentqueue.h(3607): warning #68-D: integer conversion resulted in a change of sign[0m
[1m[31mE                  lastKnownGlobalOffset = -1;[0m
[1m[31mE                                          ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cuda/tests_persistent_map_cudatest_spmv_cuda.cu(136): error: expected an expression[0m
[1m[31mE                                 }/t10[0m
[1m[31mE                                  ^[0m
[1m[31mE               [0m
[1m[31mE               /home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cuda/tests_persistent_map_cudatest_spmv_cuda.cu(137): error: expected a ";"[0m
[1m[31mE                             }[0m
[1m[31mE                             ^[0m
[1m[31mE               [0m
[1m[31mE               2 errors detected in the compilation of "/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cuda/tests_persistent_map_cudatest_spmv_cuda.cu".[0m
[1m[31mE               gmake[2]: *** [CMakeFiles/tests_persistent_map_cudatest_spmv.dir/build.make:91: CMakeFiles/tests_persistent_map_cudatest_spmv.dir/home/primrose/Work/dace/tests/.dacecache/tests_persistent_map_cudatest_spmv/src/cuda/tests_persistent_map_cudatest_spmv_cuda.cu.o] Error 2[0m
[1m[31mE               gmake[1]: *** [CMakeFiles/Makefile2:85: CMakeFiles/tests_persistent_map_cudatest_spmv.dir/all] Error 2[0m
[1m[31mE               gmake: *** [Makefile:91: all] Error 2[0m

[1m[31m../dace/codegen/compiler.py[0m:241: CompilationError
----------------------------- Captured stdout call -----------------------------
BSIZE: [128, 1, 1]
BSIZE: [128, 1, 1]
WARNING: Shadowing variable __compute_b0 from type (<DefinedType.Scalar: 2>, 'unsigned int') to DefinedType.Scalar
WARNING: Shadowing variable __compute_e1 from type (<DefinedType.Scalar: 2>, 'unsigned int') to DefinedType.Scalar
NS []
FNS []
NS [MapEntry (compute[j=__compute_b0:__compute_e1])]
FNS [MapEntry (compute[j=__compute_b0:__compute_e1])]
[31m[1m_________________________________ test_eao_mpi _________________________________[0m

    [0m[37m@pytest[39;49;00m.mark.mpi[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_eao_mpi[39;49;00m():[90m[39;49;00m
>       [94mfrom[39;49;00m [04m[96mmpi4py[39;49;00m [94mimport[39;49;00m MPI [94mas[39;49;00m MPI4PY[90m[39;49;00m
[1m[31mE       ModuleNotFoundError: No module named 'mpi4py'[0m

[1m[31mtransformations/map_distribution_test.py[0m:19: ModuleNotFoundError
[31m[1m______________________ test_multiple_fusions_fpga[xilinx] ______________________[0m

vendor = 'xilinx'

    [0m[37m@pytest[39;49;00m.mark.fpga[90m[39;49;00m
    [37m@pytest[39;49;00m.mark.parametrize([33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m, pytest_params)[90m[39;49;00m
    [94mdef[39;49;00m [92mwrapper[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
>       internal(vendor)[90m[39;49;00m

[1m[31m../dace/fpga_testing.py[0m:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vendor = 'xilinx'

    [0m[94mdef[39;49;00m [92minternal[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
        [94mif[39;49;00m vendor == [94mNone[39;49;00m:[90m[39;49;00m
            vendor = Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mfpga[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        p = FPGATestProcess(target=_run_fpga_test, args=(vendor, test_function, test_timeout, run_synthesis, assert_ii_1))[90m[39;49;00m
        p.start()[90m[39;49;00m
        p.join(timeout=test_timeout)[90m[39;49;00m
        [94mif[39;49;00m p.is_alive():[90m[39;49;00m
            p.kill()[90m[39;49;00m
            raise_error([33mf[39;49;00m[33m"[39;49;00m[33mTest [39;49;00m[33m{[39;49;00mColors.UNDERLINE[33m}[39;49;00m[33m{[39;49;00mtest_function.[91m__name__[39;49;00m[33m}[39;49;00m[33m"[39;49;00m [33mf[39;49;00m[33m"[39;49;00m[33m{[39;49;00mColors.END[33m}[39;49;00m[33m timed out.[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m p.exception:[90m[39;49;00m
>           [94mraise[39;49;00m p.exception[90m[39;49;00m
[1m[31mE           dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:[0m
[1m[31mE           -- The C compiler identification is Clang 18.1.3[0m
[1m[31mE           -- The CXX compiler identification is Clang 18.1.3[0m
[1m[31mE           -- Detecting C compiler ABI info[0m
[1m[31mE           -- Detecting C compiler ABI info - done[0m
[1m[31mE           -- Check for working C compiler: /usr/bin/cc - skipped[0m
[1m[31mE           -- Detecting C compile features[0m
[1m[31mE           -- Detecting C compile features - done[0m
[1m[31mE           -- Detecting CXX compiler ABI info[0m
[1m[31mE           -- Detecting CXX compiler ABI info - done[0m
[1m[31mE           -- Check for working CXX compiler: /usr/bin/c++ - skipped[0m
[1m[31mE           -- Detecting CXX compile features[0m
[1m[31mE           -- Detecting CXX compile features - done[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success[0m
[1m[31mE           -- Found Threads: TRUE[0m
[1m[31mE           -- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")[0m
[1m[31mE           -- Found OpenMP: TRUE (found version "5.1") found components: CXX[0m
[1m[31mE           CMake Warning at /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:104 (message):[0m
[1m[31mE             vitis_hls used from Vitis 2020.1 and onwards introduces breaking changes to[0m
[1m[31mE             hls::stream.  Please pass -D__VITIS_HLS__ or -D__VIVADO_HLS__ in your[0m
[1m[31mE             synthesis script depending on which tool you are using to always use a[0m
[1m[31mE             working version.[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             CMakeLists.txt:250 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):[0m
[1m[31mE             Could NOT find Vitis (missing: Vitis_COMPILER Vitis_HLS Vitis_INCLUDE_DIRS[0m
[1m[31mE             Vitis_LIBRARIES Vitis_FLOATING_POINT_LIBRARY Vitis_VERSION[0m
[1m[31mE             Vitis_MAJOR_VERSION Vitis_MINOR_VERSION Vitis_PLATFORMINFO)[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)[0m
[1m[31mE             /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:804 (find_package_handle_standard_args)[0m
[1m[31mE             CMakeLists.txt:250 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           [0m
[1m[31mE           -- Configuring incomplete, errors occurred![0m

[1m[31m../dace/fpga_testing.py[0m:223: CompilerConfigurationError
----------------------------- Captured stdout call -----------------------------
[94m[1m[17:45:46][0m mapfusion_fpga_test::[4mtest_multiple_fusions_fpga[0m [Xilinx]: Running simulation.
----------------------------- Captured stderr call -----------------------------
Process FPGATestProcess-1:
Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 211, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_multiple_fusions_40a2ecb47c6c2d4967ddd80d73e54d4d/src" -DDACE_FILES="cpu/mapfusion_test_multiple_fusions.cpp;xilinx/host/mapfusion_test_multiple_fusions.cpp;xilinx/device/mapfusion_test_multiple_fusions_0_0.cpp;xilinx/device/link.cfg" -DDACE_PROGRAM_NAME=mapfusion_test_multiple_fusions -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_XILINX_HOST_FLAGS="-Wno-unknown-pragmas -Wno-unused-label" -DDACE_XILINX_SYNTHESIS_FLAGS="-std=c++14" -DDACE_XILINX_BUILD_FLAGS="" -DDACE_XILINX_MODE=simulation -DDACE_XILINX_TARGET_PLATFORM="xilinx_u250_xdma_201830_2" -DDACE_XILINX_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_XILINX_TARGET_CLOCK=100 -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 219, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_multiple_fusions_40a2ecb47c6c2d4967ddd80d73e54d4d/src" -DDACE_FILES="cpu/mapfusion_test_multiple_fusions.cpp;xilinx/host/mapfusion_test_multiple_fusions.cpp;xilinx/device/mapfusion_test_multiple_fusions_0_0.cpp;xilinx/device/link.cfg" -DDACE_PROGRAM_NAME=mapfusion_test_multiple_fusions -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_XILINX_HOST_FLAGS="-Wno-unknown-pragmas -Wno-unused-label" -DDACE_XILINX_SYNTHESIS_FLAGS="-std=c++14" -DDACE_XILINX_BUILD_FLAGS="" -DDACE_XILINX_MODE=simulation -DDACE_XILINX_TARGET_PLATFORM="xilinx_u250_xdma_201830_2" -DDACE_XILINX_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_XILINX_TARGET_CLOCK=100 -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 74, in run
    raise e
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 70, in run
    ret = mp.Process.run(self)
          ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 115, in _run_fpga_test
    sdfgs = test_function()
            ^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/tests/transformations/mapfusion_fpga_test.py", line 20, in test_multiple_fusions_fpga
    sdfg(A=A, B=B, C=C, out=out)
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2389, in __call__
    binaryobj = sdfg.compile()
                ^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2314, in compile
    shared_library = compiler.configure_and_compile(program_folder, sdfg.name)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 225, in configure_and_compile
    raise cgx.CompilerConfigurationError('Configuration failure:\n' + ex.output)
dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
-- The C compiler identification is Clang 18.1.3
-- The CXX compiler identification is Clang 18.1.3
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")
-- Found OpenMP: TRUE (found version "5.1") found components: CXX
CMake Warning at /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:104 (message):
  vitis_hls used from Vitis 2020.1 and onwards introduces breaking changes to
  hls::stream.  Please pass -D__VITIS_HLS__ or -D__VIVADO_HLS__ in your
  synthesis script depending on which tool you are using to always use a
  working version.
Call Stack (most recent call first):
  CMakeLists.txt:250 (find_package)

CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):
  Could NOT find Vitis (missing: Vitis_COMPILER Vitis_HLS Vitis_INCLUDE_DIRS
  Vitis_LIBRARIES Vitis_FLOATING_POINT_LIBRARY Vitis_VERSION
  Vitis_MAJOR_VERSION Vitis_MINOR_VERSION Vitis_PLATFORMINFO)
Call Stack (most recent call first):
  /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)
  /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:804 (find_package_handle_standard_args)
  CMakeLists.txt:250 (find_package)


-- Configuring incomplete, errors occurred!

[31m[1m____________________ test_multiple_fusions_fpga[intel_fpga] ____________________[0m

vendor = 'intel_fpga'

    [0m[37m@pytest[39;49;00m.mark.fpga[90m[39;49;00m
    [37m@pytest[39;49;00m.mark.parametrize([33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m, pytest_params)[90m[39;49;00m
    [94mdef[39;49;00m [92mwrapper[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
>       internal(vendor)[90m[39;49;00m

[1m[31m../dace/fpga_testing.py[0m:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vendor = 'intel_fpga'

    [0m[94mdef[39;49;00m [92minternal[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
        [94mif[39;49;00m vendor == [94mNone[39;49;00m:[90m[39;49;00m
            vendor = Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mfpga[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        p = FPGATestProcess(target=_run_fpga_test, args=(vendor, test_function, test_timeout, run_synthesis, assert_ii_1))[90m[39;49;00m
        p.start()[90m[39;49;00m
        p.join(timeout=test_timeout)[90m[39;49;00m
        [94mif[39;49;00m p.is_alive():[90m[39;49;00m
            p.kill()[90m[39;49;00m
            raise_error([33mf[39;49;00m[33m"[39;49;00m[33mTest [39;49;00m[33m{[39;49;00mColors.UNDERLINE[33m}[39;49;00m[33m{[39;49;00mtest_function.[91m__name__[39;49;00m[33m}[39;49;00m[33m"[39;49;00m [33mf[39;49;00m[33m"[39;49;00m[33m{[39;49;00mColors.END[33m}[39;49;00m[33m timed out.[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m p.exception:[90m[39;49;00m
>           [94mraise[39;49;00m p.exception[90m[39;49;00m
[1m[31mE           dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:[0m
[1m[31mE           -- The C compiler identification is Clang 18.1.3[0m
[1m[31mE           -- The CXX compiler identification is Clang 18.1.3[0m
[1m[31mE           -- Detecting C compiler ABI info[0m
[1m[31mE           -- Detecting C compiler ABI info - done[0m
[1m[31mE           -- Check for working C compiler: /usr/bin/cc - skipped[0m
[1m[31mE           -- Detecting C compile features[0m
[1m[31mE           -- Detecting C compile features - done[0m
[1m[31mE           -- Detecting CXX compiler ABI info[0m
[1m[31mE           -- Detecting CXX compiler ABI info - done[0m
[1m[31mE           -- Check for working CXX compiler: /usr/bin/c++ - skipped[0m
[1m[31mE           -- Detecting CXX compile features[0m
[1m[31mE           -- Detecting CXX compile features - done[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success[0m
[1m[31mE           -- Found Threads: TRUE[0m
[1m[31mE           -- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")[0m
[1m[31mE           -- Found OpenMP: TRUE (found version "5.1") found components: CXX[0m
[1m[31mE           CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):[0m
[1m[31mE             Could NOT find IntelFPGAOpenCL (missing: IntelFPGAOpenCL_AOCL[0m
[1m[31mE             IntelFPGAOpenCL_AOC IntelFPGAOpenCL_INCLUDE_DIRS IntelFPGAOpenCL_LIBRARIES[0m
[1m[31mE             IntelFPGAOpenCL_RPATH IntelFPGAOpenCL_VERSION IntelFPGAOpenCL_MAJOR_VERSION[0m
[1m[31mE             IntelFPGAOpenCL_MINOR_VERSION)[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)[0m
[1m[31mE             /home/primrose/Work/dace/dace/external/hlslib/cmake/FindIntelFPGAOpenCL.cmake:103 (find_package_handle_standard_args)[0m
[1m[31mE             CMakeLists.txt:256 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           -- Configuring incomplete, errors occurred![0m

[1m[31m../dace/fpga_testing.py[0m:223: CompilerConfigurationError
----------------------------- Captured stdout call -----------------------------
[94m[1m[17:45:48][0m mapfusion_fpga_test::[4mtest_multiple_fusions_fpga[0m [Intel FPGA]: Running emulation.
----------------------------- Captured stderr call -----------------------------
Process FPGATestProcess-2:
Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 211, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_multiple_fusions_b46ff064a7b91ca1241d4f7596310756/src" -DDACE_FILES="cpu/mapfusion_test_multiple_fusions.cpp;intel_fpga/host/mapfusion_test_multiple_fusions.cpp;intel_fpga/device/mapfusion_test_multiple_fusions_0_0.cl" -DDACE_PROGRAM_NAME=mapfusion_test_multiple_fusions -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_INTELFPGA_HOST_FLAGS="-Wno-unknown-pragmas" -DDACE_INTELFPGA_KERNEL_FLAGS="-fp-relaxed -cl-no-signed-zeros -cl-fast-relaxed-math -cl-single-precision-constant -no-interleaving=default" -DDACE_INTELFPGA_MODE=emulator -DDACE_INTELFPGA_TARGET_BOARD="a10gx" -DDACE_INTELFPGA_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 219, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_multiple_fusions_b46ff064a7b91ca1241d4f7596310756/src" -DDACE_FILES="cpu/mapfusion_test_multiple_fusions.cpp;intel_fpga/host/mapfusion_test_multiple_fusions.cpp;intel_fpga/device/mapfusion_test_multiple_fusions_0_0.cl" -DDACE_PROGRAM_NAME=mapfusion_test_multiple_fusions -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_INTELFPGA_HOST_FLAGS="-Wno-unknown-pragmas" -DDACE_INTELFPGA_KERNEL_FLAGS="-fp-relaxed -cl-no-signed-zeros -cl-fast-relaxed-math -cl-single-precision-constant -no-interleaving=default" -DDACE_INTELFPGA_MODE=emulator -DDACE_INTELFPGA_TARGET_BOARD="a10gx" -DDACE_INTELFPGA_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 74, in run
    raise e
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 70, in run
    ret = mp.Process.run(self)
          ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 182, in _run_fpga_test
    test_function()
  File "/home/primrose/Work/dace/tests/transformations/mapfusion_fpga_test.py", line 20, in test_multiple_fusions_fpga
    sdfg(A=A, B=B, C=C, out=out)
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2389, in __call__
    binaryobj = sdfg.compile()
                ^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2314, in compile
    shared_library = compiler.configure_and_compile(program_folder, sdfg.name)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 225, in configure_and_compile
    raise cgx.CompilerConfigurationError('Configuration failure:\n' + ex.output)
dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
-- The C compiler identification is Clang 18.1.3
-- The CXX compiler identification is Clang 18.1.3
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")
-- Found OpenMP: TRUE (found version "5.1") found components: CXX
CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):
  Could NOT find IntelFPGAOpenCL (missing: IntelFPGAOpenCL_AOCL
  IntelFPGAOpenCL_AOC IntelFPGAOpenCL_INCLUDE_DIRS IntelFPGAOpenCL_LIBRARIES
  IntelFPGAOpenCL_RPATH IntelFPGAOpenCL_VERSION IntelFPGAOpenCL_MAJOR_VERSION
  IntelFPGAOpenCL_MINOR_VERSION)
Call Stack (most recent call first):
  /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)
  /home/primrose/Work/dace/dace/external/hlslib/cmake/FindIntelFPGAOpenCL.cmake:103 (find_package_handle_standard_args)
  CMakeLists.txt:256 (find_package)

-- Configuring incomplete, errors occurred!

[31m[1m___________________ test_fusion_with_transient_fpga[xilinx] ____________________[0m

vendor = 'xilinx'

    [0m[37m@pytest[39;49;00m.mark.fpga[90m[39;49;00m
    [37m@pytest[39;49;00m.mark.parametrize([33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m, pytest_params)[90m[39;49;00m
    [94mdef[39;49;00m [92mwrapper[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
>       internal(vendor)[90m[39;49;00m

[1m[31m../dace/fpga_testing.py[0m:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vendor = 'xilinx'

    [0m[94mdef[39;49;00m [92minternal[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
        [94mif[39;49;00m vendor == [94mNone[39;49;00m:[90m[39;49;00m
            vendor = Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mfpga[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        p = FPGATestProcess(target=_run_fpga_test, args=(vendor, test_function, test_timeout, run_synthesis, assert_ii_1))[90m[39;49;00m
        p.start()[90m[39;49;00m
        p.join(timeout=test_timeout)[90m[39;49;00m
        [94mif[39;49;00m p.is_alive():[90m[39;49;00m
            p.kill()[90m[39;49;00m
            raise_error([33mf[39;49;00m[33m"[39;49;00m[33mTest [39;49;00m[33m{[39;49;00mColors.UNDERLINE[33m}[39;49;00m[33m{[39;49;00mtest_function.[91m__name__[39;49;00m[33m}[39;49;00m[33m"[39;49;00m [33mf[39;49;00m[33m"[39;49;00m[33m{[39;49;00mColors.END[33m}[39;49;00m[33m timed out.[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m p.exception:[90m[39;49;00m
>           [94mraise[39;49;00m p.exception[90m[39;49;00m
[1m[31mE           dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:[0m
[1m[31mE           -- The C compiler identification is Clang 18.1.3[0m
[1m[31mE           -- The CXX compiler identification is Clang 18.1.3[0m
[1m[31mE           -- Detecting C compiler ABI info[0m
[1m[31mE           -- Detecting C compiler ABI info - done[0m
[1m[31mE           -- Check for working C compiler: /usr/bin/cc - skipped[0m
[1m[31mE           -- Detecting C compile features[0m
[1m[31mE           -- Detecting C compile features - done[0m
[1m[31mE           -- Detecting CXX compiler ABI info[0m
[1m[31mE           -- Detecting CXX compiler ABI info - done[0m
[1m[31mE           -- Check for working CXX compiler: /usr/bin/c++ - skipped[0m
[1m[31mE           -- Detecting CXX compile features[0m
[1m[31mE           -- Detecting CXX compile features - done[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success[0m
[1m[31mE           -- Found Threads: TRUE[0m
[1m[31mE           -- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")[0m
[1m[31mE           -- Found OpenMP: TRUE (found version "5.1") found components: CXX[0m
[1m[31mE           CMake Warning at /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:104 (message):[0m
[1m[31mE             vitis_hls used from Vitis 2020.1 and onwards introduces breaking changes to[0m
[1m[31mE             hls::stream.  Please pass -D__VITIS_HLS__ or -D__VIVADO_HLS__ in your[0m
[1m[31mE             synthesis script depending on which tool you are using to always use a[0m
[1m[31mE             working version.[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             CMakeLists.txt:250 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):[0m
[1m[31mE             Could NOT find Vitis (missing: Vitis_COMPILER Vitis_HLS Vitis_INCLUDE_DIRS[0m
[1m[31mE             Vitis_LIBRARIES Vitis_FLOATING_POINT_LIBRARY Vitis_VERSION[0m
[1m[31mE             Vitis_MAJOR_VERSION Vitis_MINOR_VERSION Vitis_PLATFORMINFO)[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)[0m
[1m[31mE             /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:804 (find_package_handle_standard_args)[0m
[1m[31mE             CMakeLists.txt:250 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           [0m
[1m[31mE           -- Configuring incomplete, errors occurred![0m

[1m[31m../dace/fpga_testing.py[0m:223: CompilerConfigurationError
----------------------------- Captured stdout call -----------------------------
[94m[1m[17:45:50][0m mapfusion_fpga_test::[4mtest_fusion_with_transient_fpga[0m [Xilinx]: Running simulation.
----------------------------- Captured stderr call -----------------------------
Process FPGATestProcess-3:
Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 211, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_fusion_with_transient_b6dda5aa946dbec010afa93f761f35b9/src" -DDACE_FILES="cpu/mapfusion_test_fusion_with_transient.cpp;xilinx/host/mapfusion_test_fusion_with_transient.cpp;xilinx/device/mapfusion_test_fusion_with_transient_0_0.cpp;xilinx/device/link.cfg" -DDACE_PROGRAM_NAME=mapfusion_test_fusion_with_transient -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_XILINX_HOST_FLAGS="-Wno-unknown-pragmas -Wno-unused-label" -DDACE_XILINX_SYNTHESIS_FLAGS="-std=c++14" -DDACE_XILINX_BUILD_FLAGS="" -DDACE_XILINX_MODE=simulation -DDACE_XILINX_TARGET_PLATFORM="xilinx_u250_xdma_201830_2" -DDACE_XILINX_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_XILINX_TARGET_CLOCK=100 -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 219, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_fusion_with_transient_b6dda5aa946dbec010afa93f761f35b9/src" -DDACE_FILES="cpu/mapfusion_test_fusion_with_transient.cpp;xilinx/host/mapfusion_test_fusion_with_transient.cpp;xilinx/device/mapfusion_test_fusion_with_transient_0_0.cpp;xilinx/device/link.cfg" -DDACE_PROGRAM_NAME=mapfusion_test_fusion_with_transient -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_XILINX_HOST_FLAGS="-Wno-unknown-pragmas -Wno-unused-label" -DDACE_XILINX_SYNTHESIS_FLAGS="-std=c++14" -DDACE_XILINX_BUILD_FLAGS="" -DDACE_XILINX_MODE=simulation -DDACE_XILINX_TARGET_PLATFORM="xilinx_u250_xdma_201830_2" -DDACE_XILINX_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_XILINX_TARGET_CLOCK=100 -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 74, in run
    raise e
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 70, in run
    ret = mp.Process.run(self)
          ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 115, in _run_fpga_test
    sdfgs = test_function()
            ^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/tests/transformations/mapfusion_fpga_test.py", line 37, in test_fusion_with_transient_fpga
    sdfg(A=A)
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2389, in __call__
    binaryobj = sdfg.compile()
                ^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2314, in compile
    shared_library = compiler.configure_and_compile(program_folder, sdfg.name)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 225, in configure_and_compile
    raise cgx.CompilerConfigurationError('Configuration failure:\n' + ex.output)
dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
-- The C compiler identification is Clang 18.1.3
-- The CXX compiler identification is Clang 18.1.3
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")
-- Found OpenMP: TRUE (found version "5.1") found components: CXX
CMake Warning at /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:104 (message):
  vitis_hls used from Vitis 2020.1 and onwards introduces breaking changes to
  hls::stream.  Please pass -D__VITIS_HLS__ or -D__VIVADO_HLS__ in your
  synthesis script depending on which tool you are using to always use a
  working version.
Call Stack (most recent call first):
  CMakeLists.txt:250 (find_package)

CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):
  Could NOT find Vitis (missing: Vitis_COMPILER Vitis_HLS Vitis_INCLUDE_DIRS
  Vitis_LIBRARIES Vitis_FLOATING_POINT_LIBRARY Vitis_VERSION
  Vitis_MAJOR_VERSION Vitis_MINOR_VERSION Vitis_PLATFORMINFO)
Call Stack (most recent call first):
  /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)
  /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:804 (find_package_handle_standard_args)
  CMakeLists.txt:250 (find_package)


-- Configuring incomplete, errors occurred!

[31m[1m_________________ test_fusion_with_transient_fpga[intel_fpga] __________________[0m

vendor = 'intel_fpga'

    [0m[37m@pytest[39;49;00m.mark.fpga[90m[39;49;00m
    [37m@pytest[39;49;00m.mark.parametrize([33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m, pytest_params)[90m[39;49;00m
    [94mdef[39;49;00m [92mwrapper[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
>       internal(vendor)[90m[39;49;00m

[1m[31m../dace/fpga_testing.py[0m:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vendor = 'intel_fpga'

    [0m[94mdef[39;49;00m [92minternal[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
        [94mif[39;49;00m vendor == [94mNone[39;49;00m:[90m[39;49;00m
            vendor = Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mfpga[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        p = FPGATestProcess(target=_run_fpga_test, args=(vendor, test_function, test_timeout, run_synthesis, assert_ii_1))[90m[39;49;00m
        p.start()[90m[39;49;00m
        p.join(timeout=test_timeout)[90m[39;49;00m
        [94mif[39;49;00m p.is_alive():[90m[39;49;00m
            p.kill()[90m[39;49;00m
            raise_error([33mf[39;49;00m[33m"[39;49;00m[33mTest [39;49;00m[33m{[39;49;00mColors.UNDERLINE[33m}[39;49;00m[33m{[39;49;00mtest_function.[91m__name__[39;49;00m[33m}[39;49;00m[33m"[39;49;00m [33mf[39;49;00m[33m"[39;49;00m[33m{[39;49;00mColors.END[33m}[39;49;00m[33m timed out.[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m p.exception:[90m[39;49;00m
>           [94mraise[39;49;00m p.exception[90m[39;49;00m
[1m[31mE           dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:[0m
[1m[31mE           -- The C compiler identification is Clang 18.1.3[0m
[1m[31mE           -- The CXX compiler identification is Clang 18.1.3[0m
[1m[31mE           -- Detecting C compiler ABI info[0m
[1m[31mE           -- Detecting C compiler ABI info - done[0m
[1m[31mE           -- Check for working C compiler: /usr/bin/cc - skipped[0m
[1m[31mE           -- Detecting C compile features[0m
[1m[31mE           -- Detecting C compile features - done[0m
[1m[31mE           -- Detecting CXX compiler ABI info[0m
[1m[31mE           -- Detecting CXX compiler ABI info - done[0m
[1m[31mE           -- Check for working CXX compiler: /usr/bin/c++ - skipped[0m
[1m[31mE           -- Detecting CXX compile features[0m
[1m[31mE           -- Detecting CXX compile features - done[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success[0m
[1m[31mE           -- Found Threads: TRUE[0m
[1m[31mE           -- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")[0m
[1m[31mE           -- Found OpenMP: TRUE (found version "5.1") found components: CXX[0m
[1m[31mE           CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):[0m
[1m[31mE             Could NOT find IntelFPGAOpenCL (missing: IntelFPGAOpenCL_AOCL[0m
[1m[31mE             IntelFPGAOpenCL_AOC IntelFPGAOpenCL_INCLUDE_DIRS IntelFPGAOpenCL_LIBRARIES[0m
[1m[31mE             IntelFPGAOpenCL_RPATH IntelFPGAOpenCL_VERSION IntelFPGAOpenCL_MAJOR_VERSION[0m
[1m[31mE             IntelFPGAOpenCL_MINOR_VERSION)[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)[0m
[1m[31mE             /home/primrose/Work/dace/dace/external/hlslib/cmake/FindIntelFPGAOpenCL.cmake:103 (find_package_handle_standard_args)[0m
[1m[31mE             CMakeLists.txt:256 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           -- Configuring incomplete, errors occurred![0m

[1m[31m../dace/fpga_testing.py[0m:223: CompilerConfigurationError
----------------------------- Captured stdout call -----------------------------
[94m[1m[17:45:52][0m mapfusion_fpga_test::[4mtest_fusion_with_transient_fpga[0m [Intel FPGA]: Running emulation.
----------------------------- Captured stderr call -----------------------------
Process FPGATestProcess-4:
Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 211, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_fusion_with_transient_d44cb4b8a9fe81b7f04524d0a604e00d/src" -DDACE_FILES="cpu/mapfusion_test_fusion_with_transient.cpp;intel_fpga/host/mapfusion_test_fusion_with_transient.cpp;intel_fpga/device/mapfusion_test_fusion_with_transient_0_0.cl" -DDACE_PROGRAM_NAME=mapfusion_test_fusion_with_transient -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_INTELFPGA_HOST_FLAGS="-Wno-unknown-pragmas" -DDACE_INTELFPGA_KERNEL_FLAGS="-fp-relaxed -cl-no-signed-zeros -cl-fast-relaxed-math -cl-single-precision-constant -no-interleaving=default" -DDACE_INTELFPGA_MODE=emulator -DDACE_INTELFPGA_TARGET_BOARD="a10gx" -DDACE_INTELFPGA_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 219, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_fusion_with_transient_d44cb4b8a9fe81b7f04524d0a604e00d/src" -DDACE_FILES="cpu/mapfusion_test_fusion_with_transient.cpp;intel_fpga/host/mapfusion_test_fusion_with_transient.cpp;intel_fpga/device/mapfusion_test_fusion_with_transient_0_0.cl" -DDACE_PROGRAM_NAME=mapfusion_test_fusion_with_transient -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_INTELFPGA_HOST_FLAGS="-Wno-unknown-pragmas" -DDACE_INTELFPGA_KERNEL_FLAGS="-fp-relaxed -cl-no-signed-zeros -cl-fast-relaxed-math -cl-single-precision-constant -no-interleaving=default" -DDACE_INTELFPGA_MODE=emulator -DDACE_INTELFPGA_TARGET_BOARD="a10gx" -DDACE_INTELFPGA_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 74, in run
    raise e
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 70, in run
    ret = mp.Process.run(self)
          ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 182, in _run_fpga_test
    test_function()
  File "/home/primrose/Work/dace/tests/transformations/mapfusion_fpga_test.py", line 37, in test_fusion_with_transient_fpga
    sdfg(A=A)
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2389, in __call__
    binaryobj = sdfg.compile()
                ^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2314, in compile
    shared_library = compiler.configure_and_compile(program_folder, sdfg.name)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 225, in configure_and_compile
    raise cgx.CompilerConfigurationError('Configuration failure:\n' + ex.output)
dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
-- The C compiler identification is Clang 18.1.3
-- The CXX compiler identification is Clang 18.1.3
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")
-- Found OpenMP: TRUE (found version "5.1") found components: CXX
CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):
  Could NOT find IntelFPGAOpenCL (missing: IntelFPGAOpenCL_AOCL
  IntelFPGAOpenCL_AOC IntelFPGAOpenCL_INCLUDE_DIRS IntelFPGAOpenCL_LIBRARIES
  IntelFPGAOpenCL_RPATH IntelFPGAOpenCL_VERSION IntelFPGAOpenCL_MAJOR_VERSION
  IntelFPGAOpenCL_MINOR_VERSION)
Call Stack (most recent call first):
  /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)
  /home/primrose/Work/dace/dace/external/hlslib/cmake/FindIntelFPGAOpenCL.cmake:103 (find_package_handle_standard_args)
  CMakeLists.txt:256 (find_package)

-- Configuring incomplete, errors occurred!

[31m[1m______________ test_fusion_with_transient_fpga_decoupled[xilinx] _______________[0m

vendor = 'xilinx'

    [0m[37m@pytest[39;49;00m.mark.fpga[90m[39;49;00m
    [37m@pytest[39;49;00m.mark.parametrize([33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m, pytest_params)[90m[39;49;00m
    [94mdef[39;49;00m [92mwrapper[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
>       internal(vendor)[90m[39;49;00m

[1m[31m../dace/fpga_testing.py[0m:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vendor = 'xilinx'

    [0m[94mdef[39;49;00m [92minternal[39;49;00m(vendor: Optional[[96mstr[39;49;00m]):[90m[39;49;00m
        [94mif[39;49;00m vendor == [94mNone[39;49;00m:[90m[39;49;00m
            vendor = Config.get([33m"[39;49;00m[33mcompiler[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mfpga[39;49;00m[33m"[39;49;00m, [33m"[39;49;00m[33mvendor[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        p = FPGATestProcess(target=_run_fpga_test, args=(vendor, test_function, test_timeout, run_synthesis, assert_ii_1))[90m[39;49;00m
        p.start()[90m[39;49;00m
        p.join(timeout=test_timeout)[90m[39;49;00m
        [94mif[39;49;00m p.is_alive():[90m[39;49;00m
            p.kill()[90m[39;49;00m
            raise_error([33mf[39;49;00m[33m"[39;49;00m[33mTest [39;49;00m[33m{[39;49;00mColors.UNDERLINE[33m}[39;49;00m[33m{[39;49;00mtest_function.[91m__name__[39;49;00m[33m}[39;49;00m[33m"[39;49;00m [33mf[39;49;00m[33m"[39;49;00m[33m{[39;49;00mColors.END[33m}[39;49;00m[33m timed out.[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        [94mif[39;49;00m p.exception:[90m[39;49;00m
>           [94mraise[39;49;00m p.exception[90m[39;49;00m
[1m[31mE           dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:[0m
[1m[31mE           -- The C compiler identification is Clang 18.1.3[0m
[1m[31mE           -- The CXX compiler identification is Clang 18.1.3[0m
[1m[31mE           -- Detecting C compiler ABI info[0m
[1m[31mE           -- Detecting C compiler ABI info - done[0m
[1m[31mE           -- Check for working C compiler: /usr/bin/cc - skipped[0m
[1m[31mE           -- Detecting C compile features[0m
[1m[31mE           -- Detecting C compile features - done[0m
[1m[31mE           -- Detecting CXX compiler ABI info[0m
[1m[31mE           -- Detecting CXX compiler ABI info - done[0m
[1m[31mE           -- Check for working CXX compiler: /usr/bin/c++ - skipped[0m
[1m[31mE           -- Detecting CXX compile features[0m
[1m[31mE           -- Detecting CXX compile features - done[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD[0m
[1m[31mE           -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success[0m
[1m[31mE           -- Found Threads: TRUE[0m
[1m[31mE           -- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")[0m
[1m[31mE           -- Found OpenMP: TRUE (found version "5.1") found components: CXX[0m
[1m[31mE           CMake Warning at /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:104 (message):[0m
[1m[31mE             vitis_hls used from Vitis 2020.1 and onwards introduces breaking changes to[0m
[1m[31mE             hls::stream.  Please pass -D__VITIS_HLS__ or -D__VIVADO_HLS__ in your[0m
[1m[31mE             synthesis script depending on which tool you are using to always use a[0m
[1m[31mE             working version.[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             CMakeLists.txt:250 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):[0m
[1m[31mE             Could NOT find Vitis (missing: Vitis_COMPILER Vitis_HLS Vitis_INCLUDE_DIRS[0m
[1m[31mE             Vitis_LIBRARIES Vitis_FLOATING_POINT_LIBRARY Vitis_VERSION[0m
[1m[31mE             Vitis_MAJOR_VERSION Vitis_MINOR_VERSION Vitis_PLATFORMINFO)[0m
[1m[31mE           Call Stack (most recent call first):[0m
[1m[31mE             /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)[0m
[1m[31mE             /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:804 (find_package_handle_standard_args)[0m
[1m[31mE             CMakeLists.txt:250 (find_package)[0m
[1m[31mE           [0m
[1m[31mE           [0m
[1m[31mE           -- Configuring incomplete, errors occurred![0m

[1m[31m../dace/fpga_testing.py[0m:223: CompilerConfigurationError
----------------------------- Captured stdout call -----------------------------
[94m[1m[17:45:54][0m mapfusion_fpga_test::[4mtest_fusion_with_transient_fpga_decoupled[0m [Xilinx]: Running simulation.
----------------------------- Captured stderr call -----------------------------
Process FPGATestProcess-5:
Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 211, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_fusion_with_transient_bf5e52d34647dd04e08ae0d3b8a990f7/src" -DDACE_FILES="cpu/mapfusion_test_fusion_with_transient.cpp;xilinx/host/mapfusion_test_fusion_with_transient.cpp;xilinx/device/mapfusion_test_fusion_with_transient_0_0.cpp;xilinx/device/link.cfg" -DDACE_PROGRAM_NAME=mapfusion_test_fusion_with_transient -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_XILINX_HOST_FLAGS="-Wno-unknown-pragmas -Wno-unused-label" -DDACE_XILINX_SYNTHESIS_FLAGS="-std=c++14" -DDACE_XILINX_BUILD_FLAGS="" -DDACE_XILINX_MODE=simulation -DDACE_XILINX_TARGET_PLATFORM="xilinx_u250_xdma_201830_2" -DDACE_XILINX_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_XILINX_TARGET_CLOCK=100 -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 219, in configure_and_compile
    _run_liveoutput(cmake_command, shell=True, cwd=build_folder, output_stream=output_stream)
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 416, in _run_liveoutput
    raise subprocess.CalledProcessError(process.returncode, command, output.getvalue())
subprocess.CalledProcessError: Command 'cmake  "/home/primrose/Work/dace/dace/codegen" -DDACE_SRC_DIR="/home/primrose/Work/dace/tests/.dacecache/mapfusion_test_fusion_with_transient_bf5e52d34647dd04e08ae0d3b8a990f7/src" -DDACE_FILES="cpu/mapfusion_test_fusion_with_transient.cpp;xilinx/host/mapfusion_test_fusion_with_transient.cpp;xilinx/device/mapfusion_test_fusion_with_transient_0_0.cpp;xilinx/device/link.cfg" -DDACE_PROGRAM_NAME=mapfusion_test_fusion_with_transient -DDACE_ENV_CMAKE_FILES="" -DDACE_ENV_COMPILE_FLAGS="" -DDACE_ENV_INCLUDES="" -DDACE_ENV_LIBRARIES="" -DDACE_ENV_MINIMUM_VERSION=0 -DDACE_ENV_PACKAGES="" -DDACE_ENV_VAR_KEYS="" -DDACE_ENV_VAR_VALUES="" -DCMAKE_CXX_FLAGS="-std=c++14 -fPIC -Wall -Wextra -O3 -march=native -ffast-math -Wno-unused-parameter -Wno-unused-label" -DDACE_XILINX_HOST_FLAGS="-Wno-unknown-pragmas -Wno-unused-label" -DDACE_XILINX_SYNTHESIS_FLAGS="-std=c++14" -DDACE_XILINX_BUILD_FLAGS="" -DDACE_XILINX_MODE=simulation -DDACE_XILINX_TARGET_PLATFORM="xilinx_u250_xdma_201830_2" -DDACE_XILINX_ENABLE_DEBUGGING=OFF -DDACE_FPGA_AUTOBUILD_BITSTREAM=ON -DDACE_XILINX_TARGET_CLOCK=100 -DDACE_LIBS="" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--disable-new-dtags"' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 74, in run
    raise e
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 70, in run
    ret = mp.Process.run(self)
          ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/primrose/Work/dace/dace/fpga_testing.py", line 115, in _run_fpga_test
    sdfgs = test_function()
            ^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/tests/transformations/mapfusion_fpga_test.py", line 51, in test_fusion_with_transient_fpga_decoupled
    sdfg(A=A)
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2389, in __call__
    binaryobj = sdfg.compile()
                ^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/sdfg/sdfg.py", line 2314, in compile
    shared_library = compiler.configure_and_compile(program_folder, sdfg.name)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/primrose/Work/dace/dace/codegen/compiler.py", line 225, in configure_and_compile
    raise cgx.CompilerConfigurationError('Configuration failure:\n' + ex.output)
dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
-- The C compiler identification is Clang 18.1.3
-- The CXX compiler identification is Clang 18.1.3
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE
-- Found OpenMP_CXX: -fopenmp=libomp (found version "5.1")
-- Found OpenMP: TRUE (found version "5.1") found components: CXX
CMake Warning at /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:104 (message):
  vitis_hls used from Vitis 2020.1 and onwards introduces breaking changes to
  hls::stream.  Please pass -D__VITIS_HLS__ or -D__VIVADO_HLS__ in your
  synthesis script depending on which tool you are using to always use a
  working version.
Call Stack (most recent call first):
  CMakeLists.txt:250 (find_package)

CMake Error at /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:233 (message):
  Could NOT find Vitis (missing: Vitis_COMPILER Vitis_HLS Vitis_INCLUDE_DIRS
  Vitis_LIBRARIES Vitis_FLOATING_POINT_LIBRARY Vitis_VERSION
  Vitis_MAJOR_VERSION Vitis_MINOR_VERSION Vitis_PLATFORMINFO)
Call Stack (most recent call first):
  /home/primrose/.def/lib/python3.12/site-packages/cmake/data/share/cmake-3.30/Modules/FindPackageHandleStandardArgs.cmake:603 (_FPHSA_FAILURE_MESSAGE)
  /home/primrose/Work/dace/dace/external/hlslib/cmake/FindVitis.cmake:804 (find_package_handle_standard_args)
  CMakeLists.txt:250 (find_package)


-- Configuring incomplete, errors occurred!

[31m[1m____________________________ test_outconn_self_copy ____________________________[0m

    [0m[94mdef[39;49;00m [92mtest_outconn_self_copy[39;49;00m():[90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92mloop_body[39;49;00m(A: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m], B: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m]):[90m[39;49;00m
            A[[94m1[39;49;00m] = A[[94m0[39;49;00m][90m[39;49;00m
            B[[94m0[39;49;00m] = A[[94m2[39;49;00m][90m[39;49;00m
            B[[94m1[39;49;00m] = B[[94m0[39;49;00m][90m[39;49;00m
    [90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92moutconn_self_copy[39;49;00m(A: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m]):[90m[39;49;00m
            B = np.ndarray(([94m5[39;49;00m, [94m5[39;49;00m), dtype=np.int32)[90m[39;49;00m
            loop_body(A, B)[90m[39;49;00m
            [94mreturn[39;49;00m B[90m[39;49;00m
    [90m[39;49;00m
        sdfg = outconn_self_copy.to_sdfg(simplify=[94mFalse[39;49;00m)[90m[39;49;00m
>       sdfg.apply_transformations_repeated(xforms)[90m[39;49;00m
[1m[31mE       NameError: name 'xforms' is not defined[0m

[1m[31mtransformations/nested_copies_among_connectors.py[0m:50: NameError
[31m[1m___________________________ test_in_out_inconn_copy ____________________________[0m

    [0m[94mdef[39;49;00m [92mtest_in_out_inconn_copy[39;49;00m():[90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92mloop_body[39;49;00m(A: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m], B: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m]):[90m[39;49;00m
            B[[94m1[39;49;00m] = A[[94m0[39;49;00m][90m[39;49;00m
            A[[94m2[39;49;00m] = B[[94m3[39;49;00m][90m[39;49;00m
    [90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92min_out_inconn_copy[39;49;00m(A: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m]):[90m[39;49;00m
            B = np.ndarray(([94m5[39;49;00m, [94m5[39;49;00m), dtype=np.int32)[90m[39;49;00m
            B[[94m3[39;49;00m] = [94m3[39;49;00m[90m[39;49;00m
            loop_body(A, B)[90m[39;49;00m
            [94mreturn[39;49;00m B[90m[39;49;00m
    [90m[39;49;00m
        sdfg = in_out_inconn_copy.to_sdfg(simplify=[94mFalse[39;49;00m)[90m[39;49;00m
>       sdfg.apply_transformations_repeated(xforms)[90m[39;49;00m
[1m[31mE       NameError: name 'xforms' is not defined[0m

[1m[31mtransformations/nested_copies_among_connectors.py[0m:80: NameError
[31m[1m___________________________ test_intermediate_copies ___________________________[0m

    [0m[94mdef[39;49;00m [92mtest_intermediate_copies[39;49;00m():[90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92mloop_body[39;49;00m(A: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m], B: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m]):[90m[39;49;00m
            B[[94m1[39;49;00m] = A[[94m0[39;49;00m][90m[39;49;00m
            tmp1 = B[[94m2[39;49;00m] + [94m5[39;49;00m[90m[39;49;00m
            B[[94m3[39;49;00m] = tmp1[90m[39;49;00m
            A[[94m2[39;49;00m] = B[[94m3[39;49;00m][90m[39;49;00m
            tmp2 = A[[94m1[39;49;00m] + [94m5[39;49;00m[90m[39;49;00m
            A[[94m4[39;49;00m] = tmp2[90m[39;49;00m
            B[[94m4[39;49;00m] = A[[94m4[39;49;00m][90m[39;49;00m
    [90m[39;49;00m
        [37m@dace[39;49;00m.program[90m[39;49;00m
        [94mdef[39;49;00m [92mintermediate_copies[39;49;00m(A: dace.int32[[94m5[39;49;00m, [94m5[39;49;00m]):[90m[39;49;00m
            B = np.ndarray(([94m5[39;49;00m, [94m5[39;49;00m), dtype=np.int32)[90m[39;49;00m
            B[[94m2[39;49;00m] = [94m2[39;49;00m[90m[39;49;00m
            B[[94m3[39;49;00m] = [94m3[39;49;00m[90m[39;49;00m
            loop_body(A, B)[90m[39;49;00m
            [94mreturn[39;49;00m B[90m[39;49;00m
    [90m[39;49;00m
        sdfg = intermediate_copies.to_sdfg(simplify=[94mFalse[39;49;00m)[90m[39;49;00m
>       sdfg.apply_transformations_repeated(xforms)[90m[39;49;00m
[1m[31mE       NameError: name 'xforms' is not defined[0m

[1m[31mtransformations/nested_copies_among_connectors.py[0m:116: NameError
[31m[1m_________________________________ test_matmuls _________________________________[0m

    [0m[94mdef[39;49;00m [92mtest_matmuls[39;49;00m():[90m[39;49;00m
        sdfg = matmuls.to_sdfg()[90m[39;49;00m
        sdfg.simplify()[90m[39;49;00m
        [94massert[39;49;00m count_maps(sdfg) == [94m2[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        A = np.random.random(([94m64[39;49;00m, [94m32[39;49;00m)).astype(np.float32)[90m[39;49;00m
        B = np.random.random(([94m32[39;49;00m, [94m16[39;49;00m)).astype(np.float32)[90m[39;49;00m
        C = np.random.random(([94m16[39;49;00m, [94m64[39;49;00m)).astype(np.float32)[90m[39;49;00m
    [90m[39;49;00m
        ref = (A @ B) @ C[90m[39;49;00m
    [90m[39;49;00m
        [90m# Fuse[39;49;00m[90m[39;49;00m
        sdfg.arrays[[33m"[39;49;00m[33mo1[39;49;00m[33m"[39;49;00m].transient = [94mTrue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        first_map = [94mNone[39;49;00m[90m[39;49;00m
        [94mfor[39;49;00m node [95min[39;49;00m sdfg.start_state.nodes():[90m[39;49;00m
            [94mif[39;49;00m [95mnot[39;49;00m [96misinstance[39;49;00m(node, dace.nodes.MapEntry):[90m[39;49;00m
                [94mcontinue[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
            [94mif[39;49;00m [33m"[39;49;00m[33mIN_A[39;49;00m[33m"[39;49;00m [95min[39;49;00m node.in_connectors:[90m[39;49;00m
                first_map = node[90m[39;49;00m
                [94mbreak[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        new_maps = MapExpansion.apply_to(sdfg=sdfg, map_entry=first_map)[90m[39;49;00m
        new_maps[[94m0[39;49;00m].map.schedule = dace.ScheduleType.Default[90m[39;49;00m
        new_maps[[94m1[39;49;00m].map.schedule = dace.ScheduleType.Default[90m[39;49;00m
    [90m[39;49;00m
        sdfg.apply_transformations_repeated(MapCollapse)[90m[39;49;00m
    [90m[39;49;00m
        applied = sdfg.apply_transformations(OTFMapFusion, options={[33m"[39;49;00m[33midentity[39;49;00m[33m"[39;49;00m: [94m0[39;49;00m})[90m[39;49;00m
        [94massert[39;49;00m applied == [94m1[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        o2 = np.zeros(([94m64[39;49;00m, [94m64[39;49;00m), dtype=A.dtype)[90m[39;49;00m
        sdfg(A=A, B=B, C=C, o2=o2)[90m[39;49;00m
    [90m[39;49;00m
>       [94massert[39;49;00m np.allclose(o2, ref)[90m[39;49;00m
[1m[31mE       assert False[0m
[1m[31mE        +  where False = <function allclose at 0x79a2c7da4970>(array([[   467.53323,   1594.6459 ,   2508.2048 , ...,  55792.484  ,\n         73244.89   ,  60112.234  ],\n       [ 558...     [171251.38   , 209530.02   , 197645.88   , ..., 231947.11   ,\n        300529.25   , 243767.47   ]], dtype=float32), array([[54.32144 , 65.65685 , 62.85684 , ..., 56.204777, 73.4331  ,\n        58.722115],\n       [64.71447 , 77.953766, ...    49.31178 ],\n       [52.499424, 62.753704, 60.284508, ..., 52.404594, 68.177704,\n        55.017906]], dtype=float32))[0m
[1m[31mE        +    where <function allclose at 0x79a2c7da4970> = np.allclose[0m

[1m[31mtransformations/otf_map_fusion_test.py[0m:674: AssertionError
[33m=============================== warnings summary ===============================[0m
../dace/sdfg/state.py:2275: 20 warnings
tests/chained_nested_tasklet_test.py: 6 warnings
tests/chained_tasklet_test.py: 2 warnings
tests/compile_sdfg_test.py: 2 warnings
tests/copynd_test.py: 46 warnings
tests/dynamic_sdfg_functions_test.py: 2 warnings
tests/memlet_lifetime_validation_test.py: 6 warnings
tests/memlet_propagation_volume_test.py: 2 warnings
tests/multiple_cr_test.py: 3 warnings
tests/multiple_tasklet_test.py: 2 warnings
tests/nested_sdfg_test.py: 2 warnings
tests/offset_stride_test.py: 2 warnings
tests/sdfg_validate_names_test.py: 7 warnings
tests/sdfg_validate_scopes_test.py: 1 warning
tests/specialize_test.py: 3 warnings
tests/state_transition_test.py: 9 warnings
  /home/primrose/Work/dace/dace/sdfg/state.py:2275: DeprecationWarning: The "SDFGState.add_array" API is deprecated, please use "SDFG.add_array" and "SDFGState.add_access"
    warnings.warn(

../dace/frontend/python/parser.py:191
../dace/frontend/python/parser.py:191
tests/dynamic_tb_map_cudatest.py::test_dynamic_maps
tests/lib_reuse_test.py::test_reload
tests/lib_reuse_test.py::test_load_precompiled
tests/reloadable_lib_test.py::test
  /home/primrose/Work/dace/dace/frontend/python/parser.py:191: UserWarning: Using decorator arguments for types is deprecated. Please use type hints on function arguments instead.
    warnings.warn('Using decorator arguments for types is deprecated. '

../dace/sdfg/state.py:2308: 8 warnings
tests/memlet_propagation_volume_test.py: 4 warnings
  /home/primrose/Work/dace/dace/sdfg/state.py:2308: DeprecationWarning: The "SDFGState.add_stream" API is deprecated, please use "SDFG.add_stream" and "SDFGState.add_access"
    warnings.warn(

../../../.def/lib/python3.12/site-packages/astunparse/unparser.py:711
  /home/primrose/.def/lib/python3.12/site-packages/astunparse/unparser.py:711: DeprecationWarning: ast.Num is deprecated and will be removed in Python 3.14; use ast.Constant instead
    if isinstance(t.value, getattr(ast, 'Constant', getattr(ast, 'Num', None))) and isinstance(t.value.n, int):

tests/add_state_api_test.py::test_state_before
tests/add_state_api_test.py::test_state_after
  /home/primrose/Work/dace/dace/frontend/python/newast.py:2334: UserWarning: Two for-loops using the same variable (i) but different ranges in the same nested SDFG level. This may work but is not officially supported.
    warnings.warn("Two for-loops using the same variable ({}) but "

tests/constant_array_test.py::test
  /home/primrose/Work/dace/dace/sdfg/validation.py:250: UserWarning: Found constant "kernel" that does not refer to an array or a symbol.
    warnings.warn(f'Found constant "{const_name}" that does not refer to an array or a symbol.')

tests/constant_array_test.py::test_constant_transient
tests/constant_array_test.py::test_constant_transient_double_nested
  /home/primrose/Work/dace/dace/sdfg/validation.py:240: UserWarning: Mismatch between constant and data descriptor of "__tmp0", expected to find "Array (dtype=double, shape=(10,))" but found "Array (dtype=double, shape=(10,))".
    warnings.warn(

tests/constant_array_test.py::test_constant_transient_double_nested_scalar
  /home/primrose/Work/dace/dace/sdfg/validation.py:240: UserWarning: Mismatch between constant and data descriptor of "cst", expected to find "Scalar (dtype=double)" but found "Scalar (dtype=double)".
    warnings.warn(

tests/cuda_grid2d_test.py::test_gpu
tests/cuda_grid_test.py::test_gpu
tests/cuda_grid_test.py::test_gpu_vec
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "multiplication". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/cuda_highdim_kernel_test.py::test_highdim_default_block_size
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_cuda_highdim_kernel_test_tester_127". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32, 8, 2. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/cuda_smem2d_test.py::test_gpu_2localstorage
  /home/primrose/Work/dace/dace/transformation/dataflow/local_storage.py:80: UserWarning: Array gpu_A not found! Using array gpu_B instead.
    warnings.warn('Array %s not found! Using array %s instead.' % (array, invariant_memlet.data))

tests/dynamic_tb_map_cudatest.py::test_dynamic_map
tests/persistent_map_cudatest.py::test_persistent_dynamic_map
tests/persistent_map_cudatest.py::test_persistent_default
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __compute_b0:__compute_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/dynamic_tb_map_cudatest.py::test_dynamic_maps
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_84_b0:__map_84_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/dynamic_tb_map_cudatest.py::test_dynamic_maps
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_86_b0:__map_86_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/dynamic_tb_map_cudatest.py::test_dynamic_maps
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_dynamic_tb_map_cudatest_spmv_2x_84". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/dynamic_tb_map_cudatest.py::test_dynamic_maps
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_dynamic_tb_map_cudatest_spmv_2x_86". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/dynamic_tb_map_cudatest.py::test_nested_dynamic_map
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_169_b0:__map_169_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/dynamic_tb_map_cudatest.py::test_dynamic_map_with_step
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_236_b0:__map_236_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/dynamic_tb_map_cudatest.py::test_dynamic_map_with_step
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate tile_j:tile_j + 64 through __map_236_b0:__map_236_e1:64
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/half_cudatest.py::test_relu
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_half_cudatest_halftest_23". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/half_cudatest.py::test_relu_2
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_half_cudatest_halftest_44". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/half_cudatest.py::test_dropout
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_half_cudatest_halftest_65". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/halfvec_cudatest.py::test_half4
tests/halfvec_cudatest.py::test_half8
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "_Mult__map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/halfvec_cudatest.py::test_half4
tests/halfvec_cudatest.py::test_half8
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "_Add__map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/halfvec_cudatest.py::test_exp_vec
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_halfvec_cudatest_halftest_65". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/halfvec_cudatest.py::test_relu_vec
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_halfvec_cudatest_halftest_88". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/halfvec_cudatest.py::test_dropout_vec
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_halfvec_cudatest_halftest_111". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/halfvec_cudatest.py::test_gelu_vec
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_halfvec_cudatest_halftest_137". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/indirection_test.py::test_two_nested_levels_indirection
tests/indirection_test.py::test_multi_dimensional_indirection
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "tests_indirection_test_indirection" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/inlining_test.py::test_multistate_inline_samename
tests/inlining_test.py::test_multistate_inline_outer_dependencies
tests/inlining_test.py::test_multistate_inline_concurrent_subgraphs
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "tests_inlining_test_nested" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/inlining_test.py::test_inlining_view_input
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "tests_inlining_test_test" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/instrumentation_test.py::test_gpu_events
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "mult". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/kernel_fusion_cudatest.py::test_fused_notb
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "fused_kernel". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/lib_reuse_test.py::test_reload
tests/lib_reuse_test.py::test_load_precompiled
tests/reloadable_lib_test.py::test
tests/transformations/loop_to_map_test.py::test_specialize
  /home/primrose/Work/dace/dace/sdfg/validation.py:250: UserWarning: Found constant "size" that does not refer to an array or a symbol.
    warnings.warn(f'Found constant "{const_name}" that does not refer to an array or a symbol.')

tests/lib_reuse_test.py::test_reload
tests/lib_reuse_test.py::test_load_precompiled
tests/reloadable_lib_test.py::test
  /home/primrose/Work/dace/dace/sdfg/validation.py:250: UserWarning: Found constant "factor" that does not refer to an array or a symbol.
    warnings.warn(f'Found constant "{const_name}" that does not refer to an array or a symbol.')

tests/lib_reuse_test.py::test_reload
tests/lib_reuse_test.py::test_load_precompiled
tests/reloadable_lib_test.py::test
  /home/primrose/Work/dace/dace/sdfg/validation.py:250: UserWarning: Found constant "size_0" that does not refer to an array or a symbol.
    warnings.warn(f'Found constant "{const_name}" that does not refer to an array or a symbol.')

tests/lib_reuse_test.py::test_reload
tests/lib_reuse_test.py::test_load_precompiled
tests/reloadable_lib_test.py::test
  /home/primrose/Work/dace/dace/sdfg/validation.py:250: UserWarning: Found constant "factor_0" that does not refer to an array or a symbol.
    warnings.warn(f'Found constant "{const_name}" that does not refer to an array or a symbol.')

tests/lib_reuse_test.py::test_reload
tests/lib_reuse_test.py::test_load_precompiled
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "tests_lib_reuse_test_lib_reuse" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/lib_reuse_test.py::test_load_precompiled
  /home/primrose/Work/dace/dace/codegen/compiled_sdfg.py:107: UserWarning: Library /home/primrose/Work/dace/tests/.dacecache/tests_lib_reuse_test_lib_reuse/build/libtests_lib_reuse_test_lib_reuse_0.so already loaded, renaming file
    warnings.warn(f'Library {self._library_filename} already loaded, renaming file')

tests/map_indirect_array_test.py::test
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i through 0:__p1_e0
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/memlet_propagation_test.py::test_conditional
  /home/primrose/Work/dace/dace/sdfg/validation.py:739: UserWarning: Potential negative out-of-bounds memlet subset: in1:None  -(in1(dyn) [-1:10])->  tests_memlet_propagation_test_conditional_10[i=0:10]:IN_in1
    warnings.warn(f'Potential negative out-of-bounds memlet subset: {e}')

tests/memlet_propagation_test.py::test_conditional_nested
  /home/primrose/Work/dace/dace/sdfg/validation.py:739: UserWarning: Potential negative out-of-bounds memlet subset: in1:None  -(in1(dyn) [-1:10])->  tests_memlet_propagation_test_conditional_27[i=0:10]:IN_in1
    warnings.warn(f'Potential negative out-of-bounds memlet subset: {e}')

tests/memlet_propagation_test.py::test_runtime_conditional
  /home/primrose/Work/dace/dace/sdfg/validation.py:739: UserWarning: Potential negative out-of-bounds memlet subset: in1:None  -(in1(dyn) [-1:10])->  tests_memlet_propagation_test_rconditional_48[i=0:10]:IN_in1
    warnings.warn(f'Potential negative out-of-bounds memlet subset: {e}')

tests/memlet_propagation_volume_test.py::test_memlet_volume_propagation_nsdfg
  /home/primrose/Work/dace/dace/sdfg/state.py:2337: DeprecationWarning: The "SDFGState.add_scalar" API is deprecated, please use "SDFG.add_scalar" and "SDFGState.add_access"
    warnings.warn(

tests/memlet_propagation_volume_test.py::test_memlet_volume_constants
  /home/primrose/Work/dace/dace/sdfg/validation.py:250: UserWarning: Found constant "N" that does not refer to an array or a symbol.
    warnings.warn(f'Found constant "{const_name}" that does not refer to an array or a symbol.')

tests/multiprogram_cudatest.py::test_multiprogram
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "work1". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/multiprogram_cudatest.py::test_multiprogram
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "work2". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/multistream_kernel_cudatest.py::test_multistream_kernel
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "addone_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/multistream_kernel_cudatest.py::test_multistream_kernel
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "addtwo_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/multistream_kernel_cudatest.py::test_multistream_kernel
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "twoarrays_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/nested_loop_test.py::test_map_loop_indirect
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i, j through 0:__tmp_37_23_r
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/nested_loop_test.py::test_map_loop_indirect
tests/nested_loop_test.py::test_map_loop_indirect_2
tests/nested_loop_test.py::test_map_map_indirect
tests/nested_loop_test.py::test_map_map_indirect_2
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "tests_nested_loop_test_loop_with_value" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/nested_loop_test.py::test_map_loop_indirect_2
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i, j through __tmp_54_23_r:__tmp1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/nested_loop_test.py::test_map_map_indirect
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i, j through 0:__map_71_e0
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/nested_loop_test.py::test_map_map_indirect
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through 0:__map_71_e0
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/nested_loop_test.py::test_map_map_indirect_2
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i, j through __map_88_b0:__map_88_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/nested_loop_test.py::test_map_map_indirect_2
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_88_b0:__map_88_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/numpy_bool_input_test.py::test_numpy_bool_input
  /home/primrose/Work/dace/dace/codegen/compiled_sdfg.py:560: UserWarning: Casting scalar argument "in_bool" from bool to <class 'numpy.bool_'>
    warnings.warn(f'Casting scalar argument "{a}" from {type(arg).__name__} to {atype.dtype.type}')

tests/parse_state_struct_test.py::test_preallocate_transients_in_state_struct
  /home/primrose/Work/dace/dace/sdfg/validation.py:516: UserWarning: WARNING: Use of uninitialized transient "persistent_transient" in state tests_parse_state_struct_test_persistent_transient_copyin
    warnings.warn('WARNING: Use of uninitialized transient "%s" in state %s' %

tests/parse_state_struct_test.py::test_preallocate_transients_in_state_struct
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "gemm_init_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/parse_state_struct_test.py::test_preallocate_transients_in_state_struct
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "gemm_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/persistent_fusion_cudatest.py::test_persistent_fusion
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate x through 0:count_val
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/persistent_fusion_cudatest.py::test_persistent_fusion
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i through map_start:map_end
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/persistent_fusion_cudatest.py::test_persistent_fusion
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "init_kernel_launch_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/persistent_fusion_cudatest.py::test_persistent_fusion
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "bfs_kernel_launch_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/persistent_fusion_cudatest.py::test_persistent_fusion_interstate
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "stuff_kernel_launch_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/persistent_map_cudatest.py::test_persistent_default
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1419: UserWarning: Thread-block map cannot be used with dynamic ranges, switching map "compute" to sequential schedule
    warnings.warn('Thread-block map cannot be used with '

tests/persistent_map_cudatest.py::test_persistent_default
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_persistent_map_cudatest_spmv_18". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/reloadable_lib_test.py::test
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "tests_reloadable_lib_test_reloadable_lib" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/scalar_output_cudatest.py::test_dot_gpu
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "_i_dotnit_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/scalar_output_cudatest.py::test_dot_gpu
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "dot_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/scalar_output_cudatest.py::test_scalar_output
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "tests_scalar_output_cudatest_scaltest_38". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/scalar_output_cudatest.py::test_scalar_output
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "assign_43_4_gmap". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/specialize_test.py::test
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "N", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

tests/specialize_test.py::test
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "M", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

tests/symbol_dependent_transients_test.py::test_symbol_dependent_register_array
  /home/primrose/Work/dace/dace/codegen/targets/cpu.py:483: UserWarning: Variable-length array tmp1 with size (((N - 4) * (N - 4)) * (N - i)) detected and was allocated on heap instead of StorageType.Register
    warnings.warn('Variable-length array %s with size %s '

tests/vectortype_test.py::test_vector_reduction_gpu
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "kernel". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/wcr_cudatest.py::test
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "BETA_MAX_init_tasklet_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/copy_to_map_test.py::test_copy_to_map_gpu
tests/transformations/copy_to_map_test.py::test_preprocess
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "copy_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/copy_to_map_test.py::test_flatten_to_map_gpu
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "flat_map". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/gpu_grid_stride_tiling_test.py::test_gpu_grid_stride_tiling_with_indirection
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_80_b0:__map_80_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/transformations/gpu_grid_stride_tiling_test.py::test_gpu_grid_stride_tiling_with_indirection
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate j through __map_80_b0 + tile_j:__map_80_e1:128
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/transformations/gpu_transform_test.py::test_scalar_to_symbol_in_nested_sdfg
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "assign_46_12_gmap". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/gpu_transform_test.py::test_scalar_to_symbol_in_nested_sdfg
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "augassign_47_12_gmap". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/gpu_transform_test.py::test_scalar_to_symbol_in_nested_sdfg
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "assign_43_12_gmap". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/gpu_transform_test.py::test_scalar_to_symbol_in_nested_sdfg
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "augassign_44_12_gmap". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/gpu_transform_test.py::test_write_subset
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "gpu_transform_test_write_subset_66". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/gpu_transform_test.py::test_write_subset_dynamic
  /home/primrose/Work/dace/dace/codegen/targets/cuda.py:1889: UserWarning: No `gpu_block_size` property specified on map "gpu_transform_test_write_subset_dynamic_104". Falling back to the configuration entry `compiler.cuda.default_block_size`: 32,1,1. You can either specify the block size to use with the gpu_block_size property, or by adding nested `GPU_ThreadBlock` maps, which map work to individual threads. For more information, see https://spcldace.readthedocs.io/en/latest/optimization/gpu.html
    warnings.warn(

tests/transformations/loop_to_map_test.py: 12 warnings
tests/transformations/nest_subgraph_test.py: 3 warnings
  /home/primrose/Work/dace/dace/sdfg/state.py:2681: DeprecationWarning: is_start_state is deprecated, use is_start_block instead
    warnings.warn('is_start_state is deprecated, use is_start_block instead', DeprecationWarning)

tests/transformations/loop_to_map_test.py::test_specialize
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "size", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

tests/transformations/loop_to_map_test.py::test_thread_local_transient_single_state
tests/transformations/loop_to_map_test.py::test_thread_local_transient_multi_state
  /home/primrose/Work/dace/dace/codegen/targets/cpu.py:483: UserWarning: Variable-length array A with size (i + 1) detected and was allocated on heap instead of StorageType.Register
    warnings.warn('Variable-length array %s with size %s '

tests/transformations/loop_to_map_test.py::test_shared_local_transient_multi_state
  /home/primrose/Work/dace/dace/sdfg/validation.py:516: UserWarning: WARNING: Use of uninitialized transient "A" in state single_state_body
    warnings.warn('WARNING: Use of uninitialized transient "%s" in state %s' %

tests/transformations/map_expansion_test.py::test_expand_without_dynamic_inputs
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i, j, k through 0:20, __mymap_b0:__mymap_e1, 0:5
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/transformations/map_expansion_test.py::test_expand_without_dynamic_inputs
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate i, j, 0:5 through __mymap_b0:__mymap_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/transformations/mapfusion_fpga_test.py::test_multiple_fusions_fpga[xilinx]
tests/transformations/mapfusion_fpga_test.py::test_multiple_fusions_fpga[intel_fpga]
tests/transformations/mapfusion_fpga_test.py::test_fusion_with_transient_fpga[xilinx]
tests/transformations/mapfusion_fpga_test.py::test_fusion_with_transient_fpga[intel_fpga]
tests/transformations/mapfusion_fpga_test.py::test_fusion_with_transient_fpga_decoupled[xilinx]
  /usr/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=43274) is multi-threaded, use of fork() may lead to deadlocks in the child.
    self.pid = os.fork()

tests/transformations/map_interchange_test.py::test_map_interchange_with_dynamic_map_inputs
  /home/primrose/Work/dace/dace/sdfg/propagation.py:1448: UserWarning: Cannot find appropriate memlet pattern to propagate kB through __map_67_b0:__map_67_e1
    warnings.warn('Cannot find appropriate memlet pattern to '

tests/transformations/move_loop_into_map_test.py::MoveLoopIntoMapTest::test_non_injective_index
  /home/primrose/Work/dace/dace/sdfg/validation.py:516: UserWarning: WARNING: Use of uninitialized transient "a" in state for_50_MapState
    warnings.warn('WARNING: Use of uninitialized transient "%s" in state %s' %

tests/transformations/nest_subgraph_test.py::test_symbolic_return
  /home/primrose/Work/dace/dace/sdfg/nodes.py:706: UserWarning: nested_sdfg maps to unused symbol(s): {'a'}
    warnings.warn(f"{self.label} maps to unused symbol(s): {extra_symbols}")

tests/transformations/nest_subgraph_test.py::test_nest_cf_simple_while_loop
  /home/primrose/Work/dace/dace/frontend/python/newast.py:4580: UserWarning: Performance warning: Automatically creating callback to Python interpreter from method "update". If you would like to know why parsing failed, please place a @dace.program decorator on the function. If a DaCe function cannot be provided (for example, due to recursion), register a replacement through "dace.frontend.common.op_repository".
    warnings.warn('Performance warning: Automatically creating '

tests/transformations/nest_subgraph_test.py::test_nest_cf_simple_while_loop
  /home/primrose/Work/dace/dace/sdfg/nodes.py:706: UserWarning: nested_sdfg maps to unused symbol(s): {'__tmp2'}
    warnings.warn(f"{self.label} maps to unused symbol(s): {extra_symbols}")

tests/transformations/redundant_copy_test.py::test_out_failure_subset_mismatch
  /home/primrose/Work/dace/dace/transformation/dataflow/redundant_array.py:713: UserWarning: validate_subsets failed: Destination subset is missing (src_subset: 0, 0:3, 2:5, dst_shape: (8, 8)
    warnings.warn(f'validate_subsets failed: {ex}')

tests/transformations/redundant_copy_test.py::test_invalid_redundant_array_strided[F]
  /home/primrose/Work/dace/dace/sdfg/sdfg.py:2291: UserWarning: SDFG "redundant_copy_test_flip_and_flatten" is already loaded by another object, recompiling under a different name.
    warnings.warn('SDFG "%s" is already loaded by another object, '

tests/transformations/tasklet_fusion_test.py::test_tasklet_fusion_multiline
  /home/primrose/Work/dace/dace/codegen/compiled_sdfg.py:560: UserWarning: Casting scalar argument "A" from int to <class 'numpy.float32'>
    warnings.warn(f'Casting scalar argument "{a}" from {type(arg).__name__} to {atype.dtype.type}')

tests/transformations/warp_tiling_test.py::test_warp_softmax
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "dn1", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

tests/transformations/warp_tiling_test.py::test_warp_softmax
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "dn2", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

tests/transformations/warp_tiling_test.py::test_warp_softmax
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "dn3", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

tests/transformations/warp_tiling_test.py::test_warp_softmax
  /home/primrose/Work/dace/dace/sdfg/validation.py:246: UserWarning: Mismatch between constant and symobl type of "dr", expected to find "Scalar (dtype=long long)" but found "int".
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m=========================== short test summary info ============================[0m
[31mFAILED[0m cuda_highdim_kernel_test.py::[1mtest_gpu[0m - UnboundLocalError: cannot access local variable 'condition' where it is not...
[31mFAILED[0m cuda_smem2d_test.py::[1mtest_gpu_localstorage[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m cuda_smem2d_test.py::[1mtest_gpu_2localstorage[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m cuda_smem2d_test.py::[1mtest_gpu_2shared_for[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m cuda_smem2d_test.py::[1mtest_gpu_2shared_map[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m dynamic_tb_map_cudatest.py::[1mtest_dynamic_map[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m dynamic_tb_map_cudatest.py::[1mtest_nested_dynamic_map[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m dynamic_tb_map_cudatest.py::[1mtest_dynamic_map_with_step[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_explicit[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_explicit_vec[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_implicit[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_inference[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_swapped[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_no_entry[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_double_entry[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_double_return[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_llvm_dialect[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_float[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_recursion[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_long_name[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m mlir_tasklet_test.py::[1mtest_mlir_tasklet_no_input[0m - ImportError: To use MLIR tasklets, please install the "pymlir" package.
[31mFAILED[0m persistent_map_cudatest.py::[1mtest_persistent_dynamic_map[0m - dace.codegen.exceptions.CompilationError: Compiler failure:
[31mFAILED[0m transformations/map_distribution_test.py::[1mtest_eao_mpi[0m - ModuleNotFoundError: No module named 'mpi4py'
[31mFAILED[0m transformations/mapfusion_fpga_test.py::[1mtest_multiple_fusions_fpga[xilinx][0m - dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
[31mFAILED[0m transformations/mapfusion_fpga_test.py::[1mtest_multiple_fusions_fpga[intel_fpga][0m - dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
[31mFAILED[0m transformations/mapfusion_fpga_test.py::[1mtest_fusion_with_transient_fpga[xilinx][0m - dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
[31mFAILED[0m transformations/mapfusion_fpga_test.py::[1mtest_fusion_with_transient_fpga[intel_fpga][0m - dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
[31mFAILED[0m transformations/mapfusion_fpga_test.py::[1mtest_fusion_with_transient_fpga_decoupled[xilinx][0m - dace.codegen.exceptions.CompilerConfigurationError: Configuration failure:
[31mFAILED[0m transformations/nested_copies_among_connectors.py::[1mtest_outconn_self_copy[0m - NameError: name 'xforms' is not defined
[31mFAILED[0m transformations/nested_copies_among_connectors.py::[1mtest_in_out_inconn_copy[0m - NameError: name 'xforms' is not defined
[31mFAILED[0m transformations/nested_copies_among_connectors.py::[1mtest_intermediate_copies[0m - NameError: name 'xforms' is not defined
[31mFAILED[0m transformations/otf_map_fusion_test.py::[1mtest_matmuls[0m - assert False
[31m===== [31m[1m32 failed[0m, [32m640 passed[0m, [33m6 skipped[0m, [33m281 warnings[0m[31m in 877.30s (0:14:37)[0m[31m ======[0m
ok 11.000000
