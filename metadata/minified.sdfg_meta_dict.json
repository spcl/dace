{"__reverse_type_lookup__": {"typeclass": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "tuple": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "bool": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "StorageType": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "AllocationLifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "dict": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "DebugInfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "OrderedDictProperty": {"metatype": "OrderedDictProperty", "desc": "Dictionary of structure members", "category": "General", "default": []}, "str": {"metatype": "str", "desc": "Structure type name", "category": "General", "default": ""}, "list": {"metatype": "list", "desc": "", "category": "General", "default": [], "element_type": "TensorIndex"}, "SymbolicProperty": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 0}, "int": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "Data": {"metatype": "Data", "desc": "", "category": "General", "default": null}, "SubsetProperty": {"metatype": "SubsetProperty", "desc": "Subset of elements to move from the data attached to this edge.", "category": "General", "default": null}, "DataProperty": {"metatype": "DataProperty", "desc": "Data descriptor attached to this memlet", "category": "General", "default": null}, "LambdaProperty": {"metatype": "LambdaProperty", "desc": "If set, defines a write-conflict resolution lambda function. The syntax of the lambda function receives two elements: `current` value and `new` value, and returns the value after resolution", "category": "General", "default": null}, "DataInstrumentationType": {"metatype": "DataInstrumentationType", "desc": "Instrument data contents at this access", "category": "Instrumentation", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Save", "Restore"]}, "CodeBlock": {"metatype": "CodeBlock", "desc": "Condition under which to trigger the instrumentation", "category": "Instrumentation", "default": {"string_data": "1", "language": "CPP"}}, "set": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "InstrumentationType": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "SDFGReferenceProperty": {"metatype": "SDFGReferenceProperty", "desc": "The SDFG", "category": "General", "default": null}, "ScheduleType": {"metatype": "ScheduleType", "desc": "SDFG schedule", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "Range": {"metatype": "Range", "desc": "Ranges of map parameters", "category": "General", "default": {"type": "Range", "ranges": []}, "indirected": true}, "OMPScheduleType": {"metatype": "OMPScheduleType", "desc": "OpenMP schedule {static, dynamic, guided}", "category": "General", "default": "Default", "indirected": true, "choices": ["Default", "Static", "Dynamic", "Guided"]}, "LibraryImplementationProperty": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null}, "NestedDict": {"metatype": "NestedDict", "desc": "Data descriptors for this SDFG", "category": "General", "default": {}}, "OptionalSDFGReferenceProperty": {"metatype": "OptionalSDFGReferenceProperty", "desc": "", "category": "General", "default": null}, "Property": {"metatype": "Property", "desc": "A scalar which will be multiplied with A @ B before adding C", "category": "General", "default": 1}, "Number": {"metatype": "Number", "desc": "Input tensor scaling factor", "category": "General", "default": 1}, "TilingType": {"metatype": "TilingType", "desc": "normal: the outerloop increments with tile_size, ceilrange: uses ceiling(N/tile_size) in outer range, number_of_tiles: tiles the map into the number of provided tiles, provide the number of tiles over tile_size", "category": "General", "default": "Normal", "choices": ["Normal", "CeilRange", "NumberOfTiles"]}, "List": {"metatype": "List", "desc": "Describes how many times this array is split in each dimension, where the k-th number describes how many times dimension k is split. If the k-th number is 1 this means that the array is not split in the k-th dimension at all. If None, then the transform will split the first dimension exactly shape[0] times.", "category": "General", "default": null}, "type": {"metatype": "type", "desc": "Target to use for compilation", "category": "General", "default": null}, "DeviceType": {"category": "General", "metatype": "DeviceType", "choices": ["CPU", "GPU", "FPGA", "Snitch"]}, "Language": {"category": "General", "metatype": "Language", "choices": ["Python", "CPP", "OpenCL", "SystemVerilog", "MLIR"]}, "ReductionType": {"category": "General", "metatype": "ReductionType", "choices": ["Custom", "Min", "Max", "Sum", "Product", "Logical_And", "Bitwise_And", "Logical_Or", "Bitwise_Or", "Logical_Xor", "Bitwise_Xor", "Min_Location", "Max_Location", "Exchange", "Sub", "Div"]}, "Typeclasses": {"category": "General", "metatype": "Typeclasses", "choices": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"]}}, "__libs__": {"MatMul": "dace.libraries.blas.nodes.matmul.MatMul", "Dot": "dace.libraries.blas.nodes.dot.Dot", "Gemv": "dace.libraries.blas.nodes.gemv.Gemv", "Gemm": "dace.libraries.blas.nodes.gemm.Gemm", "Ger": "dace.libraries.blas.nodes.ger.Ger", "BatchedMatMul": "dace.libraries.blas.nodes.batched_matmul.BatchedMatMul", "Axpy": "dace.libraries.blas.nodes.axpy.Axpy", "Einsum": "dace.libraries.blas.nodes.einsum.Einsum", "CodeLibraryNode": "dace.libraries.standard.nodes.code.CodeLibraryNode", "Gearbox": "dace.libraries.standard.nodes.gearbox.Gearbox", "Reduce": "dace.libraries.standard.nodes.reduce.Reduce", "Transpose": "dace.libraries.standard.nodes.transpose.Transpose", "TensorTranspose": "dace.libraries.standard.nodes.ttranspose.TensorTranspose"}, "__data_container_types__": {"Structure": "Structure", "Tensor": "Tensor", "Scalar": "Scalar", "Array": "Array", "Stream": "Stream", "ContainerArray": "ContainerArray", "ArrayView": "ArrayView", "StructureView": "StructureView", "ContainerView": "ContainerView", "ArrayReference": "ArrayReference", "StructureReference": "StructureReference", "ContainerArrayReference": "ContainerArrayReference"}, "Data": {"dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "Structure": {"members": {"metatype": "OrderedDictProperty", "desc": "Dictionary of structure members", "category": "General", "default": []}, "name": {"metatype": "str", "desc": "Structure type name", "category": "General", "default": ""}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "TensorIndexDense": {"_ordered": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_unique": {"metatype": "bool", "desc": "", "category": "General", "default": false}}, "TensorIndexCompressed": {"_full": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_ordered": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_unique": {"metatype": "bool", "desc": "", "category": "General", "default": false}}, "TensorIndexSingleton": {"_full": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_ordered": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_unique": {"metatype": "bool", "desc": "", "category": "General", "default": false}}, "TensorIndexRange": {"_ordered": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_unique": {"metatype": "bool", "desc": "", "category": "General", "default": false}}, "TensorIndexOffset": {"_ordered": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "_unique": {"metatype": "bool", "desc": "", "category": "General", "default": false}}, "Tensor": {"value_dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "tensor_shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "indices": {"metatype": "list", "desc": "", "category": "General", "default": [], "element_type": "TensorIndex"}, "index_ordering": {"metatype": "list", "desc": "", "category": "General", "default": [], "element_type": "SymExpr"}, "value_count": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 0}, "members": {"metatype": "OrderedDictProperty", "desc": "Dictionary of structure members", "category": "General", "default": []}, "name": {"metatype": "str", "desc": "Structure type name", "category": "General", "default": ""}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "Scalar": {"allow_conflicts": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "Array": {"allow_conflicts": {"metatype": "bool", "desc": "If enabled, allows more than one memlet to write to the same memory location without conflict resolution.", "category": "General", "default": false}, "strides": {"metatype": "tuple", "desc": "For each dimension, the number of elements to skip in order to obtain the next element in that dimension.", "category": "General", "default": []}, "total_size": {"metatype": "SymbolicProperty", "desc": "The total allocated size of the array. Can be used for padding.", "category": "General", "default": 0}, "offset": {"metatype": "tuple", "desc": "Initial offset to translate all indices by.", "category": "General", "default": []}, "may_alias": {"metatype": "bool", "desc": "This pointer may alias with other pointers in the same function", "category": "General", "default": false}, "alignment": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "start_offset": {"metatype": "int", "desc": "Allocation offset elements for manual alignment (pre-padding)", "category": "General", "default": 0}, "optional": {"metatype": "bool", "desc": "Specifies whether this array may have a value of None. If False, the array must not be None. If option is not set, it is inferred by other properties and the OptionalArrayInference pass.", "category": "General", "default": null}, "pool": {"metatype": "bool", "desc": "Hint to the allocator that using a memory pool is preferred", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "Stream": {"offset": {"metatype": "list", "desc": "", "category": "General", "default": [], "element_type": "pystr_to_symbolic"}, "buffer_size": {"metatype": "SymbolicProperty", "desc": "Size of internal buffer.", "category": "General", "default": 0}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "ContainerArray": {"stype": {"metatype": "Data", "desc": "", "category": "General", "default": null}, "allow_conflicts": {"metatype": "bool", "desc": "If enabled, allows more than one memlet to write to the same memory location without conflict resolution.", "category": "General", "default": false}, "strides": {"metatype": "tuple", "desc": "For each dimension, the number of elements to skip in order to obtain the next element in that dimension.", "category": "General", "default": []}, "total_size": {"metatype": "SymbolicProperty", "desc": "The total allocated size of the array. Can be used for padding.", "category": "General", "default": 0}, "offset": {"metatype": "tuple", "desc": "Initial offset to translate all indices by.", "category": "General", "default": []}, "may_alias": {"metatype": "bool", "desc": "This pointer may alias with other pointers in the same function", "category": "General", "default": false}, "alignment": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "start_offset": {"metatype": "int", "desc": "Allocation offset elements for manual alignment (pre-padding)", "category": "General", "default": 0}, "optional": {"metatype": "bool", "desc": "Specifies whether this array may have a value of None. If False, the array must not be None. If option is not set, it is inferred by other properties and the OptionalArrayInference pass.", "category": "General", "default": null}, "pool": {"metatype": "bool", "desc": "Hint to the allocator that using a memory pool is preferred", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "ArrayView": {"allow_conflicts": {"metatype": "bool", "desc": "If enabled, allows more than one memlet to write to the same memory location without conflict resolution.", "category": "General", "default": false}, "strides": {"metatype": "tuple", "desc": "For each dimension, the number of elements to skip in order to obtain the next element in that dimension.", "category": "General", "default": []}, "total_size": {"metatype": "SymbolicProperty", "desc": "The total allocated size of the array. Can be used for padding.", "category": "General", "default": 0}, "offset": {"metatype": "tuple", "desc": "Initial offset to translate all indices by.", "category": "General", "default": []}, "may_alias": {"metatype": "bool", "desc": "This pointer may alias with other pointers in the same function", "category": "General", "default": false}, "alignment": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "start_offset": {"metatype": "int", "desc": "Allocation offset elements for manual alignment (pre-padding)", "category": "General", "default": 0}, "optional": {"metatype": "bool", "desc": "Specifies whether this array may have a value of None. If False, the array must not be None. If option is not set, it is inferred by other properties and the OptionalArrayInference pass.", "category": "General", "default": null}, "pool": {"metatype": "bool", "desc": "Hint to the allocator that using a memory pool is preferred", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "StructureView": {"members": {"metatype": "OrderedDictProperty", "desc": "Dictionary of structure members", "category": "General", "default": []}, "name": {"metatype": "str", "desc": "Structure type name", "category": "General", "default": ""}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "ContainerView": {"stype": {"metatype": "Data", "desc": "", "category": "General", "default": null}, "allow_conflicts": {"metatype": "bool", "desc": "If enabled, allows more than one memlet to write to the same memory location without conflict resolution.", "category": "General", "default": false}, "strides": {"metatype": "tuple", "desc": "For each dimension, the number of elements to skip in order to obtain the next element in that dimension.", "category": "General", "default": []}, "total_size": {"metatype": "SymbolicProperty", "desc": "The total allocated size of the array. Can be used for padding.", "category": "General", "default": 0}, "offset": {"metatype": "tuple", "desc": "Initial offset to translate all indices by.", "category": "General", "default": []}, "may_alias": {"metatype": "bool", "desc": "This pointer may alias with other pointers in the same function", "category": "General", "default": false}, "alignment": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "start_offset": {"metatype": "int", "desc": "Allocation offset elements for manual alignment (pre-padding)", "category": "General", "default": 0}, "optional": {"metatype": "bool", "desc": "Specifies whether this array may have a value of None. If False, the array must not be None. If option is not set, it is inferred by other properties and the OptionalArrayInference pass.", "category": "General", "default": null}, "pool": {"metatype": "bool", "desc": "Hint to the allocator that using a memory pool is preferred", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "ArrayReference": {"allow_conflicts": {"metatype": "bool", "desc": "If enabled, allows more than one memlet to write to the same memory location without conflict resolution.", "category": "General", "default": false}, "strides": {"metatype": "tuple", "desc": "For each dimension, the number of elements to skip in order to obtain the next element in that dimension.", "category": "General", "default": []}, "total_size": {"metatype": "SymbolicProperty", "desc": "The total allocated size of the array. Can be used for padding.", "category": "General", "default": 0}, "offset": {"metatype": "tuple", "desc": "Initial offset to translate all indices by.", "category": "General", "default": []}, "may_alias": {"metatype": "bool", "desc": "This pointer may alias with other pointers in the same function", "category": "General", "default": false}, "alignment": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "start_offset": {"metatype": "int", "desc": "Allocation offset elements for manual alignment (pre-padding)", "category": "General", "default": 0}, "optional": {"metatype": "bool", "desc": "Specifies whether this array may have a value of None. If False, the array must not be None. If option is not set, it is inferred by other properties and the OptionalArrayInference pass.", "category": "General", "default": null}, "pool": {"metatype": "bool", "desc": "Hint to the allocator that using a memory pool is preferred", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "StructureReference": {"members": {"metatype": "OrderedDictProperty", "desc": "Dictionary of structure members", "category": "General", "default": []}, "name": {"metatype": "str", "desc": "Structure type name", "category": "General", "default": ""}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "ContainerArrayReference": {"stype": {"metatype": "Data", "desc": "", "category": "General", "default": null}, "allow_conflicts": {"metatype": "bool", "desc": "If enabled, allows more than one memlet to write to the same memory location without conflict resolution.", "category": "General", "default": false}, "strides": {"metatype": "tuple", "desc": "For each dimension, the number of elements to skip in order to obtain the next element in that dimension.", "category": "General", "default": []}, "total_size": {"metatype": "SymbolicProperty", "desc": "The total allocated size of the array. Can be used for padding.", "category": "General", "default": 0}, "offset": {"metatype": "tuple", "desc": "Initial offset to translate all indices by.", "category": "General", "default": []}, "may_alias": {"metatype": "bool", "desc": "This pointer may alias with other pointers in the same function", "category": "General", "default": false}, "alignment": {"metatype": "int", "desc": "Allocation alignment in bytes (0 uses compiler-default)", "category": "General", "default": 0}, "start_offset": {"metatype": "int", "desc": "Allocation offset elements for manual alignment (pre-padding)", "category": "General", "default": 0}, "optional": {"metatype": "bool", "desc": "Specifies whether this array may have a value of None. If False, the array must not be None. If option is not set, it is inferred by other properties and the OptionalArrayInference pass.", "category": "General", "default": null}, "pool": {"metatype": "bool", "desc": "Hint to the allocator that using a memory pool is preferred", "category": "General", "default": false}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "", "category": "General", "default": []}, "transient": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "storage": {"metatype": "StorageType", "desc": "Storage location", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "lifetime": {"metatype": "AllocationLifetime", "desc": "Data allocation span", "category": "General", "default": "Scope", "choices": ["Scope", "State", "SDFG", "Global", "Persistent", "External"]}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}}, "Memlet": {"volume": {"metatype": "SymbolicProperty", "desc": "The exact number of elements moved using this memlet, or the maximum number if dynamic=True (with 0 as unbounded)", "category": "General", "default": 0}, "dynamic": {"metatype": "bool", "desc": "Is the number of elements moved determined at runtime (e.g., data dependent)", "category": "General", "default": false}, "subset": {"metatype": "SubsetProperty", "desc": "Subset of elements to move from the data attached to this edge.", "category": "General", "default": null}, "other_subset": {"metatype": "SubsetProperty", "desc": "Subset of elements after reindexing to the data not attached to this edge (e.g., for offsets and reshaping).", "category": "General", "default": null}, "data": {"metatype": "DataProperty", "desc": "Data descriptor attached to this memlet", "category": "General", "default": null}, "wcr": {"metatype": "LambdaProperty", "desc": "If set, defines a write-conflict resolution lambda function. The syntax of the lambda function receives two elements: `current` value and `new` value, and returns the value after resolution", "category": "General", "default": null}, "debuginfo": {"metatype": "DebugInfo", "desc": "Line information to track source and generated code", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "wcr_nonatomic": {"metatype": "bool", "desc": "If True, always generates non-conflicting (non-atomic) writes in resulting code", "category": "General", "default": false}, "allow_oob": {"metatype": "bool", "desc": "Bypass out-of-bounds validation", "category": "General", "default": false}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "Node": {"in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "AccessNode": {"setzero": {"metatype": "bool", "desc": "Initialize to zero", "category": "General", "default": false}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "data": {"metatype": "DataProperty", "desc": "Data (array, stream, scalar) to access", "category": "General", "default": null}, "instrument": {"metatype": "DataInstrumentationType", "desc": "Instrument data contents at this access", "category": "Instrumentation", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Save", "Restore"]}, "instrument_condition": {"metatype": "CodeBlock", "desc": "Condition under which to trigger the instrumentation", "category": "Instrumentation", "default": {"string_data": "1", "language": "CPP"}}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "CodeNode": {"label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "Tasklet": {"code": {"metatype": "CodeBlock", "desc": "Tasklet code", "category": "General", "default": {"string_data": "", "language": "Python"}}, "state_fields": {"metatype": "list", "desc": "Fields that are added to the global state", "category": "General", "default": [], "element_type": "str"}, "code_global": {"metatype": "CodeBlock", "desc": "Global scope code needed for tasklet execution", "category": "General", "default": {"string_data": "", "language": "CPP"}}, "code_init": {"metatype": "CodeBlock", "desc": "Extra code that is called on DaCe runtime initialization", "category": "General", "default": {"string_data": "", "language": "CPP"}}, "code_exit": {"metatype": "CodeBlock", "desc": "Extra code that is called on DaCe runtime cleanup", "category": "General", "default": {"string_data": "", "language": "CPP"}}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "side_effects": {"metatype": "bool", "desc": "If True, this tasklet calls a function that may have additional side effects on the system state (e.g., callback). Defaults to None, which lets the framework make assumptions based on the tasklet contents", "category": "General", "default": null}, "ignored_symbols": {"metatype": "set", "desc": "A set of symbols to ignore when computing the symbols used by this tasklet. Used to skip certain symbols in non-Python tasklets, where only string analysis is possible; and to skip globals in Python tasklets that should not be given as parameters to the SDFG.", "category": "General", "default": []}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "RTLTasklet": {"ip_cores": {"metatype": "dict", "desc": "A set of IP cores used by the tasklet.", "category": "General", "default": {}, "key_type": "str", "value_type": "dict"}, "code": {"metatype": "CodeBlock", "desc": "Tasklet code", "category": "General", "default": {"string_data": "", "language": "Python"}}, "state_fields": {"metatype": "list", "desc": "Fields that are added to the global state", "category": "General", "default": [], "element_type": "str"}, "code_global": {"metatype": "CodeBlock", "desc": "Global scope code needed for tasklet execution", "category": "General", "default": {"string_data": "", "language": "CPP"}}, "code_init": {"metatype": "CodeBlock", "desc": "Extra code that is called on DaCe runtime initialization", "category": "General", "default": {"string_data": "", "language": "CPP"}}, "code_exit": {"metatype": "CodeBlock", "desc": "Extra code that is called on DaCe runtime cleanup", "category": "General", "default": {"string_data": "", "language": "CPP"}}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "side_effects": {"metatype": "bool", "desc": "If True, this tasklet calls a function that may have additional side effects on the system state (e.g., callback). Defaults to None, which lets the framework make assumptions based on the tasklet contents", "category": "General", "default": null}, "ignored_symbols": {"metatype": "set", "desc": "A set of symbols to ignore when computing the symbols used by this tasklet. Used to skip certain symbols in non-Python tasklets, where only string analysis is possible; and to skip globals in Python tasklets that should not be given as parameters to the SDFG.", "category": "General", "default": []}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "NestedSDFG": {"sdfg": {"metatype": "SDFGReferenceProperty", "desc": "The SDFG", "category": "General", "default": null}, "ext_sdfg_path": {"metatype": "str", "desc": "Path to a file containing the SDFG for this nested SDFG", "category": "General", "default": null}, "schedule": {"metatype": "ScheduleType", "desc": "SDFG schedule", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "symbol_mapping": {"metatype": "dict", "desc": "Mapping between internal symbols and their values, expressed as symbolic expressions", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "no_inline": {"metatype": "bool", "desc": "If True, this nested SDFG will not be inlined during simplification", "category": "General", "default": false}, "unique_name": {"metatype": "str", "desc": "Unique name of the SDFG", "category": "General", "default": ""}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "MapEntry": {"label": {"metatype": "str", "desc": "Label of the map", "category": "General", "default": "", "indirected": true}, "params": {"metatype": "list", "desc": "Mapped parameters", "category": "General", "default": [], "indirected": true, "element_type": "str"}, "range": {"metatype": "Range", "desc": "Ranges of map parameters", "category": "General", "default": {"type": "Range", "ranges": []}, "indirected": true}, "schedule": {"metatype": "ScheduleType", "desc": "Map schedule", "category": "General", "default": "Default", "indirected": true, "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "unroll": {"metatype": "bool", "desc": "Map unrolling", "category": "General", "default": false, "indirected": true}, "unroll_factor": {"metatype": "int", "desc": "How much iterations should be unrolled. To prevent unrolling, set this value to 1.", "category": "General", "default": 0, "indirected": true}, "collapse": {"metatype": "int", "desc": "How many dimensions to collapse into the parallel range", "category": "General", "default": 1, "indirected": true}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}, "indirected": true}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false, "indirected": true}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "indirected": true, "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "omp_num_threads": {"metatype": "int", "desc": "Number of OpenMP threads executing the Map", "category": "General", "default": 0, "indirected": true}, "omp_schedule": {"metatype": "OMPScheduleType", "desc": "OpenMP schedule {static, dynamic, guided}", "category": "General", "default": "Default", "indirected": true, "choices": ["Default", "Static", "Dynamic", "Guided"]}, "omp_chunk_size": {"metatype": "int", "desc": "OpenMP schedule chunk size", "category": "General", "default": 0, "indirected": true}, "gpu_block_size": {"metatype": "list", "desc": "GPU kernel block size", "category": "General", "default": null, "indirected": true, "element_type": "int"}, "gpu_launch_bounds": {"metatype": "str", "desc": "GPU kernel launch bounds. A value of -1 disables the statement, 0 (default) enables the statement if block size is not symbolic, and any other value (including tuples) sets it explicitly.", "category": "General", "default": "0", "indirected": true}, "gpu_force_syncthreads": {"metatype": "bool", "desc": "Force a call to the __syncthreads for the map", "category": "General", "default": false, "indirected": true}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "MapExit": {"in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "Map": {"label": {"metatype": "str", "desc": "Label of the map", "category": "General", "default": ""}, "params": {"metatype": "list", "desc": "Mapped parameters", "category": "General", "default": [], "element_type": "str"}, "range": {"metatype": "Range", "desc": "Ranges of map parameters", "category": "General", "default": {"type": "Range", "ranges": []}}, "schedule": {"metatype": "ScheduleType", "desc": "Map schedule", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "unroll": {"metatype": "bool", "desc": "Map unrolling", "category": "General", "default": false}, "unroll_factor": {"metatype": "int", "desc": "How much iterations should be unrolled. To prevent unrolling, set this value to 1.", "category": "General", "default": 0}, "collapse": {"metatype": "int", "desc": "How many dimensions to collapse into the parallel range", "category": "General", "default": 1}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "omp_num_threads": {"metatype": "int", "desc": "Number of OpenMP threads executing the Map", "category": "General", "default": 0}, "omp_schedule": {"metatype": "OMPScheduleType", "desc": "OpenMP schedule {static, dynamic, guided}", "category": "General", "default": "Default", "choices": ["Default", "Static", "Dynamic", "Guided"]}, "omp_chunk_size": {"metatype": "int", "desc": "OpenMP schedule chunk size", "category": "General", "default": 0}, "gpu_block_size": {"metatype": "list", "desc": "GPU kernel block size", "category": "General", "default": null, "element_type": "int"}, "gpu_launch_bounds": {"metatype": "str", "desc": "GPU kernel launch bounds. A value of -1 disables the statement, 0 (default) enables the statement if block size is not symbolic, and any other value (including tuples) sets it explicitly.", "category": "General", "default": "0"}, "gpu_force_syncthreads": {"metatype": "bool", "desc": "Force a call to the __syncthreads for the map", "category": "General", "default": false}}, "ConsumeEntry": {"label": {"metatype": "str", "desc": "Name of the consume node", "category": "General", "default": "", "indirected": true}, "pe_index": {"metatype": "str", "desc": "Processing element identifier", "category": "General", "default": "", "indirected": true}, "num_pes": {"metatype": "SymbolicProperty", "desc": "Number of processing elements", "category": "General", "default": 1, "indirected": true}, "condition": {"metatype": "CodeBlock", "desc": "Quiescence condition", "category": "General", "default": null, "indirected": true}, "schedule": {"metatype": "ScheduleType", "desc": "Consume schedule", "category": "General", "default": "Default", "indirected": true, "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "chunksize": {"metatype": "int", "desc": "Maximal size of elements to consume at a time", "category": "General", "default": 1, "indirected": true}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}, "indirected": true}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false, "indirected": true}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "indirected": true, "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ConsumeExit": {"in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "Consume": {"label": {"metatype": "str", "desc": "Name of the consume node", "category": "General", "default": ""}, "pe_index": {"metatype": "str", "desc": "Processing element identifier", "category": "General", "default": ""}, "num_pes": {"metatype": "SymbolicProperty", "desc": "Number of processing elements", "category": "General", "default": 1}, "condition": {"metatype": "CodeBlock", "desc": "Quiescence condition", "category": "General", "default": null}, "schedule": {"metatype": "ScheduleType", "desc": "Consume schedule", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "chunksize": {"metatype": "int", "desc": "Maximal size of elements to consume at a time", "category": "General", "default": 1}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}}, "PipelineEntry": {"init_size": {"metatype": "SymbolicProperty", "desc": "Number of initialization iterations.", "category": "General", "default": 0, "indirected": true}, "init_overlap": {"metatype": "bool", "desc": "Whether to increment regular map indices during initialization.", "category": "General", "default": true, "indirected": true}, "drain_size": {"metatype": "SymbolicProperty", "desc": "Number of drain iterations.", "category": "General", "default": 1, "indirected": true}, "drain_overlap": {"metatype": "bool", "desc": "Whether to increment regular map indices during pipeline drain.", "category": "General", "default": true, "indirected": true}, "additional_iterators": {"metatype": "dict", "desc": "Additional iterators, managed by the user inside the scope.", "category": "General", "default": {}, "indirected": true}, "label": {"metatype": "str", "desc": "Label of the map", "category": "General", "default": "", "indirected": true}, "params": {"metatype": "list", "desc": "Mapped parameters", "category": "General", "default": [], "indirected": true, "element_type": "str"}, "range": {"metatype": "Range", "desc": "Ranges of map parameters", "category": "General", "default": {"type": "Range", "ranges": []}, "indirected": true}, "schedule": {"metatype": "ScheduleType", "desc": "Map schedule", "category": "General", "default": "Default", "indirected": true, "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "unroll": {"metatype": "bool", "desc": "Map unrolling", "category": "General", "default": false, "indirected": true}, "unroll_factor": {"metatype": "int", "desc": "How much iterations should be unrolled. To prevent unrolling, set this value to 1.", "category": "General", "default": 0, "indirected": true}, "collapse": {"metatype": "int", "desc": "How many dimensions to collapse into the parallel range", "category": "General", "default": 1, "indirected": true}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}, "indirected": true}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false, "indirected": true}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "indirected": true, "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "omp_num_threads": {"metatype": "int", "desc": "Number of OpenMP threads executing the Map", "category": "General", "default": 0, "indirected": true}, "omp_schedule": {"metatype": "OMPScheduleType", "desc": "OpenMP schedule {static, dynamic, guided}", "category": "General", "default": "Default", "indirected": true, "choices": ["Default", "Static", "Dynamic", "Guided"]}, "omp_chunk_size": {"metatype": "int", "desc": "OpenMP schedule chunk size", "category": "General", "default": 0, "indirected": true}, "gpu_block_size": {"metatype": "list", "desc": "GPU kernel block size", "category": "General", "default": null, "indirected": true, "element_type": "int"}, "gpu_launch_bounds": {"metatype": "str", "desc": "GPU kernel launch bounds. A value of -1 disables the statement, 0 (default) enables the statement if block size is not symbolic, and any other value (including tuples) sets it explicitly.", "category": "General", "default": "0", "indirected": true}, "gpu_force_syncthreads": {"metatype": "bool", "desc": "Force a call to the __syncthreads for the map", "category": "General", "default": false, "indirected": true}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "PipelineExit": {"in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "PipelineScope": {"init_size": {"metatype": "SymbolicProperty", "desc": "Number of initialization iterations.", "category": "General", "default": 0}, "init_overlap": {"metatype": "bool", "desc": "Whether to increment regular map indices during initialization.", "category": "General", "default": true}, "drain_size": {"metatype": "SymbolicProperty", "desc": "Number of drain iterations.", "category": "General", "default": 1}, "drain_overlap": {"metatype": "bool", "desc": "Whether to increment regular map indices during pipeline drain.", "category": "General", "default": true}, "additional_iterators": {"metatype": "dict", "desc": "Additional iterators, managed by the user inside the scope.", "category": "General", "default": {}}, "label": {"metatype": "str", "desc": "Label of the map", "category": "General", "default": ""}, "params": {"metatype": "list", "desc": "Mapped parameters", "category": "General", "default": [], "element_type": "str"}, "range": {"metatype": "Range", "desc": "Ranges of map parameters", "category": "General", "default": {"type": "Range", "ranges": []}}, "schedule": {"metatype": "ScheduleType", "desc": "Map schedule", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "unroll": {"metatype": "bool", "desc": "Map unrolling", "category": "General", "default": false}, "unroll_factor": {"metatype": "int", "desc": "How much iterations should be unrolled. To prevent unrolling, set this value to 1.", "category": "General", "default": 0}, "collapse": {"metatype": "int", "desc": "How many dimensions to collapse into the parallel range", "category": "General", "default": 1}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "is_collapsed": {"metatype": "bool", "desc": "Show this node/scope/state as collapsed", "category": "General", "default": false}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "omp_num_threads": {"metatype": "int", "desc": "Number of OpenMP threads executing the Map", "category": "General", "default": 0}, "omp_schedule": {"metatype": "OMPScheduleType", "desc": "OpenMP schedule {static, dynamic, guided}", "category": "General", "default": "Default", "choices": ["Default", "Static", "Dynamic", "Guided"]}, "omp_chunk_size": {"metatype": "int", "desc": "OpenMP schedule chunk size", "category": "General", "default": 0}, "gpu_block_size": {"metatype": "list", "desc": "GPU kernel block size", "category": "General", "default": null, "element_type": "int"}, "gpu_launch_bounds": {"metatype": "str", "desc": "GPU kernel launch bounds. A value of -1 disables the statement, 0 (default) enables the statement if block size is not symbolic, and any other value (including tuples) sets it explicitly.", "category": "General", "default": "0"}, "gpu_force_syncthreads": {"metatype": "bool", "desc": "Force a call to the __syncthreads for the map", "category": "General", "default": false}}, "LibraryNode": {"name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "DataflowGraphView": {}, "ControlGraphView": {}, "GlobalDepAccessEntry": {"node_id": {"metatype": "int", "desc": "ID of the node describing the access (access node, or CFG block). None if the access is on an interstate edge or meta access.", "category": "General", "default": null}, "edge_id": {"metatype": "int", "desc": "ID of the edge for the access. None if the access node is a CFG block.", "category": "General", "default": null}}, "GlobalDepDataRecord": {"subset": {"metatype": "SubsetProperty", "desc": "Subset of the data involved in the dependency entry", "category": "General", "default": null}, "dynamic": {"metatype": "bool", "desc": "", "category": "General", "default": false}, "volume": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 0}, "accesses": {"metatype": "list", "desc": "Accesses involved in this dependency", "category": "General", "default": [], "element_type": "GlobalDepAccessEntry"}}, "ControlFlowBlock": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "SDFGState": {"nosync": {"metatype": "bool", "desc": "Do not synchronize at the end of the state", "category": "General", "default": false}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "symbol_instrument": {"metatype": "DataInstrumentationType", "desc": "Instrument symbol values when this state is executed", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Save", "Restore"]}, "symbol_instrument_condition": {"metatype": "CodeBlock", "desc": "Condition under which to trigger the symbol instrumentation", "category": "General", "default": {"string_data": "1", "language": "CPP"}}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "ContinueBlock": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "BreakBlock": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "ReturnBlock": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "AbstractControlFlowRegion": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "ControlFlowRegion": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "LoopRegion": {"update_statement": {"metatype": "CodeBlock", "desc": "The loop update statement. May be None if the update happens elsewhere.", "category": "General", "default": null}, "init_statement": {"metatype": "CodeBlock", "desc": "The loop init statement. May be None if the initialization happens elsewhere.", "category": "General", "default": null}, "loop_condition": {"metatype": "CodeBlock", "desc": "The loop condition", "category": "General", "default": null}, "inverted": {"metatype": "bool", "desc": "If True, the loop condition is checked after the first iteration.", "category": "General", "default": false}, "update_before_condition": {"metatype": "bool", "desc": "If False, the loop condition is checked before the update statement is executed. This only applies to inverted loops, turning them from a typical do-while style into a while(true) with a break before the update (at the end of an iteration) if the condition no longer holds.", "category": "General", "default": true}, "loop_variable": {"metatype": "str", "desc": "The loop variable, if given", "category": "General", "default": ""}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "ConditionalBlock": {"guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "NamedRegion": {"debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "FunctionCallRegion": {"arguments": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "ProcessGrid": {"name": {"metatype": "str", "desc": "The process-grid's name.", "category": "General", "default": ""}, "is_subgrid": {"metatype": "bool", "desc": "If true, spanws sub-grids out of the parent process-grid.", "category": "General", "default": false}, "shape": {"metatype": "tuple", "desc": "The process-grid's shape.", "category": "General", "default": []}, "parent_grid": {"metatype": "str", "desc": "Name of the parent process-grid (mandatory if `is_subgrid` is true, otherwise ignored).", "category": "General", "default": null}, "color": {"metatype": "list", "desc": "The i-th entry specifies whether the i-th dimension is kept in the sub-grid or is dropped (mandatory if `is_subgrid` is true, otherwise ignored).", "category": "General", "default": null, "element_type": "int"}, "exact_grid": {"metatype": "SymbolicProperty", "desc": "If set then, out of all the sub-grids created, only the one that contains the rank with id `exact_grid` will be utilized for collective communication (optional if `is_subgrid` is true, otherwise ignored).", "category": "General", "default": null}, "root": {"metatype": "SymbolicProperty", "desc": "The root rank for collective communication.", "category": "General", "default": 0}}, "SubArray": {"name": {"metatype": "str", "desc": "The type's name.", "category": "General", "default": ""}, "dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": "int32", "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "shape": {"metatype": "tuple", "desc": "The array's shape.", "category": "General", "default": []}, "subshape": {"metatype": "tuple", "desc": "The sub-array's shape.", "category": "General", "default": []}, "pgrid": {"metatype": "str", "desc": "Name of the process-grid where the data are distributed.", "category": "General", "default": null}, "correspondence": {"metatype": "list", "desc": "Correspondence of the array's indices to the process grid's indices.", "category": "General", "default": null, "element_type": "int"}}, "RedistrArray": {"name": {"metatype": "str", "desc": "The redistribution's name.", "category": "General", "default": ""}, "array_a": {"metatype": "str", "desc": "Sub-array that will be redistributed.", "category": "General", "default": null}, "array_b": {"metatype": "str", "desc": "Output sub-array.", "category": "General", "default": null}}, "LogicalGroup": {"nodes": {"metatype": "list", "desc": "Nodes in this group given by [State, Node] id tuples", "category": "General", "default": [], "element_type": "tuple"}, "states": {"metatype": "list", "desc": "States in this group given by their ids", "category": "General", "default": [], "element_type": "int"}, "name": {"metatype": "str", "desc": "Logical group name", "category": "General", "default": ""}, "color": {"metatype": "str", "desc": "Color for the group, given as a hexadecimal string", "category": "General", "default": ""}}, "InterstateEdge": {"assignments": {"metatype": "dict", "desc": "Assignments to perform upon transition (e.g., 'x=x+1; y = 0')", "category": "General", "default": {}}, "condition": {"metatype": "CodeBlock", "desc": "Transition condition", "category": "General", "default": {"string_data": "1", "language": "Python"}}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "SDFG": {"name": {"metatype": "str", "desc": "Name of the SDFG", "category": "General", "default": ""}, "arg_names": {"metatype": "list", "desc": "Ordered argument names (used for calling conventions).", "category": "General", "default": [], "element_type": "str"}, "constants_prop": {"metatype": "dict", "desc": "Compile-time constants. The dictionary maps between a constant name to a tuple of its type and the actual constant data.", "category": "General", "default": {}}, "_arrays": {"metatype": "NestedDict", "desc": "Data descriptors for this SDFG", "category": "General", "default": {}}, "symbols": {"metatype": "dict", "desc": "Global symbols for this SDFG", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "instrument": {"metatype": "InstrumentationType", "desc": "Measure execution statistics with given method", "category": "General", "default": "No_Instrumentation", "choices": ["No_Instrumentation", "Timer", "PAPI_Counters", "LIKWID_CPU", "LIKWID_GPU", "GPU_Events", "FPGA"]}, "global_code": {"metatype": "dict", "desc": "Code generated in a global scope on the output files.", "category": "General", "default": {}, "key_type": "str", "value_type": "CodeBlock"}, "init_code": {"metatype": "dict", "desc": "Code generated in the `__dace_init` function.", "category": "General", "default": {}, "key_type": "str", "value_type": "CodeBlock"}, "exit_code": {"metatype": "dict", "desc": "Code generated in the `__dace_exit` function.", "category": "General", "default": {}, "key_type": "str", "value_type": "CodeBlock"}, "orig_sdfg": {"metatype": "OptionalSDFGReferenceProperty", "desc": "", "category": "General", "default": null}, "transformation_hist": {"metatype": "list", "desc": "", "category": "General", "default": []}, "logical_groups": {"metatype": "list", "desc": "Logical groupings of nodes and edges", "category": "General", "default": [], "element_type": "LogicalGroup"}, "openmp_sections": {"metatype": "bool", "desc": "Whether to generate OpenMP sections in code", "category": "General", "default": false}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "_pgrids": {"metatype": "dict", "desc": "Process-grid descriptors for this SDFG", "category": "General", "default": {}, "key_type": "str", "value_type": "ProcessGrid"}, "_subarrays": {"metatype": "dict", "desc": "Sub-array descriptors for this SDFG", "category": "General", "default": {}, "key_type": "str", "value_type": "SubArray"}, "_rdistrarrays": {"metatype": "dict", "desc": "Sub-array redistribution descriptors for this SDFG", "category": "General", "default": {}, "key_type": "str", "value_type": "RedistrArray"}, "callback_mapping": {"metatype": "dict", "desc": "Mapping between callback name and its original callback (for when the same callback is used with a different signature)", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "using_explicit_control_flow": {"metatype": "bool", "desc": "Whether the SDFG contains explicit control flow constructs", "category": "General", "default": false}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}, "is_collapsed": {"metatype": "bool", "desc": "Show this block as collapsed", "category": "General", "default": false}, "pre_conditions": {"metatype": "dict", "desc": "Pre-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "post_conditions": {"metatype": "dict", "desc": "Post-conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "invariant_conditions": {"metatype": "dict", "desc": "Invariant conditions for this block", "category": "General", "default": {}, "key_type": "str", "value_type": "list"}, "ranges": {"metatype": "dict", "desc": "Variable ranges across this block, typically within loops", "category": "General", "default": {}, "key_type": "str", "value_type": "Range"}, "executions": {"metatype": "SymbolicProperty", "desc": "The number of times this block gets executed (0 stands for unbounded)", "category": "General", "default": 0}, "dynamic_executions": {"metatype": "bool", "desc": "The number of executions of this block is dynamic", "category": "General", "default": true}, "certain_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_reads": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "certain_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}, "possible_writes": {"metatype": "dict", "desc": "", "category": "General", "default": {}, "key_type": "str", "value_type": "GlobalDepDataRecord"}}, "Pass": {}, "VisitorPass": {}, "StatePass": {"top_down": {"metatype": "bool", "desc": "Whether or not to apply top down (i.e., parents before children)", "category": "General", "default": false}}, "ControlFlowRegionPass": {"apply_to_conditionals": {"metatype": "bool", "desc": "Whether or not to apply to conditional blocks. If false, do not apply to conditional blocks, but only their children.", "category": "General", "default": false}, "top_down": {"metatype": "bool", "desc": "Whether or not to apply top down (i.e., parents before children)", "category": "General", "default": false}}, "ScopePass": {}, "Pipeline": {"passes": {"metatype": "list", "desc": "List of passes that this pipeline contains", "category": "(Debug)", "default": [], "element_type": "Pass"}}, "FixedPointPipeline": {"passes": {"metatype": "list", "desc": "List of passes that this pipeline contains", "category": "(Debug)", "default": [], "element_type": "Pass"}}, "PatternTransformation": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "SingleStateTransformation": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MultiStateTransformation": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandTransformation": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "SubgraphTransformation": {"cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "SpecializeMatMul": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.matmul.MatMul": {"alpha": {"metatype": "Property", "desc": "A scalar which will be multiplied with A @ B before adding C", "category": "General", "default": 1}, "beta": {"metatype": "Property", "desc": "A scalar which will be multiplied with C before adding C", "category": "General", "default": 0}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["specialize"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "BLAS": {}, "OpenBLAS": {}, "IntelMKL": {}, "cuBLAS": {}, "rocBLAS": {}, "ExpandDotPure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandDotOpenBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandDotMKL": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandDotCuBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandDotFpgaPartialSums": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandDotFpgaAccumulate": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.dot.Dot": {"n": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": null}, "accumulator_type": {"metatype": "typeclass", "desc": "Accumulator or intermediate storage type", "category": "General", "default": null, "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "OpenBLAS", "MKL", "cuBLAS", "FPGA_PartialSums", "FPGA_Accumulate"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandGemvPure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemvFpgaAccumulate": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemvFpgaTilesByColumn": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemvCuBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemvOpenBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemvMKL": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemvPBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.gemv.Gemv": {"alpha": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 1}, "beta": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 0}, "transA": {"metatype": "bool", "desc": "Whether to transpose A before multiplying", "category": "General", "default": false}, "n": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": null}, "m": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": null}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "OpenBLAS", "MKL", "cuBLAS", "FPGA_Accumulate", "FPGA_TilesByColumn", "PBLAS"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandGemmPure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemmOpenBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemmMKL": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemmGPUBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemmCuBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemmRocBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGemmPBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.gemm.Gemm": {"transA": {"metatype": "bool", "desc": "Whether to transpose A before multiplying", "category": "General", "default": false}, "transB": {"metatype": "bool", "desc": "Whether to transpose B before multiplying", "category": "General", "default": false}, "alpha": {"metatype": "Property", "desc": "A scalar which will be multiplied with A @ B before adding C", "category": "General", "default": 1}, "beta": {"metatype": "Property", "desc": "A scalar which will be multiplied with C before adding C", "category": "General", "default": 0}, "cin": {"metatype": "bool", "desc": "Whether to have a _cin connector when beta != 0", "category": "General", "default": true}, "algorithm": {"metatype": "str", "desc": "If applicable, chooses the vendor-provided implementation (algorithm) for the multiplication", "category": "General", "default": null}, "accumulator_type": {"metatype": "typeclass", "desc": "Accumulator or intermediate storage type used in multiplication", "category": "General", "default": null, "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "compute_type": {"metatype": "str", "desc": "If applicable, overrides computation type (CUBLAS-specific, see ``cublasComputeType_t``)", "category": "General", "default": null}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "MKL", "OpenBLAS", "cuBLAS", "rocBLAS", "PBLAS", "FPGA1DSystolic"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandGerPure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGerFpga": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.ger.Ger": {"n_tile_size": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 1}, "m_tile_size": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": 1}, "n": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": "n"}, "m": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": "m"}, "alpha": {"metatype": "SymbolicProperty", "desc": "A scalar which will be multiplied with the outer product x*yT before adding matrix A", "category": "General", "default": 1}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "FPGA"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandBatchedMatMulPure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandBatchedMatMulMKL": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandBatchedMatMulOpenBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandBatchedMatMulCuBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.batched_matmul.BatchedMatMul": {"transA": {"metatype": "bool", "desc": "Whether to transpose A before multiplying", "category": "General", "default": false}, "transB": {"metatype": "bool", "desc": "Whether to transpose B before multiplying", "category": "General", "default": false}, "alpha": {"metatype": "Property", "desc": "A scalar which will be multiplied with A @ B before adding C", "category": "General", "default": 1}, "beta": {"metatype": "Property", "desc": "A scalar which will be multiplied with C before adding C", "category": "General", "default": 0}, "algorithm": {"metatype": "str", "desc": "If applicable, chooses the vendor-provided implementation (algorithm) for the multiplication", "category": "General", "default": null}, "accumulator_type": {"metatype": "typeclass", "desc": "Accumulator or intermediate storage type used in multiplication", "category": "General", "default": null, "base_types": ["bool", "bool_", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "float16", "float32", "float64", "complex64", "complex128"], "compound_types": {"vector": {"elements": {"type": "str", "default": "0"}, "dtype": {"type": "typeclass", "default": "bool"}}, "pointer": {"dtype": {"type": "typeclass", "default": "bool"}}, "opaque": {"ctype": {"type": "str", "default": ""}}, "struct": {"name": {"type": "str", "default": ""}, "data": {"type": "dict", "default": {}, "value_type": "typeclass"}, "length": {"type": "dict", "default": {}, "value_type": "int"}, "bytes": {"type": "int", "default": 0}}, "callback": {"arguments": {"type": "list", "element_type": "typeclass", "default": []}, "returntypes": {"type": "list", "element_type": "typeclass", "default": []}}}}, "compute_type": {"metatype": "str", "desc": "If applicable, overrides computation type (CUBLAS-specific, see ``cublasComputeType_t``)", "category": "General", "default": null}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "MKL", "OpenBLAS", "cuBLAS"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandAxpyVectorized": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandAxpyFpga": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.blas.nodes.axpy.Axpy": {"a": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": "a"}, "n": {"metatype": "SymbolicProperty", "desc": "", "category": "General", "default": "n"}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "fpga"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "dace.libraries.blas.nodes.einsum.Einsum": {"einsum_str": {"metatype": "str", "desc": "The Einstein notation string that describes this einsum", "category": "General", "default": ""}, "alpha": {"metatype": "SymbolicProperty", "desc": "The coefficient to multiply the inputs with", "category": "General", "default": 1.0}, "beta": {"metatype": "SymbolicProperty", "desc": "The coefficient to multiply the output with when added to the product", "category": "General", "default": 0.0}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["specialize"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "SpecializeEinsum": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.standard.nodes.code.CodeLibraryNode": {"inputdict": {"metatype": "dict", "desc": "", "category": "General", "default": {}}, "outputdict": {"metatype": "dict", "desc": "", "category": "General", "default": {}}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["default"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "Expansion": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandGearbox": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.standard.nodes.gearbox.Gearbox": {"size": {"metatype": "SymbolicProperty", "desc": "Number of wide vectors to convert to/from narrow vectors.", "category": "General", "default": 0}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "CUDA": {}, "HPTT": {}, "ExpandReducePure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReducePureSequentialDim": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReduceOpenMP": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReduceCUDADevice": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReduceCUDABlock": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReduceCUDABlockAll": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReduceFPGAPartialReduction": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandReduceGPUAuto": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.standard.nodes.reduce.Reduce": {"axes": {"metatype": "list", "desc": "", "category": "General", "default": null, "element_type": "int"}, "wcr": {"metatype": "LambdaProperty", "desc": "", "category": "General", "default": "(lambda a, b: a)"}, "identity": {"metatype": "Property", "desc": "", "category": "General", "default": "None"}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "pure-seq", "OpenMP", "CUDA (device)", "CUDA (block)", "CUDA (block allreduce)", "FPGAPartialReduction", "GPUAuto"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandTransposePure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandTransposeMKL": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandTransposeOpenBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandTransposeCuBLAS": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.standard.nodes.transpose.Transpose": {"dtype": {"metatype": "typeclass", "desc": "", "category": "General", "default": null}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "MKL", "OpenBLAS", "cuBLAS"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "ExpandPure": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ExpandHPTT": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "dace.libraries.standard.nodes.ttranspose.TensorTranspose": {"axes": {"metatype": "list", "desc": "Permutation of input tensor's modes", "category": "General", "default": [], "element_type": "int"}, "alpha": {"metatype": "Number", "desc": "Input tensor scaling factor", "category": "General", "default": 1}, "beta": {"metatype": "Number", "desc": "Output tensor scaling factor", "category": "General", "default": 0}, "name": {"metatype": "str", "desc": "Name of node", "category": "General", "default": ""}, "implementation": {"metatype": "LibraryImplementationProperty", "desc": "Which implementation this library node will expand into.Must match a key in the list of possible implementations.", "category": "General", "default": null, "choices": ["pure", "HPTT"]}, "schedule": {"metatype": "ScheduleType", "desc": "If set, determines the default device mapping of the node upon expansion, if expanded to a nested SDFG.", "category": "General", "default": "Default", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "debuginfo": {"metatype": "DebugInfo", "desc": "", "category": "General", "default": {"type": "DebugInfo", "start_line": 0, "end_line": 0, "start_column": 0, "end_column": 0, "filename": null}}, "label": {"metatype": "str", "desc": "Name of the CodeNode", "category": "General", "default": ""}, "location": {"metatype": "dict", "desc": "Full storage location identifier (e.g., rank, GPU ID)", "category": "General", "default": {}, "key_type": "str", "value_type": "pystr_to_symbolic"}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}, "in_connectors": {"metatype": "dict", "desc": "A set of input connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "out_connectors": {"metatype": "dict", "desc": "A set of output connectors for this node.", "category": "General", "default": {}, "key_type": "str", "value_type": "typeclass"}, "guid": {"metatype": "str", "desc": "", "category": "General", "default": ""}}, "StateReachability": {}, "ControlFlowBlockReachability": {"contain_to_single_level": {"metatype": "bool", "desc": "", "category": "General", "default": false}}, "SymbolAccessSets": {"apply_to_conditionals": {"metatype": "bool", "desc": "Whether or not to apply to conditional blocks. If false, do not apply to conditional blocks, but only their children.", "category": "General", "default": false}, "top_down": {"metatype": "bool", "desc": "Whether or not to apply top down (i.e., parents before children)", "category": "General", "default": false}}, "AccessSets": {}, "FindAccessStates": {}, "FindAccessNodes": {}, "SymbolWriteScopes": {"apply_to_conditionals": {"metatype": "bool", "desc": "Whether or not to apply to conditional blocks. If false, do not apply to conditional blocks, but only their children.", "category": "General", "default": false}, "top_down": {"metatype": "bool", "desc": "Whether or not to apply top down (i.e., parents before children)", "category": "General", "default": false}}, "ScalarWriteShadowScopes": {}, "AccessRanges": {}, "FindReferenceSources": {"trace_through_code": {"metatype": "bool", "desc": "Trace inputs through tasklets.", "category": "General", "default": false}, "recursive": {"metatype": "bool", "desc": "Add reference of reference dependencies.", "category": "General", "default": false}}, "DeriveSDFGConstraints": {"assume_max_data_size": {"metatype": "int", "desc": "Assume that all data containers have no dimension larger than this value. If None, no assumption is made.", "category": "General", "default": null}}, "MapCollapse": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MapReduceFusion": {"no_init": {"metatype": "bool", "desc": "If enabled, does not create initialization states for reduce nodes with identity", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MapExpansion": {"inner_schedule": {"metatype": "ScheduleType", "desc": "Schedule for inner maps", "category": "General", "default": "Sequential", "choices": ["Default", "Sequential", "MPI", "CPU_Multicore", "CPU_Persistent", "Unrolled", "SVE_Map", "GPU_Default", "GPU_Device", "GPU_ThreadBlock", "GPU_ThreadBlock_Dynamic", "GPU_Persistent", "FPGA_Device", "Snitch", "Snitch_Multicore", "FPGA_Multi_Pumped"]}, "expansion_limit": {"metatype": "int", "desc": "How many unidimensional maps will be creaed, known as k. If None, the default no limit is in place.", "category": "General", "default": null}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MapDimShuffle": {"parameters": {"metatype": "list", "desc": "Desired order of map parameters", "category": "General", "default": [], "element_type": "str"}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "TrivialMapElimination": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "StreamTransient": {"with_buffer": {"metatype": "bool", "desc": "Use an intermediate buffer for accumulation", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "AccumulateTransient": {"array": {"metatype": "str", "desc": "Array to create local storage for (if empty, first available)", "category": "General", "default": null}, "identity": {"metatype": "SymbolicProperty", "desc": "Identity value to set", "category": "General", "default": null}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "LocalStorage": {"array": {"metatype": "str", "desc": "Array to create local storage for (if empty, first available)", "category": "General", "default": null}, "prefix": {"metatype": "str", "desc": "Prefix for new data node", "category": "General", "default": "trans_"}, "create_array": {"metatype": "bool", "desc": "if false, it does not create a new array.", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "InLocalStorage": {"array": {"metatype": "str", "desc": "Array to create local storage for (if empty, first available)", "category": "General", "default": null}, "prefix": {"metatype": "str", "desc": "Prefix for new data node", "category": "General", "default": "trans_"}, "create_array": {"metatype": "bool", "desc": "if false, it does not create a new array.", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "OutLocalStorage": {"array": {"metatype": "str", "desc": "Array to create local storage for (if empty, first available)", "category": "General", "default": null}, "prefix": {"metatype": "str", "desc": "Prefix for new data node", "category": "General", "default": "trans_"}, "create_array": {"metatype": "bool", "desc": "if false, it does not create a new array.", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "OTFMapFusion": {"identity": {"metatype": "SymbolicProperty", "desc": "Identity value to set", "category": "General", "default": null}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "StripMining": {"dim_idx": {"metatype": "int", "desc": "Index of dimension to be strip-mined", "category": "General", "default": -1}, "new_dim_prefix": {"metatype": "str", "desc": "Prefix for new dimension name", "category": "General", "default": "tile"}, "tile_size": {"metatype": "SymbolicProperty", "desc": "Tile size of strip-mined dimension, or number of tiles if tiling_type=number_of_tiles", "category": "General", "default": 64}, "tile_stride": {"metatype": "SymbolicProperty", "desc": "Stride between two tiles of the strip-mined dimension. If zero, it is set equal to the tile size.", "category": "General", "default": 0}, "tile_offset": {"metatype": "SymbolicProperty", "desc": "Tile stride offset (negative)", "category": "General", "default": 0}, "divides_evenly": {"metatype": "bool", "desc": "Tile size divides dimension range evenly?", "category": "General", "default": false}, "strided": {"metatype": "bool", "desc": "Continuous (false) or strided (true) elements in tile", "category": "General", "default": false}, "tiling_type": {"metatype": "TilingType", "desc": "normal: the outerloop increments with tile_size, ceilrange: uses ceiling(N/tile_size) in outer range, number_of_tiles: tiles the map into the number of provided tiles, provide the number of tiles over tile_size", "category": "General", "default": "Normal", "choices": ["Normal", "CeilRange", "NumberOfTiles"]}, "skew": {"metatype": "bool", "desc": "If True, offsets inner tile back such that it starts with zero", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MapTiling": {"prefix": {"metatype": "str", "desc": "Prefix for new range symbols", "category": "General", "default": "tile"}, "tile_sizes": {"metatype": "tuple", "desc": "Tile size per dimension", "category": "General", "default": ["128", "128", "128"]}, "strides": {"metatype": "tuple", "desc": "Tile stride (enables overlapping tiles). If empty, matches tile", "category": "General", "default": []}, "tile_offset": {"metatype": "tuple", "desc": "Negative Stride offset per dimension", "category": "General", "default": null}, "divides_evenly": {"metatype": "bool", "desc": "Tile size divides dimension length evenly", "category": "General", "default": false}, "tile_trivial": {"metatype": "bool", "desc": "Tiles even if tile_size is 1", "category": "General", "default": false}, "skew": {"metatype": "bool", "desc": "If True, offsets inner tile back such that it starts with zero", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MapTilingWithOverlap": {"lower_overlap": {"metatype": "tuple", "desc": "Lower overlap per dimension", "category": "General", "default": []}, "upper_overlap": {"metatype": "tuple", "desc": "Upper overlap per dimension", "category": "General", "default": []}, "prefix": {"metatype": "str", "desc": "Prefix for new range symbols", "category": "General", "default": "tile"}, "tile_sizes": {"metatype": "tuple", "desc": "Tile size per dimension", "category": "General", "default": ["128", "128", "128"]}, "strides": {"metatype": "tuple", "desc": "Tile stride (enables overlapping tiles). If empty, matches tile", "category": "General", "default": []}, "tile_offset": {"metatype": "tuple", "desc": "Negative Stride offset per dimension", "category": "General", "default": null}, "divides_evenly": {"metatype": "bool", "desc": "Tile size divides dimension length evenly", "category": "General", "default": false}, "tile_trivial": {"metatype": "bool", "desc": "Tiles even if tile_size is 1", "category": "General", "default": false}, "skew": {"metatype": "bool", "desc": "If True, offsets inner tile back such that it starts with zero", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "BufferTiling": {"tile_sizes": {"metatype": "tuple", "desc": "Tile size per dimension", "category": "General", "default": ["128", "128", "128"]}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "Vectorization": {"vector_len": {"metatype": "int", "desc": "Vector length", "category": "General", "default": 4}, "propagate_parent": {"metatype": "bool", "desc": "Propagate vector length through parent SDFGs", "category": "General", "default": false}, "strided_map": {"metatype": "bool", "desc": "Use strided map range (jump by vector length) instead of modifying memlets", "category": "General", "default": true}, "preamble": {"metatype": "bool", "desc": "Force creation or skipping a preamble map without vectors", "category": "General", "default": null}, "postamble": {"metatype": "bool", "desc": "Force creation or skipping a postamble map without vectors", "category": "General", "default": null}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "CopyToMap": {"ignore_strides": {"metatype": "Property", "desc": "Ignore the stride of the data container; Defaults to `False`.", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "GPUGridStridedTiling": {"new_dim_prefix": {"metatype": "str", "desc": "Prefix for new dimension name", "category": "General", "default": "tile"}, "max_grid_dim": {"metatype": "SymbolicProperty", "desc": "Maximum grid dimension", "category": "General", "default": 65535}, "block_dim": {"metatype": "Property", "desc": "Block dimension", "category": "General", "default": 128}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "StreamingMemory": {"buffer_size": {"metatype": "int", "desc": "Set buffer size for the newly-created stream", "category": "General", "default": 1}, "storage": {"metatype": "StorageType", "desc": "Set storage type for the newly-created stream", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "use_memory_buffering": {"metatype": "bool", "desc": "Set if memory buffering should be used.", "category": "General", "default": false}, "memory_buffering_target_bytes": {"metatype": "int", "desc": "Set bytes read/written from memory if memory buffering is enabled.", "category": "General", "default": 64}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "StreamingComposition": {"buffer_size": {"metatype": "int", "desc": "Set buffer size for the newly-created stream", "category": "General", "default": 1}, "storage": {"metatype": "StorageType", "desc": "Set storage type for the newly-created stream", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ReduceExpansion": {"debug": {"metatype": "bool", "desc": "Debug Info", "category": "General", "default": false}, "create_in_transient": {"metatype": "bool", "desc": "Create local in-transientin registers", "category": "General", "default": false}, "create_out_transient": {"metatype": "bool", "desc": "Create local out-transientin registers", "category": "General", "default": false}, "reduce_implementation": {"metatype": "str", "desc": "Reduce implementation of inner reduce. If specified,overrides any existing implementations", "category": "General", "default": null}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "PruneConnectors": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "TaskletFusion": {"new_name": {"metatype": "str", "desc": "New name to give tasklet. If None, fuses tasklet names", "category": "General", "default": null}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "TrivialTaskletElimination": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "CopyToDevice": {"storage": {"metatype": "StorageType", "desc": "Nested SDFG storage", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "GPUTransformMap": {"fullcopy": {"metatype": "bool", "desc": "Copy whole arrays rather than used subset", "category": "General", "default": false}, "toplevel_trans": {"metatype": "bool", "desc": "Make all GPU transients top-level", "category": "General", "default": false}, "register_trans": {"metatype": "bool", "desc": "Make all transients inside GPU maps registers", "category": "General", "default": false}, "sequential_innermaps": {"metatype": "bool", "desc": "Make all internal maps Sequential", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "GPUTransformLocalStorage": {"fullcopy": {"metatype": "bool", "desc": "Copy whole arrays rather than used subset", "category": "General", "default": false}, "nested_seq": {"metatype": "bool", "desc": "Makes nested code semantically-equivalent to single-core code,transforming nested maps and memory into sequential and local memory respectively.", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MPITransformMap": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "WarpTiling": {"warp_size": {"metatype": "int", "desc": "Hardware warp size", "category": "General", "default": 32}, "replicate_maps": {"metatype": "bool", "desc": "Replicate tiled maps that lead to multiple other tiled maps", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "BankSplit": {"split_array_info": {"metatype": "List", "desc": "Describes how many times this array is split in each dimension, where the k-th number describes how many times dimension k is split. If the k-th number is 1 this means that the array is not split in the k-th dimension at all. If None, then the transform will split the first dimension exactly shape[0] times.", "category": "General", "default": null}, "default_to_storage": {"metatype": "StorageType", "desc": "The storage type of involved arrays will be set to the value of this property if they have Default storage type. ", "category": "General", "default": "CPU_Heap"}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "CodeObject": {"name": {"metatype": "str", "desc": "Filename to use", "category": "General", "default": ""}, "code": {"metatype": "str", "desc": "The code attached to this object", "category": "General", "default": ""}, "language": {"metatype": "str", "desc": "Language used for this code (same as its file extension)", "category": "General", "default": ""}, "target": {"metatype": "type", "desc": "Target to use for compilation", "category": "General", "default": null}, "target_type": {"metatype": "str", "desc": "Sub-target within target (e.g., host or device code)", "category": "General", "default": ""}, "title": {"metatype": "str", "desc": "Title of code for GUI", "category": "General", "default": ""}, "extra_compiler_kwargs": {"metatype": "dict", "desc": "Additional compiler argument variables to add to template", "category": "General", "default": {}, "key_type": "str", "value_type": "str"}, "linkable": {"metatype": "bool", "desc": "Should this file participate in overall linkage?", "category": "General", "default": false}, "environments": {"metatype": "set", "desc": "Environments required by CMake to build and run this code node.", "category": "General", "default": []}}, "HbmTransform": {"new_dim": {"metatype": "str", "desc": "Defines the map param of the outer unrolled map", "category": "General", "default": "k"}, "move_to_FPGA_global": {"metatype": "bool", "desc": "All assigned arrays have their storage changed to  FPGA_Global", "category": "General", "default": true}, "make_new_map_outermost": {"metatype": "bool", "desc": "Make the map with schedule unrolled the outermost of the scope", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "MatrixProductTranspose": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "GPUPersistentKernel": {"validate": {"metatype": "bool", "desc": "Validate the sdfg and the nested sdfg", "category": "General", "default": false}, "include_in_assignment": {"metatype": "bool", "desc": "Wether to include global variable assignments of the edge going into the kernel inside the kernel or have it happen on the outside. If the assignment is needed in the kernel, it needs to be included.", "category": "General", "default": true}, "kernel_prefix": {"metatype": "str", "desc": "Name of the kernel. If no value is given the kerenl will be refrenced as `kernel`, if a value is given the kernel will be named `<kernel_prefix>_kernel`. This is useful if multiple kernels are created.", "category": "General", "default": ""}, "cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "MultiExpansion": {"debug": {"metatype": "bool", "desc": "Debug Mode", "category": "General", "default": false}, "sequential_innermaps": {"metatype": "bool", "desc": "Make all inner maps that arecreated during expansion sequential", "category": "General", "default": false}, "check_contiguity": {"metatype": "bool", "desc": "Don't allow expansion if last (contiguous)dimension is partially split", "category": "General", "default": false}, "permutation_only": {"metatype": "bool", "desc": "Only allow permutations without inner splits", "category": "General", "default": false}, "allow_offset": {"metatype": "bool", "desc": "Offset ranges to zero", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "SubgraphFusion": {"debug": {"metatype": "bool", "desc": "Show debug info", "category": "General", "default": false}, "transient_allocation": {"metatype": "StorageType", "desc": "Storage Location to push transients to that are fully contained within the subgraph.", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "schedule_innermaps": {"metatype": "ScheduleType", "desc": "Schedule of inner maps. If none, keeps schedule.", "category": "General", "default": null}, "consolidate": {"metatype": "bool", "desc": "Consolidate edges that enter and exit the fused map.", "category": "General", "default": false}, "propagate": {"metatype": "bool", "desc": "Propagate memlets of edges that enter and exit the fused map.Disable if this causes problems (e.g., if memlet propagation doesnot work correctly).", "category": "General", "default": true}, "disjoint_subsets": {"metatype": "bool", "desc": "Check for disjoint subsets in can_be_applied. If multipleaccess nodes pointing to the same data appear within a subgraphto be fused, this check confirms that their access sets areindependent per iteration space to avoid race conditions.", "category": "General", "default": true}, "keep_global": {"metatype": "list", "desc": "A list of array names to treat as non-transients and not compress", "category": "General", "default": [], "element_type": "str"}, "cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "FPGATransformSDFG": {"promote_global_trans": {"metatype": "bool", "desc": "If True, transient arrays that are fully internal are pulled out so that they can be allocated on the host.", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "GPUTransformSDFG": {"toplevel_trans": {"metatype": "bool", "desc": "Make all GPU transients top-level", "category": "General", "default": true}, "register_trans": {"metatype": "bool", "desc": "Make all transients inside GPU maps registers", "category": "General", "default": true}, "sequential_innermaps": {"metatype": "bool", "desc": "Make all internal maps Sequential", "category": "General", "default": true}, "skip_scalar_tasklets": {"metatype": "bool", "desc": "If True, does not transform tasklets that manipulate (Default-stored) scalars", "category": "General", "default": true}, "simplify": {"metatype": "bool", "desc": "Reapply simplification after modifying graph", "category": "General", "default": true}, "exclude_copyin": {"metatype": "str", "desc": "Exclude these arrays from being copied into the device (comma-separated)", "category": "General", "default": ""}, "exclude_tasklets": {"metatype": "str", "desc": "Exclude these tasklets from being processed as CPU tasklets (comma-separated)", "category": "General", "default": ""}, "exclude_copyout": {"metatype": "str", "desc": "Exclude these arrays from being copied out of the device (comma-separated)", "category": "General", "default": ""}, "host_maps": {"metatype": "list", "desc": "List of map GUIDs, the passed maps are not offloaded to the GPU", "category": "General", "default": null, "element_type": "str"}, "host_data": {"metatype": "list", "desc": "List of data names, the passed data are not offloaded to the GPU", "category": "General", "default": null, "element_type": "str"}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "InlineSDFG": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "InlineTransients": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "RefineNestedAccess": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "NestSDFG": {"promote_global_trans": {"metatype": "bool", "desc": "Promotes transients to be allocated once", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "LoopUnroll": {"count": {"metatype": "int", "desc": "Number of iterations to unroll, or zero for all iterations (loop must be constant-sized for 0)", "category": "General", "default": 0}, "inline_iterations": {"metatype": "bool", "desc": "Whether or not to inline individual iterations' CFGs after unrolling", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "LoopPeeling": {"begin": {"metatype": "bool", "desc": "If True, peels loop from beginning (first `count` iterations), otherwise peels last `count` iterations.", "category": "General", "default": true}, "count": {"metatype": "int", "desc": "Number of iterations to unroll, or zero for all iterations (loop must be constant-sized for 0)", "category": "General", "default": 0}, "inline_iterations": {"metatype": "bool", "desc": "Whether or not to inline individual iterations' CFGs after unrolling", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "LoopToMap": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "InlineMultistateSDFG": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "StencilTiling": {"debug": {"metatype": "bool", "desc": "Debug mode", "category": "General", "default": false}, "prefix": {"metatype": "str", "desc": "Prefix for new inner tiled range symbols", "category": "General", "default": "stencil"}, "strides": {"metatype": "tuple", "desc": "Tile stride", "category": "General", "default": ["1"]}, "schedule": {"metatype": "ScheduleType", "desc": "Dace.Dtypes.ScheduleType of Inner Maps", "category": "General", "default": "Default"}, "unroll_loops": {"metatype": "bool", "desc": "Unroll Inner Loops if they have Size > 1", "category": "General", "default": false}, "cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "TemporalVectorization": {"factor": {"metatype": "int", "desc": "The multi-pumping factor. E.g. double-pumping is a factor of 2.", "category": "General", "default": 2}, "approach": {"metatype": "int", "desc": "Which approach to use. Can be 1 (increased throughput, same resources) or 2 (same throughput, reduced resourced).", "category": "General", "default": 2}, "cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "CompositeFusion": {"debug": {"metatype": "bool", "desc": "Debug mode", "category": "General", "default": false}, "allow_expansion": {"metatype": "bool", "desc": "Allow MultiExpansion first", "category": "General", "default": true}, "allow_tiling": {"metatype": "bool", "desc": "Allow StencilTiling (after MultiExpansion)", "category": "General", "default": false}, "transient_allocation": {"metatype": "StorageType", "desc": "Storage Location to push transients to that are fully contained within the subgraph.", "category": "General", "default": "Default", "choices": ["Default", "Register", "CPU_Pinned", "CPU_Heap", "CPU_ThreadLocal", "GPU_Global", "GPU_Shared", "FPGA_Global", "FPGA_Local", "FPGA_Registers", "FPGA_ShiftRegister", "SVE_Register", "Snitch_TCDM", "Snitch_L2", "Snitch_SSR"]}, "schedule_innermaps": {"metatype": "ScheduleType", "desc": "Schedule of inner fused maps", "category": "General", "default": null}, "stencil_unroll_loops": {"metatype": "bool", "desc": "Unroll inner stencil loops if they have size > 1", "category": "General", "default": false}, "stencil_strides": {"metatype": "tuple", "desc": "Stencil tile stride", "category": "General", "default": ["1"]}, "expansion_split": {"metatype": "bool", "desc": "Allow MultiExpansion to split up maps, if enabled", "category": "General", "default": true}, "cfg_id": {"metatype": "int", "desc": "ID of CFG to transform", "category": "General", "default": 0}, "state_id": {"metatype": "int", "desc": "ID of state to transform subgraph within, or -1 to transform the SDFG", "category": "General", "default": 0}, "subgraph": {"metatype": "set", "desc": "Subgraph in transformation instance", "category": "General", "default": []}}, "ArrayElimination": {}, "ConsolidateEdges": {}, "ConstantPropagation": {"recursive": {"metatype": "bool", "desc": "Propagagte recursively through nested SDFGs", "category": "General", "default": true}, "progress": {"metatype": "bool", "desc": "Show progress", "category": "General", "default": null}}, "DeadDataflowElimination": {"skip_library_nodes": {"metatype": "bool", "desc": "If True, does not remove library nodes if their results are unused. Otherwise removes library nodes without side effects.", "category": "General", "default": false}, "remove_persistent_memory": {"metatype": "bool", "desc": "If True, marks code with Persistent allocation lifetime as dead", "category": "General", "default": false}, "apply_to_conditionals": {"metatype": "bool", "desc": "Whether or not to apply to conditional blocks. If false, do not apply to conditional blocks, but only their children.", "category": "General", "default": false}, "top_down": {"metatype": "bool", "desc": "Whether or not to apply top down (i.e., parents before children)", "category": "General", "default": false}}, "DeadStateElimination": {}, "FuseStates": {"permissive": {"metatype": "bool", "desc": "If True, ignores some race condition checks.", "category": "General", "default": false}, "progress": {"metatype": "bool", "desc": "Whether to print progress, or None for default (print after 5 seconds).", "category": "General", "default": null}}, "InlineSDFGs": {"permissive": {"metatype": "bool", "desc": "If True, ignores some checks on inlining.", "category": "General", "default": false}, "progress": {"metatype": "bool", "desc": "Whether to print progress, or None for default (print after 5 seconds).", "category": "General", "default": null}, "multistate": {"metatype": "bool", "desc": "If True, include multi-state inlining.", "category": "General", "default": true}}, "InlineControlFlowRegions": {"progress": {"metatype": "bool", "desc": "Whether to print progress, or None for default (print after 5 seconds).", "category": "General", "default": null}, "no_inline_loops": {"metatype": "bool", "desc": "Whether to prevent inlining loops.", "category": "General", "default": true}, "no_inline_conditional": {"metatype": "bool", "desc": "Whether to prevent inlining conditional blocks.", "category": "General", "default": true}, "no_inline_function_call_regions": {"metatype": "bool", "desc": "Whether to prevent inlining function call regions.", "category": "General", "default": true}, "no_inline_named_regions": {"metatype": "bool", "desc": "Whether to prevent inlining named control flow regions.", "category": "General", "default": true}}, "FixNestedSDFGReferences": {}, "OptionalArrayInference": {}, "PatternMatchAndApply": {"transformations": {"metatype": "list", "desc": "The list of transformations to apply", "category": "General", "default": [], "element_type": "PatternTransformation"}, "permissive": {"metatype": "bool", "desc": "Whether to apply in permissive mode, i.e., apply in more cases where it may be unsafe.", "category": "General", "default": false}, "validate": {"metatype": "bool", "desc": "If True, validates the SDFG after all transformations have been applied.", "category": "General", "default": true}, "validate_all": {"metatype": "bool", "desc": "If True, validates the SDFG after each transformation applies.", "category": "General", "default": false}, "states": {"metatype": "list", "desc": "If not None, only applies transformations to the given states.", "category": "General", "default": null, "element_type": "SDFGState"}, "print_report": {"metatype": "bool", "desc": "Whether to show debug prints (or None to use configuration file).", "category": "General", "default": null}, "progress": {"metatype": "bool", "desc": "Whether to show progress printouts (or None to use configuration file).", "category": "General", "default": null}}, "PatternMatchAndApplyRepeated": {"order_by_transformation": {"metatype": "bool", "desc": "Whether or not to order by transformation.", "category": "General", "default": true}, "transformations": {"metatype": "list", "desc": "The list of transformations to apply", "category": "General", "default": [], "element_type": "PatternTransformation"}, "permissive": {"metatype": "bool", "desc": "Whether to apply in permissive mode, i.e., apply in more cases where it may be unsafe.", "category": "General", "default": false}, "validate": {"metatype": "bool", "desc": "If True, validates the SDFG after all transformations have been applied.", "category": "General", "default": true}, "validate_all": {"metatype": "bool", "desc": "If True, validates the SDFG after each transformation applies.", "category": "General", "default": false}, "states": {"metatype": "list", "desc": "If not None, only applies transformations to the given states.", "category": "General", "default": null, "element_type": "SDFGState"}, "print_report": {"metatype": "bool", "desc": "Whether to show debug prints (or None to use configuration file).", "category": "General", "default": null}, "progress": {"metatype": "bool", "desc": "Whether to show progress printouts (or None to use configuration file).", "category": "General", "default": null}}, "PatternApplyOnceEverywhere": {"order_by_transformation": {"metatype": "bool", "desc": "Whether or not to order by transformation.", "category": "General", "default": true}, "transformations": {"metatype": "list", "desc": "The list of transformations to apply", "category": "General", "default": [], "element_type": "PatternTransformation"}, "permissive": {"metatype": "bool", "desc": "Whether to apply in permissive mode, i.e., apply in more cases where it may be unsafe.", "category": "General", "default": false}, "validate": {"metatype": "bool", "desc": "If True, validates the SDFG after all transformations have been applied.", "category": "General", "default": true}, "validate_all": {"metatype": "bool", "desc": "If True, validates the SDFG after each transformation applies.", "category": "General", "default": false}, "states": {"metatype": "list", "desc": "If not None, only applies transformations to the given states.", "category": "General", "default": null, "element_type": "SDFGState"}, "print_report": {"metatype": "bool", "desc": "Whether to show debug prints (or None to use configuration file).", "category": "General", "default": null}, "progress": {"metatype": "bool", "desc": "Whether to show progress printouts (or None to use configuration file).", "category": "General", "default": null}}, "RemoveUnusedSymbols": {"recursive": {"metatype": "bool", "desc": "Prune nested SDFGs recursively", "category": "General", "default": true}, "symbols": {"metatype": "set", "desc": "Limit considered symbols to this set", "category": "General", "default": null}}, "ScalarToSymbolPromotion": {"ignore": {"metatype": "set", "desc": "Fields that should not be promoted.", "category": "General", "default": []}, "transients_only": {"metatype": "bool", "desc": "Promote only transients.", "category": "General", "default": true}, "integers_only": {"metatype": "bool", "desc": "Allow promotion of integer scalars only.", "category": "General", "default": true}}, "ReferenceToView": {}, "LoopLifting": {"cfg_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "state_id": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}, "_subgraph": {"metatype": "dict", "desc": "", "category": "(Debug)", "default": {}, "key_type": "int", "value_type": "int"}, "expr_index": {"metatype": "int", "desc": "", "category": "(Debug)", "default": 0}}, "ControlFlowRaising": {"raise_sink_node_returns": {"metatype": "bool", "desc": "Whether or not to lift sink nodes in an SDFG context to explicit return blocks.", "category": "General", "default": false}}, "PruneEmptyConditionalBranches": {"apply_to_conditionals": {"metatype": "bool", "desc": "Whether or not to apply to conditional blocks. If false, do not apply to conditional blocks, but only their children.", "category": "General", "default": false}, "top_down": {"metatype": "bool", "desc": "Whether or not to apply top down (i.e., parents before children)", "category": "General", "default": false}}, "SimplifyPass": {"validate": {"metatype": "bool", "desc": "Whether to validate the SDFG at the end of the pipeline.", "category": "General", "default": false}, "validate_all": {"metatype": "bool", "desc": "Whether to validate the SDFG after each pass.", "category": "General", "default": false}, "skip": {"metatype": "set", "desc": "Set of pass names to skip.", "category": "General", "default": []}, "verbose": {"metatype": "bool", "desc": "Whether to print reports after every pass.", "category": "General", "default": false}, "no_inline_function_call_regions": {"metatype": "bool", "desc": "Whether to prevent inlining function call regions.", "category": "General", "default": false}, "no_inline_named_regions": {"metatype": "bool", "desc": "Whether to prevent inlining named control flow regions.", "category": "General", "default": false}, "passes": {"metatype": "list", "desc": "List of passes that this pipeline contains", "category": "(Debug)", "default": [], "element_type": "Pass"}}, "TransientReuse": {"verbose": {"metatype": "bool", "desc": "Print information about the memory reduction.", "category": "General", "default": false}}}