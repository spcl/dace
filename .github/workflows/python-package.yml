# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
        strict-xforms: [1,0]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get install -y libyaml-dev cmake
        sudo apt-get install -y libblas-dev
        sudo apt-get install -y libpapi-dev papi-tools  # Instrumentation dependencies
        sudo apt-get install -y verilator # RTL simulation dependencies
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage codecov
        pip install ".[testing]" .

    - name: Test dependencies
      run: |
        papi_avail

    - name: Test with pytest
      run: |
        export NOSTATUSBAR=1
        export DACE_debugprint=0
        export DACE_testing_serialization=1
        export DACE_testing_single_cache=1
        export DACE_optimizer_interface=" "
        export DACE_optimizer_automatic_strict_transformations=${{ matrix.strict-xforms }}
        pytest --cov-report=xml --cov=dace --tb=short -m "not gpu and not tensorflow and not verilator"
        codecov
    - name: Run other tests
      run: |
        export NOSTATUSBAR=1
        export DACE_testing_serialization=1
        export DACE_testing_single_cache=1
        export DACE_optimizer_automatic_strict_transformations=${{ matrix.strict-xforms }}
        export PYTHON_BINARY="coverage run --source=`pwd`/dace --parallel-mode"
        cd tests
        ./polybench_test.sh
        ./xform_test.sh
        coverage report; coverage xml
        codecov

  test-gpu:
    runs-on: [self-hosted, linux, gpu]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage codecov
        pip install ".[testing]" .

    - name: Test dependencies
      run: |
        papi_avail
        nvidia-smi

    - name: Test with pytest
      run: |
        export NOSTATUSBAR=1
        export DACE_debugprint=1
        export DACE_testing_single_cache=1
        export DACE_optimizer_interface=" "
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        pytest --cov-report=xml --cov=dace --tb=short -m "gpu or verilator"
        codecov
    - name: Run other tests
      run: |
        export NOSTATUSBAR=1
        export DACE_debugprint=1
        export DACE_testing_serialization=1
        export DACE_testing_single_cache=1
        export PYTHON_BINARY="coverage run --source=`pwd`/dace --parallel-mode"
        cd tests
        ./cuda_test.sh
        coverage report; coverage xml
        codecov
