# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build and Test

on:
  push:
    branches: [ master, ci-fix ]
  pull_request:
    branches: [ master, ci-fix ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8,3.9]
        strict-xforms: [0,1,autoopt]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libyaml-dev cmake
        sudo apt-get install -y libblas-dev libopenblas-dev liblapacke-dev
        sudo apt-get install -y libpapi-dev papi-tools  # Instrumentation dependencies
        sudo apt-get install -y mpich # MPI dependencies
        sudo apt-get install -y verilator # RTL simulation dependencies
        python -m pip install --upgrade pip
        pip install flake8 pytest-xdist coverage codecov mpi4py pytest-mpi
        pip install -e ".[testing]"

    - name: Test dependencies
      run: |
        papi_avail
    
    - name: Test MPI with pytest
      run: |
        export NOSTATUSBAR=1
        export DACE_testing_serialization=1
        export DACE_cache=unique
        export DACE_optimizer_interface=" "
        if [ "${{ matrix.strict-xforms }}" = "autoopt" ]; then
            export DACE_optimizer_automatic_strict_transformations=1
            export DACE_optimizer_autooptimize=1
            echo "Auto-optimization heuristics"
        else
            export DACE_optimizer_automatic_strict_transformations=${{ matrix.strict-xforms }}
        fi
        mpirun -n 2 coverage run --source=dace --parallel-mode -m pytest --with-mpi --tb=short -m "mpi"
        coverage combine .; coverage report; coverage xml
        codecov

    - name: Test with pytest
      run: |
        export NOSTATUSBAR=1
        export DACE_testing_serialization=1
        export DACE_cache=unique
        export DACE_optimizer_interface=" "
        if [ "${{ matrix.strict-xforms }}" = "autoopt" ]; then
            export DACE_optimizer_automatic_strict_transformations=1
            export DACE_optimizer_autooptimize=1
            echo "Auto-optimization heuristics"
        else
            export DACE_optimizer_automatic_strict_transformations=${{ matrix.strict-xforms }}
        fi
        pytest -n auto --cov-report=xml --cov=dace --tb=short -m "not gpu and not verilator and not tensorflow and not mkl and not sve and not papi and not mlir"
        codecov
    - name: Run other tests
      run: |
        export NOSTATUSBAR=1
        export DACE_testing_serialization=1
        export DACE_cache=single
        export DACE_optimizer_automatic_strict_transformations=${{ matrix.strict-xforms }}
        export PYTHON_BINARY="coverage run --source=dace --parallel-mode"
        ./tests/polybench_test.sh
        ./tests/xform_test.sh
        coverage combine .; coverage report; coverage xml
        codecov

  test-heterogeneous:
    runs-on: [self-hosted, linux]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install dependencies
      run: |
        rm ~/.dace.conf
        rm -rf .dacecache tests/.dacecache
        . /opt/setupenv
        python -m pip install --upgrade pip
        pip install flake8 pytest-xdist coverage codecov
        pip install mpi4py pytest-mpi
        pip uninstall -y dace
        pip install -e ".[testing]"

    - name: Test dependencies
      run: |
        papi_avail

    - name: Run parallel pytest 
      run: |
        export DACE_cache=unique
        export DACE_optimizer_interface=" "
        . /opt/setupenv
        pytest -n auto --cov-report=xml --cov=dace --tb=short -m "verilator or mkl or papi"
        codecov

    - name: Run MPI tests
      run: |
        export NOSTATUSBAR=1
        export DACE_cache=single
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        export PYTHON_BINARY="coverage run --source=dace --parallel-mode"
        . /opt/setupenv
        ./tests/mpi_test.sh

    - name: Report overall coverage
      run: |
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        . /opt/setupenv
        coverage combine . */; coverage report; coverage xml
        codecov

  test-gpu:
    runs-on: [self-hosted, linux, gpu]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install dependencies
      run: |
        rm ~/.dace.conf
        rm -rf .dacecache tests/.dacecache
        . /opt/setupenv
        python -m pip install --upgrade pip
        pip install flake8 pytest-xdist coverage codecov
        pip install mpi4py
        pip uninstall -y dace
        pip install -e ".[testing]"

    - name: Test dependencies
      run: |
        nvidia-smi

    - name: Run pytest GPU
      run: |
        export DACE_cache=single
        export DACE_optimizer_interface=" "
        . /opt/setupenv
        pytest --cov-report=xml --cov=dace --tb=short -m "gpu"
        codecov

    - name: Run extra GPU tests
      run: |
        export NOSTATUSBAR=1
        export DACE_cache=single
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        export PYTHON_BINARY="coverage run --source=dace --parallel-mode"
        . /opt/setupenv
        ./tests/cuda_test.sh

    - name: Report overall coverage
      run: |
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        . /opt/setupenv
        coverage combine . */; coverage report; coverage xml
        codecov

  test-fpga:
    runs-on: [self-hosted, linux, intel-fpga, xilinx-fpga]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install dependencies
      run: |
        rm ~/.dace.conf
        rm -rf .dacecache tests/.dacecache
        . /opt/setupenv
        python -m pip install --upgrade pip
        pip install flake8 coverage codecov
        pip uninstall -y dace
        pip install -e ".[testing]"

    - name: Run Intel FPGA tests
      run: |
        export NOSTATUSBAR=1
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        export PYTHON_BINARY="coverage run --source=dace --parallel-mode"
        . /opt/setupenv
        python tests/fpga/intel_fpga_test.py
        codecov

    - name: Run Xilinx tests
      run: |
        export NOSTATUSBAR=1
        export COVERAGE_RCFILE=`pwd`/.coveragerc
        export PYTHON_BINARY="coverage run --source=dace --parallel-mode"
        . /opt/setupenv
        python tests/fpga/xilinx_test.py
        codecov
